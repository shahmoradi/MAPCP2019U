<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/MAPCP2019U/feed.xml" />
<link rel="alternate" type="text/html" href="http:/MAPCP2019U/" />
<updated>2019-06-20T10:34:22-05:00</updated>
<id>http:/MAPCP2019U/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/MAPCP2019U/</uri>
  <email>shahmoradi@utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Lecture 5: Python - variables and assignment statements]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/lecture/5-python-variables-assignments"/>
  <id>http:/MAPCP2019U/lecture/5-python-variables-assignments</id>
  <published>2019-06-20T00:00:00-05:00</published>
  <updated>2019-06-20T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains different types of variables in Python, branching statements, how to define functions, and what Python modules are.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h2&gt;
&lt;p&gt;The following table summarizes some of the important keywords in this lecture for you.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
    &lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
    &lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;dictionary&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A collection of `key:value` mapping pairs, in which the values can be obtained by calling the value's key.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;hashable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A Python object (e.g., variable) that has a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_function&quot; target=&quot;_blank&quot;&gt;hash value&lt;/a&gt; which never changes during its lifetime.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;immutable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A variable or value that cannot be modified. Assignments to elements of immutable values cause a runtime error. Example immutable Python entities are tuples and strings.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;invocation&lt;/b&gt;&lt;/td&gt;&lt;td&gt;The process of calling an object's method, usually done through &lt;code&gt;&amp;#60;object name&amp;#62;.&amp;#60;method name&amp;#62;&lt;/code&gt; notation.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;list&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A sequence of comma-separated heterogenous values next to each other.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;method&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Similar to a function, a method is a predefined built-in Python script that performs a specific task on the data object to which the method belongs.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;mutable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A variable or value that can be modified. Examples of mutables in Python are lists, and dictionaries.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;set&lt;/b&gt;&lt;/td&gt;&lt;td&gt;An unordered collection of unique elements, just like the mathemtical sets.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;string&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A sequence of characters next to each other.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;tuple&lt;/b&gt;&lt;/td&gt;&lt;td&gt;An immutable data value that contains related elements. Tuples are used to group together related data, such as a person’s name, their age, and their gender.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;variables-in-python-continued&quot;&gt;Variables in Python (continued)&lt;/h2&gt;
&lt;p&gt;A variable is simply a name that we assign to a specific value, in order to avoid repeating the same value frequently in the code, thus writing a cleaner, less error-prone script/code. As we discussed before, Python has 6 main variable types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tuple&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dictionary&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set and Frozenset&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will get to each of these below. But before that, here are some official and unofficial tips on the variable naming conventions in Python.&lt;/p&gt;

&lt;h3 id=&quot;variable-naming-convention-in-python&quot;&gt;Variable naming convention in Python&lt;/h3&gt;

&lt;p&gt;A Python variable can only begin with letter or underscore _. Numbers are only valid if they appear inside or at the end of the variable name. Other symbols are syntactically invalid anywhere in a variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;123new_var = 2.5 # This is an invalid name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-10-0e3e63931842&amp;gt;&quot;, line 1
    123new_var = 2.5 # This is an invalid name
             ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;new_var$ = 2.5 # symbols are not valid in Python variable names
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-12-71f3fbc68938&amp;gt;&quot;, line 1
    new_var$ = 2.5 # symbols are not valid in Python variable names
           ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;amir = &quot;teacher&quot;
print('Amir is a', amir)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Amir is a teacher
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;123amir = &quot;teacher&quot; # Wrong name for variable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-38-85ed673cd303&amp;gt;&quot;, line 1
    123amir = &quot;teacher&quot;
          ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;life_expectancy = 120; print( &quot;The life expectancy for the millennials is projected to be %d years! (But don't believe it...)&quot; % (life_expectancy) );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The life expectancy for the millennials is projected to be 120 years! (But don't believe it...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;python-reserved-names-keywords&quot;&gt;Python reserved names (keywords)&lt;/h3&gt;
&lt;p&gt;There are some limitation as what names you can choose for your variables, even if they completely obey the Python syntax standard. Variable names in Python cannot be the same as &lt;strong&gt;Python keywords&lt;/strong&gt;, which are simply names that reserved for a specific purpose in Python programming.  A keyword as variable name, function name or any other identifier. They are used to define the syntax and structure of the Python language. Note that &lt;strong&gt;Python keywords are case-sensitive&lt;/strong&gt;.  There are already more than 30 keywords in Python 3. In order to see a complete list of all keywords use the following python codes,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [38]: import keyword

In [39]: print(keyword.
keyword.iskeyword keyword.kwlist    keyword.main

In [39]: print(keyword.kwlist)
['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

In [40]: keyword.kwlist # same thing as above, but each keyword printed on a new line.
Out[40]:
['False',
 'None',
 'True',
 'and',
 'as',
 'assert',
 'break',
 'class',
 'continue',
 'def',
 'del',
 'elif',
 'else',
 'except',
 'finally',
 'for',
 'from',
 'global',
 'if',
 'import',
 'in',
 'is',
 'lambda',
 'nonlocal',
 'not',
 'or',
 'pass',
 'raise',
 'return',
 'try',
 'while',
 'with',
 'yield']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that all keywords except &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; are in lowercase and they must be written as lowercase. To understand the meaning and function of each of these keywords, see &lt;a href=&quot;https://www.programiz.com/python-programming/keyword-list&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;meaning-of-underscore-_-in-python&quot;&gt;Meaning of underscore _ in Python&lt;/h3&gt;

&lt;p&gt;Frequently, as you learn more about Python, you will notice the presence of underscores in Python variables, function and method names. Depending on where and how underscore appears in a Python name, it can have a different meaning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Underscore as word separator in variable/function naming&lt;/strong&gt;&lt;br /&gt;
The convention in Python programming is to separate multiple words in Python variable names by underscore. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;an_example_long_variable_name = 123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Of course, this is totally a convension. But I highly recommend you to follow the conventions that everyone else follows, so that you can understand other people’s codes and others can understand your code easily. 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Underscore meaning in Python interpreter&lt;/strong&gt;&lt;br /&gt;
A variable named solely by underscore &lt;strong&gt;_&lt;/strong&gt; in Python interpreter points to the result of the &lt;strong&gt;last executed statement&lt;/strong&gt; in the interactive interpreter session. This convention was first implemented by the standard CPython interpreter, but now other implementations are also following the convention.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: _
Out[1]: ''

In [2]: a = 120

In [3]: _
Out[3]: ''

In [4]: a + a
Out[4]: 240

In [5]: _
Out[5]: 240
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3. _ as a dummy name in Python scripts&lt;/strong&gt;&lt;br /&gt;
The underscore _ can be used as a dummy name in Python scripts, a name for an entity that does play an important role in the code, for example, the index of a loop. This allows the next person who reads the code to know which entites (variables, …) are dummy and not intended to be used.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = 1
b = 2
print(&quot;a =&quot;,a,&quot;b =&quot;,b)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a = 1 b = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;_ = a
a = b
b = _
print(&quot;a =&quot;,a,&quot;b =&quot;,b) # the values are swapped. _ is just a dummy indtermediate variable.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a = 2 b = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4. Underscore as an indicator of the local-scope of a variable/function&lt;/strong&gt;&lt;br /&gt;
A single underscore that appears at the beginning of a name in Python code indicates that the name has to be treated as &lt;em&gt;private&lt;/em&gt; by the programmer. In other words, a name starting with _ is for internal use. In Python documentation the following note exist about such names:&lt;/p&gt;

&lt;blockquote&gt;
    A name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.  
&lt;/blockquote&gt;

&lt;p&gt;For Python module functions, if you use &lt;code&gt;from module_name import __all__&lt;/code&gt; instead of &lt;code&gt;from module_name import *&lt;/code&gt;, then all internal names in the module (that begin with _) will be imported to your environment as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Double Underscore Before and After a Name (e.g., &lt;code&gt;__init__&lt;/code&gt;)&lt;/strong&gt;&lt;br /&gt;
Such names are special method names used by Python. This is just a convention, that is, a way for the Python system to use names that won’t conflict with user-defined names. These names can be typically overridden to define the desired behaviour for when Python calls them. For example, the &lt;code&gt;__init__&lt;/code&gt; method is often overridden when writing a Python class. We will get to these topics later on in this course.&lt;/p&gt;

&lt;p&gt;A good review of underscore in Python can be found &lt;a href=&quot;https://shahriar.svbtle.com/underscores-in-python&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;number-variables&quot;&gt;Number variables&lt;/h3&gt;

&lt;p&gt;We have already extensively discussed number values in the previous lecture. Basically, everything that we have said about number values, holds also for variables of type number. But here is a very cool fear of number values and variables, that we skipped over in our previous lecture. When you define a Python number variable (or value), then python interpreter automatically allows you to perform some pre-defined operations on the variable/value by default. To access these operations, the dot &lt;code&gt;.&lt;/code&gt; syntax has to be used. Type the variable name, followed by &lt;code&gt;.&lt;/code&gt;, and then press &lt;code&gt;tab&lt;/code&gt; in your IPython/Jupyter editor.  Depending on the type of number (integer/float/complex) you will get a different set of operations that are allowed on the variable. The following shows some examples in IPython environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [18]: a = 120 # This is an integer variable

In [19]: a.
a.bit_length  a.conjugate   a.denominator a.from_bytes  a.imag        a.numerator   a.real        a.to_bytes

In [19]: a.conjugate
Out[19]: &amp;lt;function int.conjugate&amp;gt;

In [20]: a.conjugate()
Out[20]: 120

In [21]: a.imag
Out[21]: 0

In [22]: a.real
Out[22]: 120
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [23]: a = 120.5  # Now 'a' is a float variable

In [24]: a.
a.as_integer_ratio a.conjugate        a.fromhex          a.hex              a.imag             a.is_integer       a.real

In [25]: a.as_integer_ratio()  # Gives out the two numbers whose division is the value of the variable 'a'.
Out[25]: (241, 2)

In [28]: a.is_integer()   # 120.5 is not a whole number! (it would be True if a = 120.0)
Out[28]: False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can repeat the above for a complex number and see what you get.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [33]: a = 1+1j

In [34]: a.
a.conjugate a.imag      a.real

In [34]: a.conjugate()
Out[34]: (1-1j)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;string-variables&quot;&gt;String variables&lt;/h3&gt;
&lt;p&gt;Just as with numbers, string is another variable/value type in Python with many handy features that come withit. For example, if you create a string variable or value, fllowed by &lt;code&gt;.&lt;/code&gt; and then press &lt;code&gt;tab&lt;/code&gt; you will see a long list of methods that can be applied on the string,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [8]: my_string = 'this is a String'

In [9]: my_string.
my_string.capitalize   my_string.find         my_string.isdigit      my_string.isupper      my_string.replace      my_string.split        my_string.upper
my_string.casefold     my_string.format       my_string.isidentifier my_string.join         my_string.rfind        my_string.splitlines   my_string.zfill
my_string.center       my_string.format_map   my_string.islower      my_string.ljust        my_string.rindex       my_string.startswith
my_string.count        my_string.index        my_string.isnumeric    my_string.lower        my_string.rjust        my_string.strip
my_string.encode       my_string.isalnum      my_string.isprintable  my_string.lstrip       my_string.rpartition   my_string.swapcase
my_string.endswith     my_string.isalpha      my_string.isspace      my_string.maketrans    my_string.rsplit       my_string.title
my_string.expandtabs   my_string.isdecimal    my_string.istitle      my_string.partition    my_string.rstrip       my_string.translate

In [9]: my_string.upper()
Out[9]: 'THIS IS A STRING'

In [10]: my_string.swapcase()
Out[10]: 'THIS IS A sTRING'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;strings-are-immutable&quot;&gt;Strings are immutable&lt;/h4&gt;
&lt;p&gt;Although strings (both values and variables) can be indexed letter by letter, keep in mind that they cannot be changed (mutated) to something new. In other words, string are immutable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [11]: my_string = 'Amir Shahmoradi'

In [13]: my_string[0] = 'a'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-13-27fc86283e06&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 my_string[0] = 'a'

TypeError: 'str' object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The correct way of doing this would be through the indirect use of string methods or string slicing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [18]: my_string = my_string[:4] + ' ' + my_string[4:] # mutating my_string: add a space between first and last names.

In [19]: my_string
Out[19]: 'Amir  Shahmoradi'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
It is often very useful to know the length of a string. This can be done using &lt;code&gt;len()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [32]: len(my_string)
Out[32]: 16

In [33]: len(my_string[0:5])
Out[33]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;testing-if-a-string-is-part-of-another-string&quot;&gt;Testing if a string is part of another string&lt;/h4&gt;

&lt;p&gt;We have already discussed some boolean string operations in Lecture 4. There are howver two more boolean operations that deserve to be mentioned here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [48]: text = &quot;Engineering Computation program at UT Austin, is the first of its kind in the nation&quot;

In [49]: &quot;comp&quot; in text     # test if &quot;comp&quot; is part of the &quot;text&quot; string variable.
Out[49]: False

In [50]: &quot;Comp&quot; in text
Out[50]: True

In [51]: &quot;comp&quot; not in text     # test if &quot;comp&quot; is NOT part of the &quot;text&quot; string variable.
Out[51]: True

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To know more about string values and variables in general, visit &lt;a href=&quot;https://docs.python.org/2/tutorial/introduction.html#strings&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;list-variables&quot;&gt;List variables&lt;/h3&gt;
&lt;p&gt;List is another standard variable in type in Python and is composed of an ordered set of values (elements), each of which is identified by an index. Lists are defined by brackets &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [47]: emptyList = [] # initiate an empty list

In [48]: emptyList
Out[48]: []

In [40]: myList = [ 0,1,2,'Amir',complex(1,2j) ]

In [41]: myList
Out[41]: [0, 1, 2, 'Amir', (-1+0j)]

In [42]: myList[0] # note that list index always begins with 0
Out[42]: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;list-slices&quot;&gt;List slices&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [43]: myList[:-1] # all list elements from beginning to end, similar to myList, or myList[:]
Out[43]: [0, 1, 2, 'Amir']

In [44]: myList[:]
Out[44]: [0, 1, 2, 'Amir', (-1+0j)]

In [45]: myList[-1:] # select only the last element in list
Out[45]: [(-1+0j)]

In [46]: myList[::-1] # Creat list in reverse order.
Out[46]: [(-1+0j), 'Amir', 2, 1, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;Lists vs. Strings&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    You may have already noticed that lists behave very similar to strings in Python. In fact, both List and String are examples of ordered sets in Python known as &lt;b&gt;sequence&lt;/b&gt;. The only difference between list and python is that the elements of strings have to be all of type character, whereas lists do not have such restriction, as seen in the example above.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;br&gt;
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:justify;&quot;&gt;
        &lt;b&gt;Lists vs. Strings&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        You may have already noticed that lists behave very similar to strings in Python. In fact, both List and String are examples of ordered sets in Python known as &lt;b&gt;sequence&lt;/b&gt;. The only difference between list and python is that the elements of strings have to be all of type character, whereas lists do not have such restriction, as seen in the example above.
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;h4 id=&quot;nested-lists&quot;&gt;Nested lists&lt;/h4&gt;
&lt;p&gt;Lists can also contain other lists as elements. This way you can create matrices of numbers as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [53]: smallList = [1,2,3]

In [54]: list_of_lists = [ 10 , 100.0 , ['amir','shahmoradi'] , smallList ]

In [55]: list_of_lists
Out[55]: [10, 100.0, ['amir', 'shahmoradi'], [1, 2, 3]]

In [56]: my_matrix = [ [1,2,3] , [4,5,6] , [7,8,9] ]

In [57]: my_matrix[0][2] # the first index points to the 0th element in the list of lists, and the second index calls the list that is the first element of the big list. 
Out[57]: 3

In [68]: my_matrix[5-5][(2+2)//2]  # note that list indices can be the result of arithmetic operations too.
Out[68]: 3

In [61]: len(my_matrix) # This function gives the length of the list of lists.
Out[61]: 3

In [62]: list_of_lists
Out[62]: [10, 100.0, ['amir', 'shahmoradi'], [1, 2, 3]]

In [63]: len(list_of_lists[0]) # The first element, being an integer, does not have a length
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-63-11f2bd3dda3d&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 len(list_of_lists[0])

TypeError: object of type 'int' has no len()

In [64]: len(list_of_lists[2]) # but the third element in the list, is itself a list, so it does have a length
Out[64]: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;operations-on-lists&quot;&gt;Operations on lists&lt;/h4&gt;
&lt;p&gt;Two mathematics operations &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; are also meaningful for lists, just as it is for string sequences.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [8]: list1 = [1,2,3]

In [9]: list2 = [4,5,6]

In [10]: list1 + list2
Out[10]: [1, 2, 3, 4, 5, 6]

In [11]: list1 * 3
Out[11]: [1, 2, 3, 1, 2, 3, 1, 2, 3]

In [12]: (list1 + list2) * 3
Out[12]: [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In addition, once a list is created, by default, a list of pre-defined operations (methods) are available to act on the list content. To access these methods, again use &lt;code&gt;.&lt;/code&gt; notation, just as you did for strings before.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [13]: list1.
list1.append  list1.clear   list1.copy    list1.count   list1.extend  list1.index   list1.insert  list1.pop     list1.remove  list1.reverse list1.sort

In [13]: list1
Out[13]: [1, 2, 3]

In [14]: list1.append(4) # append number 4 to the end of list1

In [15]: list1
Out[15]: [1, 2, 3, 4]

In [16]: list1.append([1,1,1]) # append the given list to the end of list1

In [17]: list1
Out[17]: [1, 2, 3, 4, [1, 1, 1]]

In [18]: list1.count(1) # count the number of times 1 appears as element of list1
Out[18]: 1

In [19]: list1[-1].count(1) # count the number of times 1 appears as element in the list appearing as the element in list1.
Out[19]: 3

In [20]: list1[-2].count(4)  # Note that count is a method only for lists, and therefore cannot be applied to numbers.
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&amp;lt;ipython-input-21-2add981bfc56&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 list1[-2].count(4)

AttributeError: 'int' object has no attribute 'count'

In [23]: list1.extend([1,1,1])  # extend list1 by 3 more members

In [24]: list1
Out[24]: [1, 2, 3, 4, [1, 1, 1], 1, 1, 1]

In [25]: list1.count(1) # This time counting 1, gives 4, since the list was extended by 3 more '1'.
Out[25]: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://linuxconfig.org/python-list-methods&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is a useful reference for available list methods in Python.&lt;/p&gt;

&lt;h4 id=&quot;lists-are-mutable-unlike-strings&quot;&gt;Lists are mutable (unlike Strings)&lt;/h4&gt;
&lt;p&gt;Another major difference between list sequences and string sequences in Python is that the elements of lists can be changed (mutated) to something new.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [26]: people = [ 'Amir' , 'Jake' , 'Travis' ]

In [27]: people
Out[27]: ['Amir', 'Jake', 'Travis']

In [28]: people[0] = 'Brandon'

In [29]: people
Out[29]: ['Brandon', 'Jake', 'Travis']

In [30]: people.remove('Brandon')

In [31]: people
Out[31]: ['Jake', 'Travis']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;deleting-list-elements&quot;&gt;Deleting list elements&lt;/h4&gt;
&lt;p&gt;Deleting list elements can be done by either value of the element, or using its index, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [138]: a = [1,2,3,1,2,3]

In [139]: a.remove(1)   # remove the first element correponding to value of 1.

In [140]: a
Out[140]: [2, 3, 1, 2, 3]

In [141]: a.remove(1)   # remove the first element correponding to value of 1.

In [142]: a
Out[142]: [2, 3, 2, 3]

In [143]: del a[0:3:2]      # delete element indices 0, 2

In [144]: a
Out[144]: [3, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;concatenating-a-list-of-strings&quot;&gt;Concatenating a list of strings&lt;/h4&gt;
&lt;p&gt;If a list is all string values, you can use the following string method &lt;code&gt;.join()&lt;/code&gt; to concatenate the content og the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [155]: mylist = ['The' , 'weather' , 'is' , 'rainy' , 'today' , 'and' , 'cold' , 'only' , '22' , 'F.']

In [156]: &quot; &quot;.join(mylist)
Out[156]: 'The weather is rainy today and cold only 22 F.'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tuple-variables&quot;&gt;Tuple variables&lt;/h3&gt;
&lt;p&gt;Tuples are a type of Python variables very similar to list sequences, except that they are &lt;strong&gt;immutable&lt;/strong&gt;, meaning that, once generated, they cannot be changed. Another difference is that, tuples use parentheses for definition, whereas lists use square brackets.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [33]: emptyTuple = ()

In [34]: single_element_tuple = (1,)  # ATTN: note the comma after the element

In [35]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [36]: single_element_tuple
Out[36]: (1,)

In [37]: type(single_element_tuple)
Out[37]: tuple

In [38]: single_element_tuple = (1)

In [39]: single_element_tuple
Out[39]: 1

In [40]: type(single_element_tuple)
Out[40]: int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Creating a tuple is as simple as putting different comma-separated values. Optionally you can put these comma-separated values between parentheses also.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [46]: tuple2 = 1,2,3,4   # another way of creating a tuple

In [47]: type(tuple2)
Out[47]: tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;modifying-the-content-of-tuples&quot;&gt;Modifying the content of Tuples&lt;/h4&gt;
&lt;p&gt;Tuples are an example of data structure in Python, used for organizing and grouping data. Once a tuple is created, its content cannot be changed or manipulated anymore. However, its elements can be called just like lists.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [48]: tuple2[0]
Out[48]: 1

In [49]: tuple2[1:3]
Out[49]: (2, 3)

In [50]: tuple2.    # press tab key to get the list methods
tuple2.count tuple2.index

In [51]: tuple2.count(2) # count the number of members that are 2
Out[51]: 1

In [52]: tuple2.count(5) # count the number of members that are 5
Out[52]: 0

In [53]: tuple2.index(2) # get the index of the first member in tuple that is 2
Out[53]: 1

In [54]: tuple2.index(5) # get the index of the first member in tuple that is 5. (error! 5 is not a member)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&amp;lt;ipython-input-54-f0077f9af98b&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 tuple2.index(5)

ValueError: tuple.index(x): x not in tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Moreover, although the content of tuple cannot be changed, there is nothing to prevent the programmer from redefining the tuple with new content,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [106]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [107]: tuple1
Out[107]: (1, 2, 3, 'amir', 'Jake')

In [108]: tuple1 = ('Travis','Caleb','Lucero') + tuple1[-1:]    # redefining tuple1

In [109]: tuple1
Out[109]: ('Travis', 'Caleb', 'Lucero', 'Jake')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But pay attention that the above, all the terms in the assigment must be a tuple, otherwise you will get an error like the following (e.g., a single member of a tuple, is not a tuple by itself),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [110]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [111]: tuple1 = ('Travis','Caleb','Lucero') + tuple1[-1] # Note that tuple1[-1] is a string, and not a tuple!
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-111-4c6018fb7529&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 tuple1 = ('Travis','Caleb','Lucero') + tuple1[-1]

TypeError: can only concatenate tuple (not &quot;str&quot;) to tuple

In [112]: type(tuple1[-1])
Out[112]: str

In [113]: type(tuple1[-1:])
Out[113]: tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note also the difference between &lt;code&gt;+&lt;/code&gt; operations in the above tuple redefinition, and &lt;code&gt;,&lt;/code&gt; operations below,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [126]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [127]: tuple1 = ('Travis','Caleb','Lucero') + tuple1[-1:]

In [128]: tuple1
Out[128]: ('Travis', 'Caleb', 'Lucero', 'Jake')

In [129]: tuple1 = (1, 2, 3, 'amir', 'Jake')

In [130]: tuple1 = ('Travis','Caleb','Lucero') , tuple1[-1:]

In [131]: tuple1
Out[131]: (('Travis', 'Caleb', 'Lucero'), ('Jake',))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Tuples can be &lt;strong&gt;heterogeneous&lt;/strong&gt;, as in the above example, meaning that each member of tuple can be a tuple itself, a list, or any other variable type.&lt;/p&gt;

&lt;h3 id=&quot;dictionary-variables&quot;&gt;Dictionary variables&lt;/h3&gt;
&lt;p&gt;The past three data types discussed in the previous secitons — strings, lists, and tuples — are of type &lt;strong&gt;sequence&lt;/strong&gt;. For sequences, we have seen above that we use integers as indices to access the values these variables contain. Dictionaries are yet another built-in variable type in Python. A dictionary variable is a sequence of pairs of {key: value}. Instead of using numbers to index elements (as in list, string, tuple), dictionaries use keys in order to retrieve the key’s value.  The keys can be any immutable type (string, number and tuple). Values can be any type (heterogeneous, mutable), just like the elements of a list or tuple. Dictionaries are also called &lt;strong&gt;associative arrays&lt;/strong&gt; since they associate a key with a value. One way to create a dictionary is to start with the empty dictionary and add &lt;code&gt;key:value&lt;/code&gt; pairs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [161]: age = {}   # empty dictionary

In [162]: age
Out[162]: {}

In [163]: type(age)
Out[163]: dict

In [164]: age = { 'amir':120 , 'jake':22 , 'Lucero':19 , 'Travis':20 }

In [165]: age
Out[165]: {'Lucero': 19, 'Travis': 20, 'amir': 120, 'jake': 22}

In [166]: age['Lucero']
Out[166]: 19
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Some important features of dictionaries are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A dictionary is a collection of key-value pairs.&lt;/li&gt;
  &lt;li&gt;A dictionary is a set of key:value pairs.&lt;/li&gt;
  &lt;li&gt;All keys in a dictionary must be unique.&lt;/li&gt;
  &lt;li&gt;In a dictionary, a key and its value are separated by a colon (:).&lt;/li&gt;
  &lt;li&gt;Each key-value pair is separated by a comma from another pair in dictionary.&lt;/li&gt;
  &lt;li&gt;All the key-value pairs together are listed between curly brackets &lt;code&gt;{ }&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Query the dictionary using square brackets &lt;code&gt;[ ]&lt;/code&gt;, inside of which you type the key, and the output will be the value correponding to the key.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;three-ways-of-constructing-distionaries&quot;&gt;Three ways of constructing distionaries&lt;/h4&gt;
&lt;p&gt;The are three basic ways for creating dictionaries in Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create empty dictionary and then add key-value pairs to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: dic = {}

In [2]: dic['amir'] = 'teacher'

In [3]: dic
Out[3]: {'amir': 'teacher'}

In [4]: dic['Jake'] = 'student'

In [5]: dic['Travis'] = 'student'

In [6]: dic
Out[6]: {'Jake': 'student', 'Travis': 'student', 'amir': 'teacher'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2.&lt;/strong&gt; Create a dictionary from a list if tuples, using Python’s built-in function &lt;code&gt;dict()&lt;/code&gt;. The input argument of &lt;code&gt;dict()&lt;/code&gt; is &lt;strong&gt;a list of tuples&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [7]: month = dict( [ ( 1 , 'Jan') \
   ...:               , ( 2 , 'Feb') \
   ...:               , ( 3 , 'Mar') \
   ...:               , ( 4 , 'Apr') \
   ...:               , ( 5 , 'May') \
   ...:               , ( 6 , 'Jun') \
   ...:               , ( 7 , 'Jul') \
   ...:               , ( 8 , 'Aug') \
   ...:               , ( 9 , 'Sep') \
   ...:               , (10 , 'Oct') \
   ...:               , (11 , 'Nov') \
   ...:               , (12 , 'Dec') ] )

In [8]: month
Out[8]:
{1: 'Jan',
 2: 'Feb',
 3: 'Mar',
 4: 'Apr',
 5: 'May',
 6: 'Jun',
 7: 'Jul',
 8: 'Aug',
 9: 'Sep',
 10: 'Oct',
 11: 'Nov',
 12: 'Dec'}

In [9]: month[5]
Out[9]: 'May'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But, be careful to not override the Python’s function &lt;code&gt;dict()&lt;/code&gt; by your user-defined variable or function of the same name, otherwise you will get an error like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: dict = 5

In [11]: new_dic = dict([('amir','teacher')])   # This will give error because dict is not pointing to the built-in function dict() anymore! It was overridden by the above assignment.
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-10-271a21fe772b&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 new_dic = dict([('amir','teacher')])

TypeError: 'int' object is not callable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3.&lt;/strong&gt; Create a dictionary from two lists in parallel. Let’s say the keys and values of our desired dictionary, each are in the form of a list. The question is now, if there is an easy Pythonic way to combine these two lists of keys and values to get a dictionary? The answer is yes, and it is achieved by a Python function named &lt;a href=&quot;https://docs.python.org/2/library/functions.html#zip&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;zip()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: person = ['amir','jake','travis']

In [2]: role = ['teacher','student','student']

In [3]: person_role_dict = dict( zip( person , role ) )

In [4]: type(person_role_dict)
Out[4]: dict

In [5]: person_role_dict
Out[5]: {'amir': 'teacher', 'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;manipulating-dictionary-variables&quot;&gt;Manipulating dictionary variables&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. Removing a dictionary key-value pair&lt;/strong&gt;&lt;br /&gt;
This can be done using Python’s &lt;code&gt;del&lt;/code&gt; command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [10]: person_role_dict
Out[10]: {'amir': 'teacher', 'jake': 'student', 'travis': 'student'}

In [11]: del person_role_dict['amir']

In [12]: person_role_dict
Out[12]: {'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2. Adding a dictionary key&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [14]: person_role_dict
Out[14]: {'jake': 'student', 'travis': 'student'}

In [15]: person_role_dict['amir'] = 'teacher'  # adding a new key-value pair ('amir' : 'teacher')

In [16]: person_role_dict
Out[16]: {'amir': 'teacher', 'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;2. Changing the value of a key&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [17]: person_role_dict['amir'] = 'instructor' # changing the value of the key 'amir'

In [18]: person_role_dict
Out[18]: {'amir': 'instructor', 'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;3. Getting the length of dictionary (number of key-value pairs)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [19]: len(person_role_dict)
Out[19]: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;4. Using dictionary methods&lt;/strong&gt;&lt;br /&gt;
Just as with other Python variable types, typing the name of a dictionary that is already defined, followed by &lt;code&gt;.&lt;/code&gt; followed by pressing the &lt;code&gt;tab&lt;/code&gt; key (in a good Python editor) will show you the list of methods that can act on the dictionary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [20]: person_role_dict.
                           person_role_dict.clear      person_role_dict.get        person_role_dict.pop        person_role_dict.update
                           person_role_dict.copy       person_role_dict.items      person_role_dict.popitem    person_role_dict.values
                           person_role_dict.fromkeys   person_role_dict.keys       person_role_dict.setdefault

In [20]: person_role_dict.keys()
Out[20]: dict_keys(['amir', 'jake', 'travis'])

In [21]: list ( person_role_dict.keys() )
Out[21]: ['amir', 'jake', 'travis']

In [22]: type ( person_role_dict.keys() )
Out[22]: dict_keys

In [23]: type ( list ( person_role_dict.keys() ) )
Out[23]: list

In [24]: person_role_dict.values()
Out[24]: dict_values(['instructor', 'student', 'student'])

In [10]: person_role_dict
Out[10]: {'amir': 'teacher', 'jake': 'student', 'travis': 'student'}

In [27]: person_role_dict.pop('amir')  # remove the key-value pair ('amir':'teacher') and return the corresponding value of the key as output.
Out[27]: 'instructor'

In [28]: person_role_dict
Out[28]: {'jake': 'student', 'travis': 'student'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dictionary-representation-of-sparse-matrices&quot;&gt;Dictionary representation of sparse matrices&lt;/h4&gt;
&lt;p&gt;We already discussed in the above, the usefulness of nested lists in creating matrices. Now suppose we have a sparse matrix, whose most elements are zero, except a few non-zero elements. An alternative to using nested lists, which can also take less memory of the device, is to use a dictionary representation of the sparse matrix.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [16]: sparseMatrixList = [ [ 0 , 0 , 0 , 1 ]
   ....:                    , [ 2 , 0 , 0 , 0 ]
   ....:                    , [ 0 , 5 , 0 , 0 ]
   ....:                    , [ 0 , 0 , 0 , 3 ]
   ....:                    , [ 0 , 0 , 8 , 0 ]
   ....:                    ]

In [17]: sparseMatrixList
Out[17]: [[0, 0, 0, 1], [2, 0, 0, 0], [0, 5, 0, 0], [0, 0, 0, 3], [0, 0, 8, 0]]

In [18]: sparseMatrixDict = { (0,3): 1 , (1,0): 2 , (2,1): 5 , (3,3): 3 , (4,2): 8 }

In [19]: sparseMatrixDict
Out[19]: {(0, 3): 1, (1, 0): 2, (2, 1): 5, (3, 3): 3, (4, 2): 8}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-variables&quot;&gt;Set variables&lt;/h3&gt;
&lt;p&gt;Besides all the aforementioned variable types in Python, there is another Python variable type that is useful for constructing and manipulating &lt;strong&gt;unordered collection of unique elements&lt;/strong&gt;. Common uses of sets include &lt;strong&gt;membership testing&lt;/strong&gt;, &lt;strong&gt;removing duplicates from a sequence&lt;/strong&gt;, and &lt;strong&gt;computing standard math operations on sets&lt;/strong&gt; such as intersection, union, difference, and symmetric difference.&lt;/p&gt;

&lt;p&gt;Like other collections, sets support &lt;code&gt;x in set&lt;/code&gt; and &lt;code&gt;len(set)&lt;/code&gt; operations. Being an unordered collection, &lt;strong&gt;sets do not record element position or order of insertion&lt;/strong&gt;. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.&lt;/p&gt;

&lt;p&gt;There are currently &lt;strong&gt;two built-in set types&lt;/strong&gt;, &lt;strong&gt;set&lt;/strong&gt; and &lt;strong&gt;frozenset&lt;/strong&gt;. The set type is mutable — the contents can be changed using methods like add() and remove().&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [61]: a = set( [ 1,2,3,(1,2),'amir' ] )

In [62]: a.
a.add                         a.difference                  a.intersection                a.issubset                    a.remove                      a.union
a.clear                       a.difference_update           a.intersection_update         a.issuperset                  a.symmetric_difference        a.update
a.copy                        a.discard                     a.isdisjoint                  a.pop                         a.symmetric_difference_update

In [62]: a.add('jake')

In [63]: a
Out[63]: {(1, 2), 1, 2, 3, 'jake', 'amir'}

In [64]: a.add([1,3])   # Note that mutable types cannot appear in a set!
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-64-2a5b54498213&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 a.add([1,3])

TypeError: unhashable type: 'list'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Sets can be also simply created by &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [71]: a = {1,2,3}

In [72]: type(a)
Out[72]: set
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;strong&gt;frozenset type&lt;/strong&gt; is &lt;strong&gt;immutable&lt;/strong&gt; and &lt;strong&gt;hashable&lt;/strong&gt; (i.e., its contents cannot be altered after it is created). It can therefore be used as a dictionary key or as an element of another set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [69]: a = frozenset( [ 1,2,3,(1,2),'amir' ] )

In [70]: a.
a.copy                 a.intersection         a.issubset             a.symmetric_difference
a.difference           a.isdisjoint           a.issuperset           a.union

In [70]: type(a)
Out[70]: frozenset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Note&lt;/strong&gt; that mutable types can neither appear in a set nor a frozenset. You can obtain more information about sets and frozensets and the methods that can act on them in the &lt;a href=&quot;https://docs.python.org/2.4/lib/types-set.html&quot; target=&quot;_blank&quot;&gt;Python library reference&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;assignment-statements-in-python&quot;&gt;Assignment statements in Python&lt;/h2&gt;

&lt;p&gt;In Python, an assignment statement is one line of Python code that contains &lt;strong&gt;at least&lt;/strong&gt; one equal sign &lt;code&gt;=&lt;/code&gt; and the purpose of it is to associate name(s) with a certain value in the program. &lt;strong&gt;Assignment statements are the only Python statements that do not start with a keyword&lt;/strong&gt;. In most cases, the assignment statement will only contain one target name, one equal sign, and one expression (reduced to one single value that is assigned to the name).&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;binding&lt;/strong&gt; is an association between a name and a value. Note that in Python, unlike many other languages, &lt;strong&gt;names themselves are not associated with a specific variable types&lt;/strong&gt;. A name is just a label, and therefore it can be bound to any value of any type at any time. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [50]: a = 'some text'

In [51]: a
Out[51]: 'some text'

In [52]: a = 2

In [53]: a
Out[53]: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aliasing-vs-copying&quot;&gt;Aliasing vs. copying&lt;/h3&gt;
&lt;p&gt;It is very important to understand the difference between &lt;strong&gt;alias&lt;/strong&gt; assignment statements and &lt;strong&gt;copy&lt;/strong&gt; assignment statements. As far as assignments are concerned, all data types in Python can be divided into two categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;simple data types (e.g., int, float, string, tuple)&lt;/li&gt;
  &lt;li&gt;container data types (e.g., list, dict, set, …)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For &lt;strong&gt;simple data types&lt;/strong&gt;, an assignment means that their value is &lt;strong&gt;copied&lt;/strong&gt; to the assigned variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [80]: x = 1

In [81]: y = x   # An assignment statement that copies the value of x into y.

In [82]: x = 2   # Now changing the value of x, won't change the value of y.

In [83]: x
Out[83]: 2

In [84]: y
Out[84]: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;container data types&lt;/strong&gt;, an assignment in the form of copy can be computationally and memory-wise very expensive, and so it makes sense, when an assignment involves container types as values, then the new name would only &lt;strong&gt;point&lt;/strong&gt; to the original container. In other words, the new assignment provides an &lt;strong&gt;alias&lt;/strong&gt; for the container value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [85]: a = [1,2,3]

In [86]: b = a      # In this assignment, b is simply an alias for a. The value of a is NOT copied into b

In [87]: a
Out[87]: [1, 2, 3]

In [88]: b
Out[88]: [1, 2, 3]

In [89]: a is b     # a and b have the same identity
Out[89]: True

In [90]: a == b     # a and b have the same value
Out[90]: True

In [91]: a = [1,2,3]

In [92]: b = [1,2,3]

In [93]: a is b     # a and b don't have the same identity anymore, since they are not pointing to the same value anymore.
Out[93]: False

In [94]: a == b     # Despite not being identical, a and b still have the same value.
Out[94]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you want to get a copy of a container object, instead of an alias for it, you should use the &lt;code&gt;copy&lt;/code&gt; method of the container object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [97]: a = [1,2,3]

In [98]: b = a.copy()   # Copy the content of a into b

In [99]: a is b
Out[99]: False

In [100]: a == b
Out[100]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;b&gt;Conclusion:&lt;/b&gt;&lt;br /&gt;
So, keep in mind that, assignments in which the value to be assigned is a container type (e.g., list, dict, set) will result in an alias, and not a fresh copy of the original value.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;multiple-simultaneous-assignments-in-one-line&quot;&gt;Multiple simultaneous assignments in one line&lt;/h3&gt;
&lt;p&gt;A shortcut way of aliasing multiple variables with one single value is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [101]: a = b = c = 3

In [102]: a is b
Out[102]: True

In [103]: a is b is c
Out[103]: True

In [104]: a == b == c
Out[104]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. This is also true for container variable types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [105]: a = b = c = [1,2,3]

In [106]: a is b is c
Out[106]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also assign multiple objects to multiple variables all in the same asignment statement. But keep in mind that the number of assignments on both sides of equal sign must be equal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [1]: a, b, c = 1, 2, &quot;amir&quot;

In [2]: a
Out[2]: 1

In [3]: b
Out[3]: 2

In [4]: c
Out[4]: 'amir'
&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, two integer objects with values 1 and 2 are assigned to variables a and b respectively, and one string object with the value “amir” is assigned to the variable c. This form of assignment in the above is basically like setting the tuple &lt;code&gt;(a,b,c) = (1,2,&quot;amir&quot;)&lt;/code&gt;. This is why it is important that both sides of the equal sign have the same number of elements. Here are some other examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [5]: a, b, c = 3, 3, 3

In [6]: a is b
Out[6]: True

In [7]: a == b
Out[7]: True

In [57]: [ a , b ] = [ 5 , 4 ]

In [58]: a
Out[58]: 5

In [59]: [ a , b ] = ( 5 , 4 )

In [60]: a
Out[60]: 5

In [61]: [a,b] = [c,d] = [4,5]

In [62]: a is b
Out[62]: False

In [63]: a is c
Out[63]: True

In [64]: [a,b] is [c,d]
Out[64]: False

In [65]: [a,b] is [4,5]
Out[65]: False

In [66]: [a,b] == [c,d]
Out[66]: True

In [67]: [a,b] == [4,5]
Out[67]: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;value-swapping&quot;&gt;Value swapping&lt;/h3&gt;
&lt;p&gt;The traditional way of swapping values of two variables in mostprogramming languages is like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [68]: a = 5

In [69]: b = 7

In [70]: _ = a

In [71]: a = b

In [72]: b = _

In [73]: a
Out[73]: 7

In [74]: b
Out[74]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
With either Python lists or tuples, this swapping can be achived neatly in just one line of code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [75]: (a,b) = (b,a)

In [76]: a
Out[76]: 5

In [77]: b
Out[77]: 7

In [78]: [a,b] = [b,a]

In [79]: a
Out[79]: 7

In [80]: b
Out[80]: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/5-python-variables-assignments&quot;&gt;Lecture 5: Python - variables and assignment statements&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 20, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Solutions - Version control system]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/quiz/1-solutions-version-control-system"/>
  <id>http:/MAPCP2019U/quiz/1-solutions-version-control-system</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
(D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
(F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
(G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
(H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
(I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
(J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Answer: A, D, G, F, I&lt;/strong&gt;
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Answer: B, C&lt;/strong&gt;
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Write down the Git command that lists all Git commands for you.&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Answer:&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; $ git help -a
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;br /&gt;
(B) Does it need interpretation in order to become machine-comprehensible?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Yes. An &lt;em&gt;Assembler&lt;/em&gt; interprets the program for the machine.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name the oldest high-level programming language that is still in active daily use.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;br /&gt;
(B) Approximately how many decades is it old? ($\pm15$ years is acceptable answer. the decade it was created is also an acceptable answer)&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
in 1950s&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name a second-generation programming language.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly  &lt;br /&gt;
(B) Which language-generation are Fortran, C, C++, MATLAB, Python, R?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
third, third, third, fourth, fourth, fourth&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;In what decades C, C++, and MATLAB/Python were created, respectively?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1970s, 1980s, 1980s, 1990s&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name an ancestor programming language of C.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
B&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of C++.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
C, Simula&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of MATLAB/Python.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran/C&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;How would you distinguish exponential behavior vs. power-law behavior (relationship) in a 2-dimensional plot?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An exponential curve looks like a line only when the X-axis is plotted on log-scale.&lt;br /&gt;
A power-law curve looks like a line only when both the X- and Y- axes are plotted on log-scale.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/quiz/1-solutions-version-control-system&quot;&gt;Quiz 1: Solutions - Version control system&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Problems - Version control system]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/quiz/1-problems-version-control-system"/>
  <id>http:/MAPCP2019U/quiz/1-problems-version-control-system</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your basic knowledge of Git version control system. Don’t forget to push your answers to your remote repository by the end of quiz time.&lt;br /&gt;
Push all your answers to &lt;strong&gt;quiz/1/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
(D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add --u&lt;/code&gt;&lt;br /&gt;
(F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
(G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
(H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
(I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
(J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Write down the Git command that lists all Git commands for you.&lt;/li&gt;
  &lt;li&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;br /&gt;
(B) Does it need interpretation in order to become machine-comprehensible?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name the oldest high-level programming language that is still in active daily use.&lt;br /&gt;
(B) Approximately how many decades is it old? ($\pm15$ years is an acceptable answer. the decade it was created is also an acceptable answer)&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name a second-generation programming language.&lt;br /&gt;
(B) Which language-generation are Fortran, C, C++, MATLAB, Python, R?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;In what decades C, C++, and MATLAB/Python were created, respectively?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name an ancestor programming language of C.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of C++.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of MATLAB/Python.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;How would you distinguish exponential behavior vs. power-law behavior (relationship) in a 2-dimensional plot?&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/quiz/1-problems-version-control-system&quot;&gt;Quiz 1: Problems - Version control system&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 4: Python - values, variables, and types]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/lecture/4-python-values-variables-types"/>
  <id>http:/MAPCP2019U/lecture/4-python-values-variables-types</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at guiding you to understand the how to of programming, the difference between programming languages and the natural languages, the type of programming errors and the meaning code debugging how to perform simple arithmetic operations on the Python command line. Throughout this course, I recommend you to use Jupyter for Python programming.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;glossary&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h2&gt;
&lt;p&gt;The following table contains some technical programming phrases that are often used and heard in the field of computer science and programming, that you need to be familiar as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture. The boldface words in the description column indicate items that are expressions with their own description in this table.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A general method for solving a class of problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;bug&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error in &lt;b&gt;program&lt;/b&gt; that has to be resolved for successful execution of the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiled language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose programs need to be compiled by a &lt;b&gt;compiler&lt;/b&gt; in order to run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiler&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A software that translates an entire high-level program into a lower-level language to make it &lt;b&gt;executable&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;debugging&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of finding and removing any type of error in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;exception&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An alternative name for &lt;b&gt;runtime error&lt;/b&gt; in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;executable&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An &lt;b&gt;object code&lt;/b&gt;, ready to be executed. Generally has the file extension &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.out&lt;/code&gt; or no extension at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;formal language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that is intentionally designed for specific purposes, which, unlike &lt;b&gt;natural languages&lt;/b&gt;, follows a strict standard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;high-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language (e.g., Python, Fortran, Java, etc) that has high level of abstraction from the underlying hardware.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;interpreted language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose statements are interpreted line-by-line by an &lt;b&gt;interpreter&lt;/b&gt; and immediately executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;low-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language that has a low-level of abstraction from computer hardware and architecture, such as Assembly. Very close to machine code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;natural language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that evolves naturally, and has looser &lt;b&gt;syntax&lt;/b&gt; rules and standard compared to &lt;b&gt;formal languages&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;object code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The output of a compiler after translating a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;parsing&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;Reading and examining a file/program and analyzing the syntactic structure of the file/program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;portability&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program's ability to be exucatable on more than one kind of computer architecture, without changing the code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;problem solving&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of formulating a problem and finding and expressing a solution to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;program&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A set of instructions in a that together specify an algorithm a computation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;runtime error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error that does not arise and cause the program to stop, until the program has started to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;script&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in an &lt;b&gt;interpreted language&lt;/b&gt; stored in a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantic error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in a program that makes the program do something other than what was intended. Catching these errors can be very tricky.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantics&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The meaning of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;source code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in a high-level compiled language, before being compiled by the &lt;b&gt;compiler&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in program that violates the standard &lt;b&gt;syntax&lt;/b&gt; of the programming language, and hence, the program cannot be interpreted or compiled until the syntax error is resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The structure of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;token&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;One of the basic elements of the syntactic structure of a program, in analogy with &lt;i&gt;word&lt;/i&gt; in a &lt;b&gt;natural language&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;program-content&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-content-of-a-computer-program&quot;&gt;The content of a computer program&lt;/h2&gt;
&lt;p&gt;Although different programming languages look different in their syntax standards, virtually all programming languages are comprised of the following major compnents (instructions):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;br /&gt;
  Virtually every program starts with some input data by the user, or the input data that is &lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_coding&quot; target=&quot;_blank&quot;&gt;hard-coded&lt;/a&gt; in the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mathematical/logical operations&lt;/strong&gt;&lt;br /&gt;
  Virtually all programs involve some sort of mathematical or logical operations on the input data to the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;conditional execution&lt;/strong&gt;&lt;br /&gt;
  In order to perform the above operations on data, most often (but not always) there is a need to check if some conditions are met in the program, and then perform specific programming instructions corresponding to each of the conditions.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;repetition / looping&lt;/strong&gt;&lt;br /&gt;
  Frequently it is needed to perform a specific set of operations repeatedly in the program to achieve the program’s goal.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;br /&gt;
  At the end of the program, it is always needed to output the program result, either to a computer screen or to a file.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;program-debugging&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;debugging-a-program&quot;&gt;Debugging a program&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
As it is obvious from its name, a &lt;strong&gt;bug&lt;/strong&gt; in a computer program is annoying programming error that needs fixing in order for the program to become executable &lt;strong&gt;or&lt;/strong&gt; to give out the correct answer. The process of removing program bugs is called debugging. There are basically three types of programming bugs (errors):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;syntax error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
A program, whether interpreted or compiled, can be successfully run only if it is &lt;em&gt;syntactically correct&lt;/em&gt;. Syntax errors are related to the structure and standard of the language, and the order by which the language &lt;strong&gt;tokens&lt;/strong&gt; are allowed to appear in the code. For example, the following Python &lt;code&gt;print&lt;/code&gt; statement is a syntax error in Python 3 standard, whereas it was considered to be the correct syntax for &lt;code&gt;print&lt;/code&gt; in Python 2 standard.&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [21]: print 'Hello World!'
  File &quot;&amp;lt;ipython-input-21-10fdc521e430&amp;gt;&quot;, line 1
 print 'Hello World!'
                    ^
SyntaxError: Missing parentheses in call to 'print'
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
The syntactically correct usage of &lt;code&gt;print&lt;/code&gt; in Python 3 would be,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [22]: print ('Hello World!')  
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;runtime error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
Runtime errors or sometimes also named &lt;strong&gt;exceptions&lt;/strong&gt; are a class of programming errors that can be detected only at the time of running the code, that is, they are not syntax errors. Examples include:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;memory leaks (very common error in beginner C and C++ codes)&lt;/li&gt;
      &lt;li&gt;uninitialized memory&lt;/li&gt;
      &lt;li&gt;access request to an illegal memory address of the computer&lt;/li&gt;
      &lt;li&gt;security attack vulnerabilities&lt;/li&gt;
      &lt;li&gt;buffer overflow
&lt;br /&gt;
These errors can be sometimes tricky to identify.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;semantic error&lt;/strong&gt;
&lt;br /&gt;
Unlike syntax errors that comprise of something the compiler/interpreter does not understand, semantic errors do not cause any compiler/interpreter error messages. However, the resulting compiled/interpreted code will NOT do what it is intended to do. Semantic errors are the most dangerous types of programming errors, as they do not raise any error flag by the compiler/interpreter, yet the program will not do what it is intended to do, although the code may look perfectly fine on its face. A semantic error is almost synonymous with &lt;strong&gt;logical error&lt;/strong&gt;. Dividing two integers using the regular division operator &lt;code&gt;/&lt;/code&gt; in Python 2 and expecting the result to be real, would result in a semantic error. This is because, in Python 2 standard, the regular division operator is equivalent to &lt;strong&gt;integer division&lt;/strong&gt; for integer operands:&lt;br /&gt;
&lt;br /&gt;
In Python 2,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [23]: 2/7
Out[23]: 0
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
Whereas, you might have really meant a &lt;strong&gt;float division&lt;/strong&gt; by using &lt;code&gt;/&lt;/code&gt;, as in Python 3,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [24]: 2/7
Out[24]: 0.2857142857142857
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;first-python-program&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-first-python-program&quot;&gt;The first Python program&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
The traditional first program in Python language has the following form.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [25]: print ('Hello World!')  
Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;ways-to-run-python-program&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;methods-of-running-a-python-program&quot;&gt;Methods of running a Python program&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Running Python code on the Python interpreter’s command prompt:&lt;/strong&gt;&lt;br /&gt;
Now, as you may have noticed, in the above example, I used IPython command line to code my first simple Python program. This is one of the simplest and quickest methods of Python coding and is actually very useful for testing small simple Python-ideas and code snippets on-the-fly.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running Python code inside a Python file Python from the Bash command line:&lt;/strong&gt;&lt;br /&gt;
As the program size grows, it wiser to put all of your Python scripts into a single file, and then let the Python interpreter run (i.e., interpret) your entire file all at once. To save the above simple “Hello World” Python code in a file and run it, open a Bash command prompt, then use the Bash &lt;code&gt;cat&lt;/code&gt; command to create and add the Python command to your Python file as in the following (On Windows devices, you can use the Git command prompt).&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Amir@CCBB-Amir MINGW64 ~
$ cat &amp;gt;&amp;gt; firstPythonCode.py &amp;lt;&amp;lt; EOF
print ('Hello World!')
EOF
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
Then you can use call python interpreter from the Bash command line to execute your Python code.&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python firstPythonCode.py
python firstPythonCode.py
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running Python code inside a Python file from the Bash command line as a standalone executable:&lt;/strong&gt;&lt;br /&gt;
You can also avoid typing the name of the interpreter (&lt;code&gt;python&lt;/code&gt;) in order to run your code by adding the following &lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot; target=&quot;_blank&quot;&gt;shebang&lt;/a&gt; at the top of your Python script, like the following.&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat &amp;gt;&amp;gt; firstPythonCodeWithShebang.py &amp;lt;&amp;lt; EOF
#!/usr/bin/env python
print ('Hello World!')
print ('This is a Python script with Shebang!')
EOF
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
The result is that now you can run your Python script without the interpreter’s name, as an executable file:&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./firstPythonCodeWithShebang.py
Hello World!
This is a Python script with Shebang!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
Note that &lt;em&gt;shebang&lt;/em&gt; directive only works under Unix/Linux operating systems and command prompts (not windows). When a Python script with a shebang is run as a program, the program loader parses the rest of the script’s initial line as an interpreter directive. The specified interpreter program is run instead, passing to it as an argument the path that was initially used when attempting to run the script.&lt;br /&gt;
&lt;br /&gt;
On the other hand, if you try to run your original code (without Shebang) as an executable without Python interpreter name, you will get an error message like the following,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Amir@CCBB-Amir MINGW64 ~
$ ./firstPythonCode.py
./firstPythonCode.py: line 1: syntax error near unexpected token `'Hello World!''
./firstPythonCode.py: line 1: `print ('Hello World!')'
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running Python code inside a Python file by first compiling it to bytecode from the command line:&lt;/strong&gt;&lt;br /&gt;
You can also compile your Python script into a bytecode. This is, however, a topic of a future lecture.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;python-as-simple-calculator&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-interpreter-as-a-simple-calculator&quot;&gt;Python interpreter as a simple calculator&lt;/h2&gt;
&lt;p&gt;One of the greatest advantages of Python is that it can be used as a simple calculator and program interpreter on-the-fly, just like MATLAB, Mathematica, R, and other scripting languages. In the following, you will see why and how.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;values-and-their-types-in-python&quot;&gt;Values and their types in Python&lt;/h3&gt;
&lt;p&gt;Values are one of the most fundamental entities in programming. Like any other language, a value in Python can be of different types, most importantly &lt;strong&gt;Numeric&lt;/strong&gt; (plain integer, long integer, float (real number), complex), &lt;strong&gt;Boolean&lt;/strong&gt; (logical) which is a subtype of Numeric, or &lt;strong&gt;String&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The following are a few example arithmetic operations with values in Python. You can perform very simple arithmetic on the Python command line, and the result immediately by pressing &lt;code&gt;enter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 + 5 # Just typing some comment on the Python command line. Anything after # is a comment and will be ignored.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 - 7 # difference
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 * 7 # product
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types-function&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;obtaining-the-type-of-a-value&quot;&gt;Obtaining the type of a value&lt;/h4&gt;

&lt;p&gt;You can use the Python’s built-in function &lt;code&gt;type&lt;/code&gt; to get the type of a value in Python (Of course, this is somewhat obvious and redundant for a value input as we already readily know the type of a value).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(2*7) # type function gives you the type of the input object to function &quot;type&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;int ```python type('This is a Python string') # a string value in Python ```
str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(&quot;This is a Python string&quot;) # you can also use quotation marks for representing string values, but keep in mind to be consistent!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(True) # type of a boolean True value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;bool
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(True) # type of a boolean False value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types-coercion&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;value-coercion-in-python&quot;&gt;Value coercion in Python&lt;/h4&gt;
&lt;p&gt;Value coercion is the &lt;strong&gt;implicit&lt;/strong&gt; process by which the Python interpreter/compiler automatically converts a value of one type into a value of another type when that second type is required by the surrounding context. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2.0 * 7 # Note that the product of float and integer is coerced into a float.
type(2.*7)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;14.0
float
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 / 7 # floating point division (in Python 3!).
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.2857142857142857
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION: Python 2 Alert!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    In Python 2, the above division would give you 0, that is, in Python 2, the division operator performs an &lt;i&gt;integer division&lt;/i&gt;  for two input integer operands. I recommend you to always coerce the result into float (if a float is what you demand) by adding a decimal point to one of the operands in your operation.
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;ATTENTION: Python 2 Alert!&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        In Python 2, the above division would give you 0, that is, in Python 2, the division operator performs an &lt;i&gt;integer division&lt;/i&gt; for two input integer operands.
        &lt;br&gt;&lt;br&gt;
        &lt;b&gt;
        I recommend you to always coerce the result into float (if float is what you demand) by adding a decimal point to one of the operands in your operation.
        &lt;/b&gt;
    &lt;/div&gt;
&lt;/div&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2.0 / 7 # Also floating point division
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.2857142857142857
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2 // 7 #  integer division, or floor division
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2.0 // 7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;12 // 7 #  another integer division, or floor division
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;12.0 // 7 #  Also an integer division, or floor division, BUT NOTE THAT the output is now a real number 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;strong&gt;Summary of difference in division between Python 2 and Python 3:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
Note that there is a difference between Python 2 and 3 for &lt;strong&gt;integer division&lt;/strong&gt;.&lt;/p&gt;

&lt;h5 id=&quot;python-2&quot;&gt;Python 2&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print 'Python', python_version()
print '3 / 2 =', 3 / 2
print '3 // 2 =', 3 // 2
print '3 / 2.0 =', 3 / 2.0
print '3 // 2.0 =', 3 // 2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python 2.7.6
3 / 2 = 1
3 // 2 = 1
3 / 2.0 = 1.5
3 // 2.0 = 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;python-3&quot;&gt;Python 3&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('Python', python_version())
print('3 / 2 =', 3 / 2)
print('3 // 2 =', 3 // 2)
print('3 / 2.0 =', 3 / 2.0)
print('3 // 2.0 =', 3 // 2.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python 3.5.2
3 / 2 = 1.5
3 // 2 = 1
3 / 2.0 = 1.5
3 // 2.0 = 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words, in &lt;strong&gt;Python 3&lt;/strong&gt;, 3 / 2  performs a &lt;strong&gt;floating point division&lt;/strong&gt;, whereas in &lt;strong&gt;Python 2&lt;/strong&gt;, 3 / 2  performs a &lt;strong&gt;floor division&lt;/strong&gt;, also called &lt;strong&gt;integer division&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If you want to get the Python version you are using, use the following commands. The first command imports from the Python &lt;b&gt;platform&lt;/b&gt; module, the command &lt;b&gt;python_version&lt;/b&gt;. Later on, we will discuss what Python modules are and how and why you should use them.
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;NOTE&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        If you want to get the Python version you are using, use the following commands. The first command imports from the Python &lt;b&gt;platform&lt;/b&gt; module, the command &lt;b&gt;python_version&lt;/b&gt;. Later on, we will discuss what Python modules are and how and why you should use them.
    &lt;/div&gt;
&lt;/div&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from platform import python_version
python_version()

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'3.5.2'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2**7 # This is an exponentiation operation. The notation is taken from Fortran exponentiation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2.0**7 # This is float exponentiation.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;2**7.0 # ATTN: Avoid this format, if not necessary.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;12 % 7  # This is a remainder operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;12.0 % 7 # Another remainder operation, with its result coerced into a float
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types-builtin&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;some-useful-built-in-operationsfunctions-in-python&quot;&gt;Some useful built-in operations/functions in Python&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pow(2,7) # same operation as 2**7. This is the same exponentiation function as in C language.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pow(2.0,7) # same thing but now the result is coerced into a float
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;128.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;abs(-999) # absolute value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;999
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;int(-999.9) # removes the decimal points and keeps the integer part
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-999
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;int(999.9) # removes the decimal points and keeps the integer part
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;999
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;complex(-999.9) # complex number with real part -999.9 and no (zero) imaginary part
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(-999.9+0j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;complex(-999.9, 2) # complex number with real part -999.9 and imaginary part value of 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(-999.9+2j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;complex(-999.9, 2).conjugate() # the conjugate of the complex number
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(-999.9-2j)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(complex(-999.9, 2).conjugate()) # type function can take complex arguments as input!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;complex
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;divmod(5, 2.0) # gives out the pair (x // y, x % y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(2.0, 1.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(divmod(5, 2.0)) # the type of output from divmod
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-order-of-operation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;order-of-operation-in-python&quot;&gt;Order of operation in Python&lt;/h3&gt;
&lt;p&gt;The order of operation in Python is pretty much the same as in any other sane language: &lt;strong&gt;anything inside Paratheses&lt;/strong&gt; has precendence over &lt;strong&gt;Exponentiation (**)&lt;/strong&gt; has precedence over &lt;strong&gt;Multiplication &amp;amp; Division (/ &amp;amp; *)&lt;/strong&gt; has precedence over &lt;strong&gt;Addition &amp;amp; Subtraction (+ &amp;amp; -)&lt;/strong&gt;. In abbreviation, the rule of operation precendence is &lt;strong&gt;PEMDAS&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print(&quot;3 + 2.0 - 3 * 2 / 3 =&quot;,3 + 2.0 - 3 * 2 / 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3 + 2.0 - 3 * 2 / 3 = 3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-string-operation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;operations-on-string-values-in-python&quot;&gt;Operations on string values in Python&lt;/h4&gt;
&lt;p&gt;You can concatenate strings in Python just like &lt;strong&gt;adding&lt;/strong&gt; numbers together. Also, you can &lt;strong&gt;multiply&lt;/strong&gt; string values by a number, to get mutiple copies of the string value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'Amir ' + 'Shahmoradl ' + 'is my full name!' # You can add strings together just like numbers. This is called string concatenation.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'Amir Shahmoradl is my full name!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' - 'shahmoradi' # This is meaningless and syntactically invalid in Python
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-6-41f5035ed36a&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 'amir' - 'shahmoradi' # This is meaningless and syntactically invalid in Python


TypeError: unsupported operand type(s) for -: 'str' and 'str'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir ' * 5 + 'is 5 amirs concatenated!' # multiplying string values by some number
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'amir amir amir amir amir is 5 amirs concatenated!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir ' * 's' # meaningless
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-11-ddce79744de9&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 'amir ' * 'r' # meaningless


TypeError: can't multiply sequence by non-int of type 'str'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' / 's' # also meaningless
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-12-b6e45f1a8ab1&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 'amir' / 's' # also meaningless


TypeError: unsupported operand type(s) for /: 'str' and 'str'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;COOL FEATURE FOR STRING MANIPULATION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that string values are like vectors of characters in Python! you can call a specific element of it!  
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;br&gt;
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;COOL FEATURE FOR STRING MANIPULATION&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        Note that string values are like vectors of characters in Python! you can call a specific element of it!  
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[0] # first letter in the string
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'a'
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    In order to count elements from the end of the string, use negative in the index.
&lt;/blockquote&gt;

&lt;!--
&lt;br&gt;
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;NOTE&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        In order to count elements from the end of the string, use negative in the index.
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-2] # the second letter from the end of the string
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'i'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-2:-3] # you get nothing because of incorrect indices
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;''
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-3:-2] # you get something because of correct indices!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'m'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-3] # this is the same as 'amir'[-3:-2] 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'m'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir'[-3:] # This outputs the three last letters of the string
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'mir'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amirShahmoradi'[:-3] # This outputs the letters of the string from the beginning up to the fourth letter from the end.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'amirShahmor'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amirShahmoradi'[::-1] # This outputs ALL the letters in the string in reverse, from the end to the beginning.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'idaromhahSrima'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amirShahmoradi'[::-2] # This outputs every other letter in the string in reverse, from the end to the beginning.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'iaohhrm'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amirShahmoradi'[-3:].upper() # This outputs the third last letters of the string
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'ADI'
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE: List of string manipulation methods&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    To see the full list of powerfull string methods that can manipulate strings, like the above example, see &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#string-methods&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;NOTE: List of string manipulation methods&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        To see the full list of powerfull string methods that can manipulate strings, like the above example, see &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#string-methods&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;p&gt;&lt;a name=&quot;python-boolean-operations&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;boolean-operations-in-python&quot;&gt;Boolean operations in Python&lt;/h4&gt;
&lt;p&gt;As we mentioned before, Boolean types are a subclass of Integers. Boolean operations are essential in branching statements.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;True or False # This is OR logical operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;True and False # This is AND logical operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;not True # This is not logical operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' is 'amir' # object identity comparison
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' is not 'Jake!' # negated object identity
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, to the above operations, there also other more complex Boolean operations in Python, some of which you can study further &lt;a href=&quot;https://docs.python.org/2/library/stdtypes.html#bitwise-operations-on-integer-types&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE: Object's identity in Python&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    To get the  identity of an object, use Python's &lt;code&gt;id()&lt;/code&gt; command. &lt;code&gt;id()&lt;/code&gt; is a built-in function in Python 3, which returns the identity of an object. This identity is a unique integer for that object during its lifetime. This unique id is also the address of the object in the device memory. Keep in mind that the object's id might change from one computer to another, from one run to another run.  
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;NOTE: Object's identity in Python&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        To get the  identity of an object, use Python's &lt;code&gt;id()&lt;/code&gt; command. &lt;code&gt;id()&lt;/code&gt; is a built-in function in Python 3, which returns the identity of an object. This identity is a unique integer for that object during its lifetime. This unique id is also the address of the object in the device memory. Keep in mind that the object's id might change from one computer to another, from one run to another run.  
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;id('amir')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;81758280
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;id(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;501744144
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;id(2) == id(3) # equality operation: tests for the same value
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;id(2) != id(3) # inequality operation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
    &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Be very careful with operations &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;equality&lt;/code&gt; ! These two are not the same! See the examples below.
&lt;/blockquote&gt;

&lt;!--
&lt;div class=&quot;center&quot;&gt;
    &lt;div class=&quot;rcbox&quot; style=&quot;text-align:center&quot;&gt;
        &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br&gt;&lt;br&gt;
        Be very careful with operations `is` and `equality` ! These two are not the same! See the examples below.
    &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
--&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1,1) is (1,1) # Two similar tuples have not the same identifiers in Python! Will soon see what tuples are.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1,1) == (1,1) # Two similar tuples have the same value in Python!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-boolean-operations-string-comparison&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;string-comparison&quot;&gt;String comparison&lt;/h5&gt;
&lt;p&gt;Strings are compared lexicographically using the numeric equivalents in ASCII codes (the result of the built-in Python function &lt;code&gt;ord()&lt;/code&gt; of their characters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' &amp;gt; 'jake' # String comparison. Basically, the character ASCII codes are compared here.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' &amp;gt; 'Jake' # 'J' is ahead of 'a' in ASCII characters.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' &amp;gt; 'Amir' # 'A' is ahead of (smaller than) 'a' in ASCII characters.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'amir' &amp;gt; 'amis' # Comparison is performed is equality for each character holds, until the end is reached.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-values-types-print&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;pythons-print-function&quot;&gt;Python’s print function&lt;/h3&gt;
&lt;p&gt;We have already used print function to create the first Python program. But note also the difference in &lt;code&gt;print&lt;/code&gt; between the two Python versions. In &lt;strong&gt;Python 3&lt;/strong&gt;, &lt;code&gt;print&lt;/code&gt; is a &lt;strong&gt;Python function&lt;/strong&gt;, whereas in &lt;strong&gt;Python 2&lt;/strong&gt;, it is a &lt;strong&gt;Python statement&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('My name is Amir')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My name is Amir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can use wildcards in Python strings. You can also use double quotes for strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print(&quot;My name is Amir&quot;,'\n') # You can use wildcards in Python strings. You can also use double quotes for strings.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My name is Amir 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('My name is Amir','\n'*2,&quot;I do work at \&quot;UT Austin\&quot;.&quot;) 
print('''
You can multiply strings by integer! \n
Note how I used wildcards for quotation marks around &quot;UT Austin&quot; in my previous print function, in order to be consistent with Python syntax.

Did you also notice how I am creating a multi-line Python string right now?!
''')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My name is Amir 

 I do work at &quot;UT Austin&quot;.

You can multiply strings by integer! 

Note how I used wildcards for quotation marks around &quot;UT Austin&quot; in my previous print function, in order to be consistent with Python syntax.

Did you also notice how I am creating a multi-line Python string right now?!
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;
This is also a multi-line
comment in
Python
&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'\nThis is also a multi-line\ncomment in\nPython\n'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;'''
You can use single quotes
for multi-line commenting as well.
Always be as expressive as possible with your comments in your code.
It does not harm!
'''
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;'\nYou can use single quotes\nfor multi-line commenting as well.\nAlways be as expressive as possible with your comments in your code.\nIt does not harm!\n'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the following section, you will learn much more about the &lt;code&gt;print&lt;/code&gt; function, especially when dealing with variables.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;python-variables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;variables-in-python&quot;&gt;Variables in Python&lt;/h3&gt;
&lt;p&gt;Python has 6 main variable types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tuple&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dictionary&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will get to each of these soon. The variable naming convention in Python is that each variable starts with a letter and can contain only letters, numbers or underscore “_”.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;var1 = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print('value of var1 is ',var1,'.')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;value of var1 is 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a_long_variable_name = 2.5 # The variable name can be almost as long as you wish
print(a_long_variable_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&quot;python-variables-naming-convention&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;variable-naming-convention-in-python&quot;&gt;Variable naming convention in Python&lt;/h4&gt;
&lt;p&gt;A Python variable can only begin with a letter or underscore _. Numbers are only valid if they appear inside or at the end of the variable name. Other symbols are syntactically invalid anywhere in a variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;123new_var = 2.5 # This is an invalid name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-10-0e3e63931842&amp;gt;&quot;, line 1
    123new_var = 2.5 # This is an invalid name
             ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;new_var$ = 2.5 # symbols are not valid in Python variable names
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-12-71f3fbc68938&amp;gt;&quot;, line 1
    new_var$ = 2.5 # symbols are not valid in Python variable names
           ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;amir = &quot;teacher&quot;
print('Amir is a', amir)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Amir is a teacher
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;123amir = &quot;teacher&quot; # Wrong name for variable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &quot;&amp;lt;ipython-input-38-85ed673cd303&amp;gt;&quot;, line 1
    123amir = &quot;teacher&quot;
          ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;life_expectancy = 120; print( &quot;The life expectancy for the millennials is projected to be %d years! (But don't believe it...)&quot; % (life_expectancy) );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The life expectancy for the millennials is projected to be 120 years! (But don't believe it...)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Now lets do a Physics calculation.
v0 = 5; # initial velocity for a projectile motion.
g = 9.81 # Earth gravity acceleration.
t = 0.6
y = v0*t - 0.5*g*t**2
print('''
At t = %f seconds, a ball with initial velocity v0 = %.3E m/s is located at the height %.2f m.
''' % (t,v0,y) )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;At t = 0.600000 seconds, a ball with initial velocity v0 = 5.000E+00 m/s is located at the height 1.23 m.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# or on multi-line:
print('''
At t = %f seconds,
a ball with initial velocity v0 = %.3E m/s
is located at the height %.2f m.
100%% accurate!
''' % (t,v0,y) )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;At t = 0.600000 seconds,
a ball with initial velocity v0 = 5.000E+00 m/s
is located at the height 1.23 m.
100% accurate!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some &lt;code&gt;printf&lt;/code&gt; format specifications, that can be used with &lt;code&gt;print&lt;/code&gt; function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;%s   for string&lt;/li&gt;
  &lt;li&gt;%d   for integer&lt;/li&gt;
  &lt;li&gt;%0xd for integer padded with x zeros&lt;/li&gt;
  &lt;li&gt;%f   for decimal notation with 6 decimals&lt;/li&gt;
  &lt;li&gt;%e   for scientific notation&lt;/li&gt;
  &lt;li&gt;%E   for scientific notation&lt;/li&gt;
  &lt;li&gt;%%   percentage sign itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also a more recent, recommended way of determining the string format in Python, using &lt;code&gt;.format()&lt;/code&gt; method, about which you find some more useful information &lt;a href=&quot;https://pyformat.info/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/4-python-values-variables-types&quot;&gt;Lecture 4: Python - values, variables, and types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 4: MATLAB - values, variables, and types]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/lecture/4-matlab-values-variables-types"/>
  <id>http:/MAPCP2019U/lecture/4-matlab-values-variables-types</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at teaching you the “how to” of programming, the difference between programming languages and the natural languages, the type of programming errors and the meaning code debugging how to perform simple arithmetic operations on the MATLAB command line.&lt;/p&gt;

&lt;p&gt;For general information on MATLAB Data Types, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-types_data-types.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h2&gt;

&lt;p&gt;The following table contains some technical programming phrases that are often used and heard in the field of computer science and programming, that you need to be familiar as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture. The boldface words in the description column indicate items that are expressions with their own description in this table.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A general method for solving a class of problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;bug&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error in &lt;b&gt;program&lt;/b&gt; that has to be resolved for successful execution of the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiled language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose programs need to be compiled by a &lt;b&gt;compiler&lt;/b&gt; in order to run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiler&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A software that translates an entire high-level program into a lower-level language to make it &lt;b&gt;executable&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;debugging&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of finding and removing any type of error in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;exception&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An alternative name for &lt;b&gt;runtime error&lt;/b&gt; in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;executable&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An &lt;b&gt;object code&lt;/b&gt;, ready to be executed. Generally has the file extension &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.out&lt;/code&gt; or no extension at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;formal language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that is intentionally designed for specific purposes, which, unlike &lt;b&gt;natural languages&lt;/b&gt;, follows a strict standard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;high-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language (e.g., MATLAB, Python, Fortran, Java, etc) that has high level of abstraction from the underlying hardware.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;interpreted language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose statements are interpreted line-by-line by an &lt;b&gt;interpreter&lt;/b&gt; and immediately executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;low-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language that has a low-level of abstraction from computer hardware and architecture, such as Assembly. Very close to machine code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;natural language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that evolves naturally, and has looser &lt;b&gt;syntax&lt;/b&gt; rules and standard compared to &lt;b&gt;formal languages&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;object code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The output of a compiler after translating a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;parsing&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;Reading and examining a file/program and analyzing the syntactic structure of the file/program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;portability&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program's ability to be executable on more than one kind of computer architecture, without changing the code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;problem solving&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of formulating a problem and finding and expressing a solution to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;program&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A set of instructions in a that together specify an algorithm a computation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;runtime error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error that does not arise and cause the program to stop, until the program has started to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;script&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in an &lt;b&gt;interpreted language&lt;/b&gt; stored in a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantic error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in a program that makes the program do something other than what was intended. Catching these errors can be very tricky.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantics&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The meaning of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;source code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in a high-level compiled language, before being compiled by the &lt;b&gt;compiler&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in program that violates the standard &lt;b&gt;syntax&lt;/b&gt; of the programming language, and hence, the program cannot be interpreted or compiled until the syntax error is resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The structure of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;token&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;One of the basic elements of the syntactic structure of a program, in analogy with &lt;i&gt;word&lt;/i&gt; in a &lt;b&gt;natural language&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;the-content-of-a-computer-program&quot;&gt;The content of a computer program&lt;/h2&gt;

&lt;p&gt;Although different programming languages look different in their syntax standards, virtually all programming languages are comprised of the following major components (instructions):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;br /&gt;
  Virtually every program starts with some input data by the user, or the input data that is &lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_coding&quot; target=&quot;_blank&quot;&gt;hard-coded&lt;/a&gt; in the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mathematical/logical operations&lt;/strong&gt;&lt;br /&gt;
  Virtually all programs involve some sort of mathematical or logical operations on the input data to the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;conditional execution&lt;/strong&gt;&lt;br /&gt;
  In order to perform the above operations on data, most often (but not always) there is a need to check if some conditions are met in the program, and then perform specific programming instructions corresponding to each of the conditions.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;repetition / looping&lt;/strong&gt;&lt;br /&gt;
  Frequently it is needed to perform a specific set of operations repeatedly in the program to achieve the program’s goal.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;br /&gt;
  At the end of the program, it is always needed to output the program result, either to a computer screen or to a file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;debugging-a-program&quot;&gt;Debugging a program&lt;/h2&gt;

&lt;p&gt;As it is obvious from its name, a &lt;strong&gt;bug&lt;/strong&gt; in a computer program is annoying programming error that needs fixing in order for the program to become executable &lt;strong&gt;or&lt;/strong&gt; to give out the correct answer. The process of removing program bugs is called debugging. There are basically three types of programming bugs (errors):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;syntax error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
A program, whether interpreted or compiled, can be successfully run only if it is &lt;em&gt;syntactically correct&lt;/em&gt;. Syntax errors are related to the structure and standard of the language, and the order by which the language &lt;strong&gt;tokens&lt;/strong&gt; are allowed to appear in the code. For example, when you write your first MATLAB &lt;strong&gt;Hello World&lt;/strong&gt; script, you would write,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp('Hello World!')
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp 'Hello World!';
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
However, if you type a wrong statement, MATLAB will give you a syntax error, like the following,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp(*Hello World!*)
 disp(*Hello World!*)
   ↑
Error: Unexpected MATLAB operator.
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;runtime error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
Runtime errors or sometimes also named &lt;strong&gt;exceptions&lt;/strong&gt; are a class of programming errors that can be detected only at the time of running the code, that is, they are not syntax errors. Examples include:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;memory leaks (very common error in beginner C and C++ codes)&lt;/li&gt;
      &lt;li&gt;uninitialized memory&lt;/li&gt;
      &lt;li&gt;access request to an illegal memory address of the computer&lt;/li&gt;
      &lt;li&gt;security attack vulnerabilities&lt;/li&gt;
      &lt;li&gt;buffer overflow
&lt;br /&gt;
These errors can be sometimes tricky to identify.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;semantic error&lt;/strong&gt;
&lt;br /&gt;
Unlike syntax errors that comprise of something the compiler/interpreter does not understand, semantic errors do not cause any compiler/interpreter error messages. However, the resulting compiled/interpreted code will NOT do what it is intended to do. Semantic errors are the most dangerous types of programming errors, as they do not raise any error flag by the compiler/interpreter, yet the program will not do what it is intended to do, although the code may look perfectly fine on its face. A semantic error is almost synonymous with &lt;strong&gt;logical error&lt;/strong&gt;. Dividing two integers using the regular division operator &lt;code&gt;/&lt;/code&gt; in MATLAB while expecting the result to be an integer, would be a semantic error. This is because in MATLAB (unlike Fortran, for example), the regular division operator always outputs the result as real (float).&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2/7

ans =

    0.2857

&amp;gt;&amp;gt; class(ans)

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;methods-of-running-a-matlab-program&quot;&gt;Methods of running a MATLAB program&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Writing MATLAB script on the MATLAB interpreter’s command prompt:&lt;/strong&gt;&lt;br /&gt;
Now, as you may have noticed, in the above example, I used the MATLAB command line to code my first simple MATLAB script. This is one of the simplest and quickest methods of MATLAB scripting and is actually very useful for testing small simple MATLAB ideas and code snippets on-the-fly.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running MATLAB code written in a MATLAB &lt;code&gt;.m&lt;/code&gt; file from MATLAB command prompt:&lt;/strong&gt;&lt;br /&gt;
As the program size grows, it wiser to put all of your MATLAB scripts into a single &lt;code&gt;.m&lt;/code&gt; file, and then let the MATLAB interpreter run (i.e., interpret) your entire file all at once. To save the above simple “Hello World” MATLAB code in a file and run it, open a new m-file in MATLAB editor, then paste the code in the file and save it in MATLAB’s current working directory as &lt;code&gt;hello.m&lt;/code&gt;. Then you can either call your program on the command line like the following,
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; hello
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
or, simply press &lt;code&gt;F5&lt;/code&gt; button on your keyboard to run it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running your MATLAB script file from the Bash/cmd command line&lt;/strong&gt;: You can also run your codes directly from the Windows cmd or Linux Bash command lines by simply calling MATLAB, followed by a list of optional flags, followed by the name and path to your MATLAB script. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;matlab -nodisplay -nodesktop -r &quot;run /home/amir/matlab/hello.m&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running MATLAB code as a standalone application by compiling it&lt;/strong&gt;: You can also compile your MATLAB script into a binary file (machine language), which is then standalone and executable independently of MATLAB. This is however out of the scope of our course, but you can read more about it &lt;a href=&quot;https://www.mathworks.com/videos/getting-started-standalone-applications-using-matlab-compiler-100088.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;matlab-interpreter-as-a-simple-calculator&quot;&gt;MATLAB interpreter as a simple calculator&lt;/h2&gt;

&lt;p&gt;One of the greatest advantages of MATLAB is that it can be used as a simple calculator and program interpreter on-the-fly, just like Python, Mathematica, R, and other scripting languages. In the following, you will see why and how.&lt;/p&gt;

&lt;h3 id=&quot;values-and-their-types-in-matlab&quot;&gt;Values and their types in MATLAB&lt;/h3&gt;

&lt;p&gt;Values are one of the most fundamental entities in programming. Like any other language, a value in MATLAB can be of  different types, most importantly &lt;strong&gt;Numeric&lt;/strong&gt; (plain integer, long integer, float (real number), complex), &lt;strong&gt;Boolean&lt;/strong&gt; (logical) which is a subtype of Numeric, or &lt;strong&gt;char&lt;/strong&gt; (string), and many more. Each value type in MATLAB is a class. We will get to what classes are, at the end of the semester. For now, all you need to know is that there 6 main data types (in addition to &lt;a href=&quot;https://www.mathworks.com/help/matlab/function-handles.html&quot; target=&quot;_blank&quot;&gt;function handles&lt;/a&gt;).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/4/fundamental_classes.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Main MATLAB value types (classes).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;numeric-and-logical-values-in-matlab&quot;&gt;Numeric and logical values in MATLAB&lt;/h4&gt;

&lt;p&gt;The following are a few example arithmetic operations with values in MATLAB. You can perform very simple arithmetic on the MATLAB command line, and the result immediately by pressing &lt;code&gt;enter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 + 5 % Just typing some comment on the MATLAB command line. Anything after % is a comment and will be ignored.

ans =

     7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 - 7 % difference

ans =

    -5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 * 7 % product

ans =

    14
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true % logical true value

ans =

     1

&amp;gt;&amp;gt; false % logical false value

ans =

     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;obtaining-the-type-ie-class-of-a-value&quot;&gt;Obtaining the type (i.e. class) of a value&lt;/h4&gt;

&lt;p&gt;You can use the MATLAB’s built-in function &lt;code&gt;class&lt;/code&gt; to get the type of a value in MATLAB (Of course, this is somewhat obvious and redundant for a value input as we already readily know the type of a value).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(2*7) % class function gives you the type of the input object to function &quot;class&quot;

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class('This is a MATLAB string (char)') % a char value in MATLAB

ans =

char
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(&quot;This is a MATLAB string&quot;) % Note that you cannot use quotation marks for representing string values.
 class(&quot;This is a MATLAB string&quot;) % Note that you cannot use quotation marks for representing string values.
       ↑
Error: The input character is not valid in MATLAB statements or expressions.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(1)

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(class(1))

ans =

char
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(true)

ans =

logical
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(false)

ans =

logical
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;vector-and-matrix-values&quot;&gt;vector and matrix values&lt;/h4&gt;

&lt;p&gt;Vectors and matrices are used to represent sets of values, all of which have the same type. A matrix can be visualized as a table of values. The dimensions of a matrix are $rows \times cols$, where $rows$ is the number of rows and $cols$ is the number of columns of the matrix. A &lt;strong&gt;vector&lt;/strong&gt; in MATLAB is equivalent to a one-dimensional array or matrix.&lt;/p&gt;

&lt;h5 id=&quot;creating-row-wise-and-column-wise-vectors&quot;&gt;Creating row-wise and column-wise vectors&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;,&lt;/code&gt; or space to separate the elements of a row-wise vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1 2 3 4] % a space-separated row vector

ans =

     1     2     3     4

&amp;gt;&amp;gt; class([1 2 3 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1, 2, 3, 4] % a comma-separated row vector

ans =

     1     2     3     4

&amp;gt;&amp;gt; class([1, 2, 3, 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;;&lt;/code&gt; to separate the elements of a column-wise vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1; 2; 3; 4] % a column vector

ans =

     1
     2
     3
     4

&amp;gt;&amp;gt; class([1; 2; 3; 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;creating-matrix-values&quot;&gt;Creating matrix values&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;;&lt;/code&gt; to separate a row of the matrix from the next.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1,2,3,4;5,6,7,8;9,10,11,12] % a 3 by 4 matrix

ans =

     1     2     3     4
     5     6     7     8
     9    10    11    12
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;cells-and-tables&quot;&gt;Cells and tables&lt;/h4&gt;

&lt;p&gt;Matrices and vectors can only store numbers in MATLAB. If one needs a more general array representation for a list of strings for example, then one has to use cells or tables.&lt;/p&gt;

&lt;h5 id=&quot;cell-array-values&quot;&gt;Cell array values&lt;/h5&gt;

&lt;p&gt;Cell arrays are array entities that can contain data of varying types and sizes. A &lt;strong&gt;cell array&lt;/strong&gt; is a data type with indexed data containers called &lt;strong&gt;cells&lt;/strong&gt;, where each cell can contain any type of data. Cell arrays commonly contain either a list of text strings, combinations of text and numbers, or numeric arrays of different sizes. Refer to sets of cells by enclosing indices in smooth parentheses, &lt;code&gt;()&lt;/code&gt;. Access the contents of cells by indexing with curly braces, &lt;code&gt;{}&lt;/code&gt;. Also, to define a cell, use &lt;code&gt;{}&lt;/code&gt; like the following notation,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; {'Hi', ' ', 'World!'} % a cell array of strings

ans = 

    'Hi'    ' '    'World!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class({'Hi', ' ', 'World!'})

ans =

cell
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; {'Hi', 1, true, 'World!'}

ans = 

    'Hi'    [1]    [1]    'World!'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;table-values&quot;&gt;Table values&lt;/h5&gt;

&lt;p&gt;MATLAB tables are arrays in a tabular form whose named columns can have different types. MATLAB’s &lt;strong&gt;Table&lt;/strong&gt; is a data type suitable for column-oriented or tabular data that is often stored as columns in a text file or in a spreadsheet. Tables consist of rows and column-oriented variables. Each variable in a table can have a different data type and a different size with the one restriction that each variable must have the same number of rows.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/4/table.png&quot; width=&quot;500&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        An example MATLAB table.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Later on, we learn more about Tables and Cells in MATLAB, once we introduce MATLAB variables.&lt;/p&gt;

&lt;h4 id=&quot;value-coercion-in-matlab&quot;&gt;Value coercion in MATLAB&lt;/h4&gt;

&lt;p&gt;Value coercion is the &lt;strong&gt;implicit&lt;/strong&gt; process by which the MATLAB interpreter/compiler automatically converts a value of one type into a value of another type when that second type is required by the surrounding context. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(int32(1.0)) % int32 gives a 32-bit (4-byte) integer.
ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(2.0) * int32(1.0) % Note that the product of two integers, is integer.

ans =

           2

&amp;gt;&amp;gt; class(ans)

ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(1.0) * 2.5 % Note that the product of float and integer is coerced into an integer!

ans =

           3

&amp;gt;&amp;gt; class(ans)

ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(1.0) / 2.5 % Note that the division of float and integer, is coerced into an integer.

ans =

           0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2.0 / 7 % floating point division with float result

ans =

    0.2857
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + 1 % logical and double are coerced into double

ans =

     2

&amp;gt;&amp;gt; class(true + 1)

ans =

double
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;But note that,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + int32(1) % you cannot combine logical with integer
Error using  + 
Integers can only be combined with integers of the same class, or scalar doubles.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + false

ans =

     1

&amp;gt;&amp;gt; true * false

ans =

     0

&amp;gt;&amp;gt; true / false
Undefined operator '/' for input arguments of type 'logical'.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    As you saw above, unlike other languages, such as Python, integer value has precedence over float, that is, the result of the calculation is coerced into an integer.
&lt;/blockquote&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    I recommend you to always explicitly write the type of each value in your calculations or your MATLAB scripts. For example, denote all floats by adding a decimal point &lt;code&gt;.&lt;/code&gt; to each float (real) value.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;some-further-useful-matlab-commands&quot;&gt;Some further useful MATLAB commands&lt;/h4&gt;

&lt;p&gt;MATLAB has a built-in function called &lt;code&gt;format&lt;/code&gt; that can modify the output style of MATLAB on the command line. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2/5

ans =

    0.4000

&amp;gt;&amp;gt; format long
&amp;gt;&amp;gt; 2/5

ans =

   0.400000000000000

&amp;gt;&amp;gt; format short
&amp;gt;&amp;gt; 2/5

ans =

    0.4000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; format compact
&amp;gt;&amp;gt; 2/5
ans =
    0.4000
&amp;gt;&amp;gt; format loose
&amp;gt;&amp;gt; 2/5

ans =

    0.4000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here is a complete list of options that format can take,&lt;/p&gt;
&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 2. A list of MATLAB &lt;code&gt;format&lt;/code&gt; options.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Style&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Result&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Example&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;short (default)&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short, fixed-decimal format with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.1416&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;long&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long, fixed-decimal format with 15 digits after the decimal point for double values, and 7 digits after the decimal point for single values.&lt;/td&gt;&lt;td&gt;3.141592654&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortE&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short scientific notation with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longE&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long scientific notation with 15 digits after the decimal point for double values, and 7 digits after the decimal point for single values.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortG&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short, fixed-decimal format or scientific notation, whichever is more compact, with a total of 5 digits.&lt;/td&gt;&lt;td&gt;3.1416&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longG&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long, fixed-decimal format or scientific notation, whichever is more compact, with a total of 15 digits for double values, and 7 digits for singlevalues.&lt;/td&gt;&lt;td&gt;3.141592654&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortEng&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short engineering notation (exponent is a multiple of 3) with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longEng&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long engineering notation (exponent is a multiple of 3) with 15 significant digits.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;+&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Positive/Negative format with +, -, and blank characters displayed for positive, negative, and zero elements.&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;bank&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Currency format with 2 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Hexadecimal representation of a binary double-precision number.&lt;/td&gt;&lt;td&gt;400921fb54442d18&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;rat&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Ratio of small integers.&lt;/td&gt;&lt;td&gt;355/113&lt;/td&gt;&lt;/tr&gt;


&lt;br /&gt;&lt;br /&gt;


## Variables in MATLAB

A variable is simply a name that we assign to a specific value, in order to avoid repeating the same value frequently in the code, thus writing a cleaner, less error-prone script/code. We discussed above the main value types (classes) in MATLAB. The same also holds for variables, because they are simply names assigned to each value or a set of values. In order to define a variable, the variable name must always appear on the left of equality, like the following,

```matlab
&amp;gt;&amp;gt; format compact
&amp;gt;&amp;gt; a = 1 % assign value 1 to a
a =
     1
&amp;gt;&amp;gt; class(a)
ans =
double
&amp;gt;&amp;gt; 1 = b % this is wrong
 1 = b
   ↑
Error: The expression to the left of the equals sign is not a valid target for an assignment.
```

We will get to each of these below. But before that, here are some official and unofficial tips on the variable naming conventions in MATLAB.

### Variable naming convention in MATLAB

A MATLAB variable can only begin with a letter followed by underscore `_` and numbers inside or at the end of the variable name. MATLAB is case sensitive, so `A` and `a` are not the same variable. Other symbols are syntactically invalid anywhere in a variable name. Examples of valid names:
  - `x6`
  - `lastValue`
  - `n_factorial`

Invalid names:
  - `6x`
  - `n!`
  - `end` (see below for the reason)

```matlab
&amp;gt;&amp;gt; new_var$
 new_var$
        ↑
Error: The input character is not valid in MATLAB statements or expressions.
```
    
```matlab
&amp;gt;&amp;gt; amir = 'teacher';
disp(['Amir is a', amir])
Amir is ateacher
```
    
```matlab
&amp;gt;&amp;gt; life_expectancy = 120; disp( ['The life expectancy for the millennials is projected to be ',life_expectancy,' years! (But don''t believe it...)'] )
The life expectancy for the millennials is projected to be x years! (But don't believe it...)
```
&lt;br /&gt;


#### MATLAB reserved names (keywords)  
There are some limitation as to what names you can choose for your variables, even if they completely obey MATLAB syntax standard. Variable names in MATLAB cannot be the same as **MATLAB keywords**, which are simply names that reserved for a specific purpose in MATLAB programming.  They are used to define the syntax and structure of the MATLAB language. Note that **MATLAB keywords are case-sensitive**.  You **cannot** define variables with the exact same names as **MATLAB keywords**, such as `if` or `end`. For a complete list of MATLAB keyword, run the `iskeyword` command,

```matlab
&amp;gt;&amp;gt; iskeyword
ans = 
    'break'
    'case'
    'catch'
    'classdef'
    'continue'
    'else'
    'elseif'
    'end'
    'for'
    'function'
    'global'
    'if'
    'otherwise'
    'parfor'
    'persistent'
    'return'
    'spmd'
    'switch'
    'try'
    'while'
```
&lt;br /&gt;

#### Predefined variables in MATLAB

Note that there are some predefined variables in MATLAB, that are not considered as keywords. Therefore you can change their values and use them for your own purposes. But, **be very careful with predefined variables and in general**, it is better to not mess with them, as they can lead to confusion and catastrophe. For example,

```matlab
&amp;gt;&amp;gt; true % true is a predefined MATLAB logical variable
ans =
     1
&amp;gt;&amp;gt; class(true)
ans =
logical
&amp;gt;&amp;gt; true = 0 % but I have redefined it as double
true =
     0
&amp;gt;&amp;gt; class(true)
&amp;gt;&amp;gt; nan
ans =
   NaN
&amp;gt;&amp;gt; class(nan)
ans =
double
&amp;gt;&amp;gt; nan = true
nan =
     0
&amp;gt;&amp;gt; nan = false % redefine nan
nan =
     0
&amp;gt;&amp;gt; class(nan)
ans =
logical
```

```matlab
&amp;gt;&amp;gt; who

Your variables are:

life_expectancy  nan              true             

&amp;gt;&amp;gt; whos
  Name                 Size            Bytes  Class      Attributes

  life_expectancy      1x1                 8  double               
  nan                  1x1                 1  logical              
  true                 1x1                 8  double               

&amp;gt;&amp;gt; clear nan
&amp;gt;&amp;gt; who

Your variables are:

life_expectancy  true             

&amp;gt;&amp;gt; clear all
&amp;gt;&amp;gt; whos
&amp;gt;&amp;gt; who
&amp;gt;&amp;gt; pi
ans =
    3.1416
&amp;gt;&amp;gt; nan
ans =
   NaN
&amp;gt;&amp;gt; inf
ans =
   Inf
&amp;gt;&amp;gt; i
ans =
   0.0000 + 1.0000i
&amp;gt;&amp;gt; j
ans =
   0.0000 + 1.0000i
```
&lt;br /&gt;
Here is a list of some of the most important predefined variables in MATLAB.

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. A list of predefined values and variables in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;pi   &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;The number $\pi$ up to 15 significant digits.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;i, j &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;The complex number $\sqrt{-1}$.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;inf  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Represents the mathematical Infinity concept, for example, a result of division by zero.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;NaN  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Stands for Not-A-Number. Represents the result of a meaningless mathematical function, like $0/0$.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;clock&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Contains the current date and time in the form of a 6-element row vector: year,month,day,hour,minute,second.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;date &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Contains a string representing today's date.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;eps  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Stands for &lt;b&gt;epsilon&lt;/b&gt;. It represents the smallest number that can be represented by your MATLAB software.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;ans  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A special variable that MATLAB uses to store the result of MATLAB's command line.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;




### Numeric variables  

We have already extensively discussed number values in the previous lecture. Basically, everything that we have said about number values, holds also for variables of type number.  

### Vector and matrix variables  

Again, similar to vector and matrix values, everything holds for the same type variables.

```matlab
&amp;gt;&amp;gt; a = [1,2,3,4]
a =
     1     2     3     4
&amp;gt;&amp;gt; class(a)
ans =
double
&amp;gt;&amp;gt; a = [1;2;3;4]
a =
     1
     2
     3
     4
```
&lt;br /&gt;

#### The colon operator `:`

MATLAB has a special character shortcut notation for occasions when you want to create a numeric vector of a specific range with a predefined fixed spacing between the values of the vector. This shortcut has the following form,

```bash
begin:increment:end
```
&lt;br /&gt;

For example,
```matlab
&amp;gt;&amp;gt; x = 0:10:100
x =
     0    10    20    30    40    50    60    70    80    90   100
```
&lt;br /&gt;

#### The transpose operator `'`

Now as you may have noticed, MATLAB by default creates row-wise vectors, just as `x` was generated above. If you want to initialize `x` as a column-wise vector, all you need to do is to add the transpose operator `'` at the end of the vector or the variable name (but now, you would also need the vector constructor `[]`),

```matlab
&amp;gt;&amp;gt; x = [0:10:100]'
x =
     0
    10
    20
    30
    40
    50
    60
    70
    80
    90
   100
&amp;gt;&amp;gt; whos x
  Name       Size            Bytes  Class     Attributes

  x         11x1                88  double
```
&lt;br /&gt;
Now, pay attention to the size of the vector `x`. What does it mean when it says `88 Bytes`?


#### Creating matrices

There are a number of functions in MATLAB that can help you build predefined matrices or vectors.

##### zeros

Creates array of all zeros (with optionally given [fixed-point](https://en.wikipedia.org/wiki/Fixed-point_arithmetic){:target=&quot;_blank&quot;} properties. For more information, see [MATLAB's manual](https://www.mathworks.com/help/fixedpoint/ref/zeros.html#inputarg_p){:target=&quot;_blank&quot;}.

```matlab
&amp;gt;&amp;gt; zeros(2,2)
ans =
     0     0
     0     0
```

```matlab
&amp;gt;&amp;gt; a = zeros(1,3)
a =
     0     0     0
```

##### ones

Creates an array of all ones with fixed-point properties.

```matlab
&amp;gt;&amp;gt; a = ones(1,3)
a =
     1     1     1
```

##### eye

Creates an identity matrix with fixed-point properties

```matlab
&amp;gt;&amp;gt; I = eye(3,3)
I =
     1     0     0
     0     1     0
     0     0     1
&amp;gt;&amp;gt; I = eye(3,4)
I =
     1     0     0     0
     0     1     0     0
     0     0     1     0
```

##### diag

Creates a diagonal matrix from a given input vector,

```matlab
v = [2 1 -1 -2 -5];
&amp;gt;&amp;gt; D = diag(v)
D =
     2     0     0     0     0
     0     1     0     0     0
     0     0    -1     0     0
     0     0     0    -2     0
     0     0     0     0    -5
&amp;gt;&amp;gt; D = diag(v,2)
D =
     0     0     2     0     0     0     0
     0     0     0     1     0     0     0
     0     0     0     0    -1     0     0
     0     0     0     0     0    -2     0
     0     0     0     0     0     0    -5
     0     0     0     0     0     0     0
     0     0     0     0     0     0     0
&amp;gt;&amp;gt; D = diag(v,-2)
D =
     0     0     0     0     0     0     0
     0     0     0     0     0     0     0
     2     0     0     0     0     0     0
     0     1     0     0     0     0     0
     0     0    -1     0     0     0     0
     0     0     0    -2     0     0     0
     0     0     0     0    -5     0     0
```
&lt;br /&gt;
`diag` can also get diagonal elements of an input matrix, if it already exists.

```matlab
&amp;gt;&amp;gt; a = eye(3,5)
a =
     1     0     0     0     0
     0     1     0     0     0
     0     0     1     0     0
&amp;gt;&amp;gt; diag(a)
ans =
     1
     1
     1
&amp;gt;&amp;gt; diag(a,-1)
ans =
     0
     0
&amp;gt;&amp;gt; diag(a,1)
ans =
     0
     0
     0
```

##### ndgrid

Creates rectangular grid in N-D space.

```matlab
&amp;gt;&amp;gt; [X,Y] = ndgrid(1:2:19,2:2:12)
X =
     1     1     1     1     1     1
     3     3     3     3     3     3
     5     5     5     5     5     5
     7     7     7     7     7     7
     9     9     9     9     9     9
    11    11    11    11    11    11
    13    13    13    13    13    13
    15    15    15    15    15    15
    17    17    17    17    17    17
    19    19    19    19    19    19
Y =
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
```
&lt;br /&gt;
Later on, we will see how this function can be used to generate fancy looking graphs like the following,
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/5/2dgrid.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

#### Matrix concatenation functions

The following functions combine existing matrices to form a new matrix.
  - **cat**: Concatenate matrices along the specified dimension
  - **horzcat**: Horizontally concatenate matrices
  - **vertcat**: Vertically concatenate matrices
  - **repmat**: Create a new matrix by replicating and tiling existing matrices
  - **blkdiag**: Create a block diagonal matrix from existing matrices


### Cell variables

When we want to define a variable whose elements are not all of the same types, we need an entity that goes beyond the capabilities of matrices, which can only contain numeric values. Just as with cell values in the previous lecture, a cell array is a data type with indexed data containers called cells. Each cell can contain any type of data. Cell arrays commonly contain **pieces of text (string)**, **combinations of text and numbers** from spreadsheets or text files, or they can contain arrays of numeric arrays of different sizes.

There are two ways to refer to the elements of a cell array. Enclose indices in smooth parentheses, (), to refer to sets of cells — for example, to define a subset of the array. Enclose indices in curly braces, {}, to refer to the text, numbers, or other data within individual cells.

#### Creating cell arrays

```matlab
&amp;gt;&amp;gt; C = {} % empty cell array
C = 
     {}
&amp;gt;&amp;gt; class(C)
ans =
cell
&amp;gt;&amp;gt; size(C)
ans =
     0     0
&amp;gt;&amp;gt; length(C)
ans =
     0
```

```matlab
&amp;gt;&amp;gt; emptyCell = cell(3,4)
emptyCell = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
&amp;gt;&amp;gt; emptyCell = cell(3,4,2)
emptyCell(:,:,1) = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
emptyCell(:,:,2) = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
```

```matlab
&amp;gt;&amp;gt; a = {'Hi', ' ', 'World!'} % a cell array of strings
a = 
    'Hi'    ' '    'World!'
&amp;gt;&amp;gt; class(a)
ans =
cell
&amp;gt;&amp;gt; size(a) % the length of a, in all directions (dimension)
ans =
     1     3
&amp;gt;&amp;gt; length(a) % the length of a, along the longest dimension
ans =
     3
```
&lt;br /&gt;
To call a specific element, use `()`.
```matlab
&amp;gt;&amp;gt; names = {'Bloggs', 'San', 'Andersen'};
&amp;gt;&amp;gt; first_cell = names(1);
&amp;gt;&amp;gt; rest_of_cells = names(2:3);
&amp;gt;&amp;gt; third_string = names{3};
```
&lt;br /&gt;
You can see what the type of each element is by using `who` and `whos`,
```matlab
&amp;gt;&amp;gt; whos
  Name               Size            Bytes  Class     Attributes

  a                  1x3               354  cell                
  ans                1x1                 8  double              
  chr                1x12               24  char                
  first_cell         1x1               124  cell                
  names              1x3               370  cell                
  rest_of_cells      1x2               246  cell                
  third_string       1x8                16  char     
```  
&lt;br /&gt;
Note that `who` only gives you the names of the variables,
```matlab
&amp;gt;&amp;gt; who

Your variables are:

a              ans            chr            first_cell     names          rest_of_cells  third_string  
```

#### Cell array concatenation functions

There are a wide range of MATLAB functions that act on cells, which can be found [here](https://www.mathworks.com/help/matlab/cell-arrays.html){:target=&quot;_blank&quot;}.

### String (char) variables

Just as explained in the last lecture,

```matlab
&amp;gt;&amp;gt; newChr = 'You''re right'
newChr =
You're right
&amp;gt;&amp;gt; class(newChr)
ans =
char
```

#### Creating string arrays

Creating string arrays is rather complex and confusing in MATLAB. Here is [MATLAB's own manual for creating string arrays](https://www.mathworks.com/help/matlab/matlab_prog/creating-character-arrays.html){:target=&quot;_blank&quot;}. Note that a string is a vector by itself. So you can fetch its characters as elements,

```matlab
&amp;gt;&amp;gt; newChr = 'You''re right'
newChr =
You're right
&amp;gt;&amp;gt; newChr(1)
ans =
Y
&amp;gt;&amp;gt; newChr(1:4)
ans =
You'
```
&lt;br /&gt;

### Structure variables

Let's first review the meanings of Arrays and Cells:  

- An **array** is a MATLAB data type in which there is a name for the whole data object, and the individual elements in the array can be accessed only through their indices, which are integer numbers. For example,
```matlab
&amp;gt;&amp;gt; arr = [1,2,3,4]
arr =
     1     2     3     4
```
&lt;br /&gt;
But, notice that **all the elements in a MATLAB array must be of the same data type**. For example, you cannot combine numeric and string data types,
```matlab
&amp;gt;&amp;gt; arr = [1,'Amir',3,4]
arr =
Amir
```
&lt;br /&gt;
- By contrast, a **cell array** is a MATLAB data type in which again, there is a name for the whole data object, and the individual elements in the array can be accessed only via their indices, but unlike regular arrays **cell elements do not need to be all of the same type**,
```matlab
&amp;gt;&amp;gt; arr = {1,'Amir',3,4}
arr = 
    [1]    'Amir'    [3]    [4]
```
&lt;br /&gt;
- There is yet another data type in MATLAB called **structure**, which has also counterparts in most other programming languages such as Fortran, C, C++. This is the topic of this section below.  
&lt;br /&gt;

A **structure** is a MATLAB data type in which the whole object has a name, just like regular and cell arrays. However, unlike cells and regular arrays, the elements of a structure object can be accessed by their assigned **field names** instead of a numerical index, as in numeric arrays and cells.  

Like cell arrays, structures can contain data of varying types and sizes. A **structure** object is a MATLAB data type that groups related data using data containers called **fields** (instead of cells as in cell arrays). **Each field can contain any type of data**. You can access data in a structure using **dot notation** of the form `structName.fieldName`. Here is [MATLAB video](https://www.mathworks.com/videos/introducing-structures-and-cell-arrays-101508.html){:target=&quot;_blank&quot;} about cell and structure arrays.

#### Creating structures

To create a structure, you can use function `struct`,

```matlab
&amp;gt;&amp;gt; field = 'f';
value = {'some text';
         [10, 20, 30];
         magic(5)};
s = struct(field,value)
s = 
3x1 struct array with fields:
    f
```
&lt;br /&gt;
You can also create empty structure (which can be manipulated later),
```matlab
&amp;gt;&amp;gt; s = struct()
s = 
struct with no fields.
```
&lt;br /&gt;
One can also create structure objects by simply using the dot notation,
```matlab
&amp;gt;&amp;gt; amir.univ = 'UT Austin'
amir = 
    univ: 'UT Austin'
```
&lt;br /&gt;
Structure objects described above are examples of **scalar objects** meaning that there is only one single structure object with a set of fields. However, MATLAB also provides ways of creating **structure arrays**. You might think of structure array, as a cell array, whose columns are indexed by character names (field names) instead of integer indices, and whose rows represent the elements of the structure array. For example,  
```matlab
&amp;gt;&amp;gt; student.name = 'Marshall'
student = 
    name: 'Marshall'
&amp;gt;&amp;gt; student.grade = 4.0
student = 
     name: 'Marshall'
    grade: 4
&amp;gt;&amp;gt; student
student = 
     name: 'Marshall'
    grade: 4
```
&lt;br /&gt;
would create a scalar structure `student` with two fields. However, as soon as you add another name to this structure, using array notation like the following,
```matlab
&amp;gt;&amp;gt; student(2).name = 'Vivek'
student = 
1x2 struct array with fields:
    name
    grade
```
&lt;br /&gt;
the scalar structure `student` is automatically converted to a **structure array**, that has two rows indexed by integer numbers, and each row has two fields `name` and `grade`. Note that, even though we added only the `name` field for the second structure element, the other field name is also automatically created for the second structure element, although with no content (the content of the field `grade` for the second element of the structure is empty). There is even no need to add the elements in increasing order. For example,
```matlab
&amp;gt;&amp;gt; student(4).name = 'Travis'
student = 
1x4 struct array with fields:
    name
    grade
&amp;gt;&amp;gt; whos student
  Name         Size            Bytes  Class     Attributes

  student      1x4               654  struct          
```
&lt;br /&gt;
will automatically add (initialize) the third structure element, even though we did not ask for it.

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/5/structure.png&quot; width=&quot;600&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The content of the structure array &lt;code&gt;student&lt;/code&gt; in MATLAB workspace. Note that the rows correspond to the structure elements, and the columns correspond to the structure fields, which are the same for all structure elements. 
    &lt;/figcaption&gt;
&lt;/figure&gt;

So, if there is so much similarity between MATLAB **cell arrays** and **structure arrays**, then what the advantage of defining or using structure arrays instead of cell arrays? The main advantage is that, in the case of structures, the content of the structure element is identified by a set of tags (labels) called **field names**. This becomes very helpful in understanding the content of complex data when they are written as structures instead of cell arrays.  

There is a long list of functions that can manipulate structures. A list of them is available on MATLAB website [here](https://www.mathworks.com/help/matlab/structures.html){:target=&quot;_blank&quot;}.

### MATLAB tables

Tables are arrays in a tabular form whose named columns can have different types. A table is a data type suitable for column-oriented or tabular data that is often stored as columns in a text file or in a spreadsheet. Tables consist of rows and column-oriented variables. Each variable in a table can have a different data type and a different size **with the one restriction** that **each variable must have the same number of rows**. For more information, see [MATLAB's educational video on Tables](https://www.mathworks.com/videos/tables-and-categorical-arrays-in-release-2013b-101607.html){:target=&quot;_blank&quot;}.

To create a table, you can use the function `table`:

```matlab
&amp;gt;&amp;gt; LastName = {'Smith';'Johnson';'Williams';'Jones';'Brown'};
&amp;gt;&amp;gt; Age = [38;43;38;40;49];
&amp;gt;&amp;gt; Height = [71;69;64;67;64];
&amp;gt;&amp;gt; Weight = [176;163;131;133;119];
&amp;gt;&amp;gt; BloodPressure = [124 93; 109 77; 125 83; 117 75; 122 80];
&amp;gt;&amp;gt; T = table(Age,Height,Weight,BloodPressure,'RowNames',LastName)
T = 
                Age    Height    Weight    BloodPressure
                ___    ______    ______    _____________
    Smith       38     71        176       124     93   
    Johnson     43     69        163       109     77   
    Williams    38     64        131       125     83   
    Jones       40     67        133       117     75   
    Brown       49     64        119       122     80   
```

There is also a long list of functions that act on tables, a summary of which is available [here](https://www.mathworks.com/help/matlab/tables.html){:target=&quot;_blank&quot;}.

## The Different Kinds of Brackets: Recap

To recap, perhaps the two most two basic operations relating to arrays are,
  - Creating the array.
  - Accessing elements in the array.

Depending on whether we have a cell array or a standard array of a basic data type (e.g. char), we can distinguish the different behavior of each of the types of brackets: `[]`, `{}` and `()`.

### Creating an Array

- **Square brackets `[ ]`**: Creates an array where all entries have the same type, e.g. double or char. For example,  
```matlab
numArray = [5, 62.7, 3];
charArray = ['a', 'b', 'c'];
```
- **Curly brackets `{ }`**: Creates a cell array. Its cells can contain any type. They can contain items of the same type or a mixture of types. For example,
```matlab
sameTypeCells = {'Once', 'upon', 'a', 'time'}
diffTypeCells = {'Number', 17}
```
&lt;br /&gt;

Note that in order to create a vector, you don't necessarily need ',' between the elements. For example,  
```matlab
&amp;gt;&amp;gt; [1 4]
  ans =
     1     4
&amp;gt;&amp;gt; whos ans
  Name      Size            Bytes  Class     Attributes

  ans       1x2                16  double              

&amp;gt;&amp;gt; [1,4]
ans =
     1     4
&amp;gt;&amp;gt; whos ans
  Name      Size            Bytes  Class     Attributes

  ans       1x2                16  double              
```
&lt;br /&gt;
The same is also true for cell arrays,
```matlab
&amp;gt;&amp;gt; sameTypeCells = {'Once'  'upon'  'a'  'time'}
sameTypeCells = 
    'Once'    'upon'    'a'    'time'
&amp;gt;&amp;gt; whos sameTypeCells
  Name               Size            Bytes  Class    Attributes

  sameTypeCells      1x4               474  cell               
```
&lt;br /&gt;

### Accessing Elements

  - **Round brackets `( )`**: These can be used to access one or more elements from any type of array. The elements returned always have the same type as the array, i.e. for an array of doubles the round bracket will return doubles, for an array of cells they will return cells. For example, using the arrays created above:
  ```matlab
  &amp;gt;&amp;gt; numArray(2:3) % Second and third elements.
  ans =
     62.7000    3.0000
  ```
  ```matlab
  &amp;gt;&amp;gt; y = sameTypeCells([1, 3]) % first and third
  y = 
      'Once'    'a'
  ```
  - **Curly brackets `{ }`**: When used for accessing elements, curly brackets are specific to cell arrays. They can be used to obtain the content of a cell in its native data type, i.e. not in the form of a cell. For example,
  ```matlab
  &amp;gt;&amp;gt; sameTypeCells{2}
  ans =
      upon
  &amp;gt;&amp;gt; class(sameTypeCells{2})
  ans =
      char
  &amp;gt;&amp;gt; sameTypeCells(2)
  ans = 
      'upon'
  &amp;gt;&amp;gt; class(sameTypeCells(2))
  ans =
      cell
  ```

### Array slicing (indexing)

Like Fortran and R, MATLAB has powerful built-in array manipulation capabilities. For example,
```matlab
&amp;gt;&amp;gt; test = [ 1,2,3,4 ; 1,2,4,5 ; 3,5,6,7 ]
test =
     1     2     3     4
     1     2     4     5
     3     5     6     7
&amp;gt;&amp;gt; test(:,:)
ans =
     1     2     3     4
     1     2     4     5
     3     5     6     7
```
&lt;br /&gt;
The symbol `:` means all the elements. But, you could also specify a range to only get a slice of the array,
```matlab
&amp;gt;&amp;gt; test(1:2,2:3)
ans =
     2     3
     2     4
```
&lt;br /&gt;
Now, suppose you only wanted to get the first and the last column of the array, and the rows two and three. You could do,
```matlab
&amp;gt;&amp;gt; test(2:3,[1 4])
ans =
     1     5
     3     7
```
&lt;br /&gt;
Amazing, isn't it? You can also slice cell arrays in a similar way. However, note that you can only slice the elements of a cell array in this way, **not the contents of the elements of a cell array**. To explain this further, consider the following cell array,
```matlab
&amp;gt;&amp;gt; test = { 1,2,3,4 ; 1,2,4,5 ; 3,5,6,7 }
test = 
    [1]    [2]    [3]    [4]
    [1]    [2]    [4]    [5]
    [3]    [5]    [6]    [7]
```
&lt;br /&gt;
Now, note that slicing this cell, would give you a cell slice, not a matrix of the values, and note that to do this, you have to access the elements using `()` instead of `{}`.
```matlab
&amp;gt;&amp;gt; test(:,:)
ans = 
    [1]    [2]    [3]    [4]
    [1]    [2]    [4]    [5]
    [3]    [5]    [6]    [7]
&amp;gt;&amp;gt; test(2:3,[1 4])
ans = 
    [1]    [5]
    [3]    [7]
&amp;gt;&amp;gt; class(test(2:3,[1 4]))
ans =
cell
```
&lt;br /&gt;
If you try slicing the cell  array using `{}`, you won't get a slice anymore, but a MATLAB [comma-separated list](https://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html){:target=&quot;_blank&quot;},
```matlab
&amp;gt;&amp;gt; test{2:3,[1 4]}
ans =
     1
ans =
     3
ans =
     5
ans =
     7
&amp;gt;&amp;gt; class(test{2:3,[1 4]})
Error using class
The CLASS function must be called from a class constructor. 
```
&lt;br /&gt;
Since slicing the cell array by `{}` returns a comma-separated list, MATLAB's `class()` function gives an error, since it cannot take as input, a list of values.


&lt;br /&gt;&lt;br /&gt;
&lt;/tbody&gt;&lt;/table&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/4-matlab-values-variables-types&quot;&gt;Lecture 4: MATLAB - values, variables, and types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Problems - Variables, Values, and Types]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/homework/2-problems-variables-values-types"/>
  <id>http:/MAPCP2019U/homework/2-problems-variables-values-types</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: One week from the posting date @ 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience with values, variables, types, and assignments in programming.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Type the following in the command window and submit the results. Briefly explain what each assignment does.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = 1
b = 'x'
c = true
whos a b c
a == c
a + c
d = [1 2 3 4]
e = ['a' 'b' 'c' 'd']
f = ['a','b','c','d']
g = ['abcd']
h = {‘a’ ‘b’ ‘c’ ‘d’}
i = { a b c d}
whos d e f g h i
class(a)
type(a)
True
true
False
false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Integer_overflow&quot; target=&quot;blank&quot;&gt;Overflow&lt;/a&gt;.&lt;/strong&gt; What would happen if you go beyond the range for a particular type? For example, the largest integer that can be stored in &lt;strong&gt;int8&lt;/strong&gt; is 127, and the smallest integer is -128, so what would happen if we type cast a larger integer to the type &lt;strong&gt;int8&lt;/strong&gt;? Smaller integer? Use the MATLAB built-in functions &lt;code&gt;intmin&lt;/code&gt; and &lt;code&gt;intmax&lt;/code&gt; or Python’s numpy package command &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.iinfo.html&quot; target=&quot;blank&quot;&gt;&lt;code&gt;iinfo&lt;/code&gt;&lt;/a&gt; to find the largest and smallest integers that can be stored in &lt;strong&gt;int16&lt;/strong&gt; and &lt;strong&gt;int32&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations&quot; target=&quot;blank&quot;&gt;Operator Precedence&lt;/a&gt;.&lt;/strong&gt; Think about what the results would be for the following expressions, and then type them in to the terminal to verify your answers. Briefly explain the results for each one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 1\2 
&amp;gt;&amp;gt; 1/2
&amp;gt;&amp;gt; int8(1/2)
&amp;gt;&amp;gt; int8(1/3)
&amp;gt;&amp;gt; -5^2  
&amp;gt;&amp;gt; -5**2  
&amp;gt;&amp;gt; (-5) ^ 2 
&amp;gt;&amp;gt; (-5) ** 2 
&amp;gt;&amp;gt; 10-6/2 
&amp;gt;&amp;gt; 5*4/2*3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Provide three different methods of generating the matrix &lt;strong&gt;a&lt;/strong&gt;, one method should use the &lt;code&gt;diag()&lt;/code&gt; function, one should use the &lt;strong&gt;eye&lt;/strong&gt; function, and one should use the &lt;strong&gt;zeros&lt;/strong&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; &lt;strong&gt;MATLAB.&lt;/strong&gt; Download this &lt;a href=&quot;../homework/2-problems/script_full_of_errors.m&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_fixed.m&lt;/code&gt; in your folder for this HW. Explain in front of each corrected MATLAB statement, why the error occurred. Modify the last two variables so that they display,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Persian
Persian =
Persian is a human language
&amp;gt;&amp;gt; Spanish
Spanish = 
    'Spanish '    'is '    ' another'    'language'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Modify the last line such that for the last line the code displays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Persian is not the same as Spanish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain these results.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;Python.&lt;/strong&gt; Download &lt;a href=&quot;http:/MAPCP2019U/homework/2/python_script_full_of_errors.pi&quot; target=&quot;_blank&quot;&gt;this Python script&lt;/a&gt;. This Python script is full of syntax, runtime, and semantic errors. Please identify and corrent these errors, such that code becomes fully executable and outputs the following message on the screen, when run from the Git Bash command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;The life expectancy for the millennials is projected to be 120 years! (But don't believe it...)


    A recent study published in the journal of Nature, discovered that over the past century,
    although the life expectancy has significantly increased due to technological advances,
    the maximum life span of the oldest people in the world has not changed much.


Cardano was the first to introduce complex numbers of the form a + sqrt(-b) into algebra, but he had misgivings about it.
In his solution to an algebra equation he encountered the solution 5 + sqrt(-15) for the unknown, which is now mathematically represented by

       (5+3.872983346207417j)

in Python, which can also be obtained as an addition of real and imaginary numbers in Python like this


      5 + sqrt(-15) = (5+3.872983346207417j),


      which can also be manually stated as


      (5+3.872983346207417j)





One final note:

        In python the sqrt function from math and cmath modules are different.
        The sqrt function that returns &quot;float&quot; results is sqrt from math module.
        Therefore, if using math module, then,

                sqrt(25) = 5.0000,

        which is obviously a float (real number).




Also note that by convention, 0**0 = 1 in Python.
And division by 0, will give you a runtime exception: 1/0 = NaN

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Identify at least one example in the code for each of the error types.&lt;/p&gt;

&lt;p&gt;Here are a few hints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to get familiar with string formatting in &lt;code&gt;print&lt;/code&gt; function. See &lt;a href=&quot;https://www.cdslab.org/ECL2017S/lecture/4-python-values-variables-types&quot; target=&quot;_blank&quot;&gt;Lecture 4&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Note that in Python, the interpreter is sensitive to &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#indentation&quot; target=&quot;_blank&quot;&gt;indentations&lt;/a&gt; in your codes. All lines must be aligned at the beginning (except for looping and branching, … which we will get to them later on).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Become familiar with &lt;a href=&quot;https://python-reference.readthedocs.io/en/latest/docs/str/escapes.html&quot; target=&quot;_blank&quot;&gt;escape characters&lt;/a&gt; in Python, such as &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\t'&lt;/code&gt;, and &lt;code&gt;'\t'&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; &lt;strong&gt;MATLAB.&lt;/strong&gt; Use MATLAB help to find out how you can create a new directory named &lt;code&gt;mynewdir&lt;/code&gt; from MATLAB command line. Then change the working directory the newly created directory. Then create a MATLAB script in this directory named &lt;code&gt;myscript.m&lt;/code&gt; with the following code in it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;% First create an array from -2*pi to 2:pi
x = -2*pi:pi/20:2*pi;

% Calculate |sin(x)|
y = abs(sin(x));

plot(x,y);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now on MATLAB command line, run the script by calling its name. What do you get? Save the output as a figure and submit it with your homework.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;MATLAB.&lt;/strong&gt; Now change your working directory to the original directory before you created &lt;code&gt;mynewdir&lt;/code&gt; directory. Try to run the script &lt;code&gt;myscript&lt;/code&gt; you had created again, from MATLAB command line. What do you get? and why?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; &lt;strong&gt;Python&lt;/strong&gt; Write a Python script that is directly executable from the Git Bash command line, without any need to invoke &lt;code&gt;python&lt;/code&gt; interpreter. The script should produce &lt;strong&gt;exactly&lt;/strong&gt; the following output, including line breaks and separations. Each part of the output (separated by a line-break, or a new-line character &lt;code&gt;'\n'&lt;/code&gt; from the rest) is generated by &lt;strong&gt;only and only one call&lt;/strong&gt; to print function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;This is Python version 3.5.2 

Python is the best language for String manipulation!

!noitalupinam gnirtS rof egaugnal tseb eht si nohtyP

!otlpnmgit o gunlte h inhy

pYTHON IS THE BEST LANGUAGE FOR sTRING MANIPULATION!


The sentence 'Python is the best language for String manipulation!' contains 
4 'a' letters, and
0 'A' letters!

Python
is
the
best
language
for
String
manipulation!

PYTHON
IS
THE
BEST
LANGUAGE
FOR
STRING
MANIPULATION!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here are some hints (all the information you need to answer this question can be found in &lt;a href=&quot;https://www.cdslab.org/ECL2017S/lecture/4-python-values-variables-types&quot; target=&quot;_blank&quot;&gt;Lecture 4&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To make the script executable, add the appropriate shebang to the script’s file.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Import the appropriate module to get the python version command, as we did in class. Use &lt;code&gt;print&lt;/code&gt; function to print the Python version.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Define a String variable &lt;code&gt;my_string&lt;/code&gt; which contains the string value “Python is the best language for String manipulation!” ( Of course, you can totally accomplish this question without defining a string variable, by only using the string value itself wherever needed… This is also totally fine at this point in our course, if your prefer this method).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Then use the appropriate examples and external links provided in &lt;a href=&quot;https://www.cdslab.org/ECL2017S/lecture/4-python-values-variables-types&quot; target=&quot;_blank&quot;&gt;Lecture 4&lt;/a&gt;, to find the proper &lt;strong&gt;string methods&lt;/strong&gt; that can manipulate this string variable/value in order to generate each of the outputs printed above.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Again, note that for each output, the entire output must result from &lt;strong&gt;one single call&lt;/strong&gt; to function &lt;code&gt;print&lt;/code&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Wherever needed, use the &lt;a href=&quot;https://python-reference.readthedocs.io/en/latest/docs/str/escapes.html&quot; target=&quot;_blank&quot;&gt;escape character&lt;/a&gt; value &lt;code&gt;'\n'&lt;/code&gt; in &lt;code&gt;print&lt;/code&gt; input arguments, in order to generate a line-break (or new line) in the output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. &lt;/strong&gt; The bell-shaped &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian probability density function&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)=\frac{1}{\sqrt{2\pi}\sigma}\exp\bigg[ -\frac{1}{2}\bigg( \frac{x-\mu}{\sigma} \bigg)^2 \bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
is one of the most widely used functions in science and technology. The parameters of the function (mu,sigma&amp;gt;0) are prescribed real numbers. Write a program for evaluating this function when $\mu=0$, $\sigma=2$, $x = 1$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; The value &lt;code&gt;pi&lt;/code&gt;, and &lt;code&gt;exp()&lt;/code&gt; , &lt;code&gt;sqrt()&lt;/code&gt; function are built-in in MATLAB, but are not so in Python. You will need to export them using the following command in Python,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import pi, exp, sqrt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Verify your answer by getting the same result from &lt;a href=&quot;https://www.wolframalpha.com/&quot; target=&quot;_blank&quot;&gt;Wolfram Alpha&lt;/a&gt; mathematical search engine.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. &lt;/strong&gt; &lt;strong&gt;Python.&lt;/strong&gt; Download &lt;a href=&quot;http:/MAPCP2019U/homework/2/script_full_of_errors.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_corrected.py&lt;/code&gt; in your hw4 folder of your project. Explain in front of each corrected Python statement, why the error occurred.  On the last line of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;true = fox is rev in Persian
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the statement runs without error. But can you explain what it does? (Hint: For this part you need to understand operation precedence. You can find more information &lt;a href=&quot;https://www.mathcs.emory.edu/~valerie/courses/fall10/155/resources/op_precedence.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. &lt;/strong&gt; As an egg cooks, the proteins first denature and then coagulate. When the temperature exceeds a critical point, reactions begin and proceed faster as the temperature increases. In the egg white, the proteins start to coagulate for temperatures above $63^\circ\rm{C}$, while in the yolk the proteins start to coagulate for temperatures above $70^\circ\rm{C}$. For a soft boiled egg, the white needs to have been heated long enough to coagulate at a temperature above $63^\circ\rm{C}$, but the yolk should not be heated above $70^\circ\rm{C}$. For a hard boiled egg, the center of the yolk should be allowed to reach $70^\circ\rm{C}$.&lt;/p&gt;

&lt;p&gt;The following formula expresses the time $t$ it takes (in seconds) for the center of the yolk to reach the temperature Ty (in Celsius degrees):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t = \frac
{ M^{2/3} ~ c ~ \rho^{1/3} }
{ K\pi^2 ~ (4\pi/3)^{2/3} }
~\ln
\bigg[
0.76 \frac{T_0 - T_w}{T_y-T_w}
\bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
where $M$ is the mass of egg, $\rho$ is the density, $c$ is the specific heat capacity, and $K$ is thermal conductivity. Relevant values are $M=47~[g]$ for a small egg and $M=67~[g]$ for a large egg, $\rho=1.038 ~[g~cm^{-3}]$, $c = 3.7 ~[J~g^{-1}~K^{-1}]$, and $K = 5.4\times10^{-3} ~[Wcm^{-1}K^{-1}]$. Furthermore, $T_w$ is the temperature
(in C degrees) of the boiling water, and $T_0$ is the original temperature (in C degrees) of the egg before being put in the water. Implement the formula in a Python program, set $T_w = 100^\circ C$ and $T_y = 70^\circ C$, and compute $t$ for a large egg taken from the fridge ($T_0 = 4^\circ C$) and from room temperature ($T_0 = 20^\circ C$). (&lt;strong&gt;Hint&lt;/strong&gt;: Note that for this problem you will need to import &lt;code&gt;log, pi&lt;/code&gt; from &lt;code&gt;math&lt;/code&gt; module in Python.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13.  Python: Aliasing vs. Copying variables.&lt;/strong&gt; Run the following python statements and briefly explain why you get the behavior printed by the &lt;code&gt;print&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;(A)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = 5
b = a
print (id(a), id(b))
 
c = b
b = 3
print (a,b,c)
print (id(a),id(b),id(c))
 
b = a
b = 5
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [5]
b = a
print (id(a), id(b))
 
b.append(1)
print a,b
print (id(a),id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(C)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [5]
b = list(a)
print (a,b)
print (id(a), id(b))
 
b = a[:]
print (a,b)
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(D)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = (5,)
b = tuple(a)
print (id(a), id(b))
 
b = a[:]
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14.  Python.&lt;/strong&gt; The following is the name list of all people in our class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Christian-Andrew Bagby-wright
Matthew Chrysler
Niyousha Davachi
Pauline Dredger
Marcos Guillen
Lauren Kuffel
Shashank Kumbhare
Hany Mahdy
Sarah Moorman
Andrew Myers
Joshua Osborne
Rebecca Proni
Amir Shahmoradi
Carolina Vedovato
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
We want to create a dictionary of members of this class with individuals’ full names serving as dictionary keys, and their roles in class as the corresponding values of the keys. The naive way of generating this dictionary would be to use one of the methods for generating dictionary discussed in &lt;a href=&quot;http:/MAPCP2019U/lecture/5-python-variables-assignments&quot; target=&quot;_blank&quot;&gt;Lecture 5&lt;/a&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class_dict  = { 
            , 'Christian-Andrew Bagby-wright' : 'student'
            , 'Matthew Chrysler'              : 'student'
            , 'Niyousha Davachi'              : 'student'
            , 'Pauline Dredger'               : 'student'
            , 'Marcos Guillen'                : 'student'
            , 'Lauren Kuffel'                 : 'student'
            , 'Shashank Kumbhare'             : 'student'
            , 'Hany Mahdy'                    : 'student'
            , 'Sarah Moorman'                 : 'student'
            , 'Andrew Myers'                  : 'student'
            , 'Joshua Osborne'                : 'student'
            , 'Rebecca Proni'                 : 'student'
            , 'Amir Shahmoradi'               : 'instructor'
            , 'Carolina Vedovato'             : 'student'
            }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, the problem is that, except me (Amir, the instructor), everyone else has a student role in this class. So it would be a very painful process to type all ‘student’ values by hand manually. Now, the goal is to come up with a shortcut method that avoids the aforementioned problem. Can you find a way of creating this dictionary, without having to type the value ‘student’ 18 times? Note that in order to achieve this, you don’t need anything beyond what you learned in Lecture 5. (&lt;strong&gt;Hint:&lt;/strong&gt; Have a look at the section for simultaneous assignments in Lecture 5.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/homework/2-problems-variables-values-types&quot;&gt;Homework 2: Problems - Variables, Values, and Types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Solutions - Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/homework/1-solutions-version-control-using-git-github"/>
  <id>http:/MAPCP2019U/homework/1-solutions-version-control-using-git-github</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;1-problems-version-control-using-git-github.html&quot; target=&quot;_blank&quot;&gt;Homework 1: Problems - Version Control Using Git and Github&lt;/a&gt;.&lt;br /&gt;
&amp;lt;!–
The following figure illustrates the grade distribution for this homework.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/gradeDist/gradeHistHomework1.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points, excluding bonus questions, is 1.&lt;br /&gt;
        Maximum possible points, including bonus questions, is 1.5.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;–&amp;gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: One week from the posting date @ 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;p&gt;First, use the following Markdown language references, or any other reference that you find or prefer, to design a Github-interpretable README file for each of folders in your project for this course, and a Github web-page for your project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet (pdf)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ghost.org/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown language reference (web)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot; target=&quot;_blank&quot;&gt;Adam Pritchard’s Markdown cheat-sheet (web)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write your code sections of your answer in Markdown syntax.
For example,&lt;br /&gt;
&lt;code&gt;
    ```bash  &lt;br /&gt;
    $ git branch -d test  &lt;br /&gt;
    error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'  &lt;br /&gt;
    ```
&lt;/code&gt;
&lt;br /&gt;
will display the following text highlighted as &lt;em&gt;bash&lt;/em&gt; code, in your &lt;em&gt;readme.md&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Include the following information with the following format and information in your main directory &lt;code&gt;readme.md&lt;/code&gt; file:&lt;/p&gt;

&lt;h2 id=&quot;beginning-of-the-readme-files-content&quot;&gt;&lt;em&gt;Beginning of the README file’s content&lt;/em&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mapcp2019u---introduction-to-computer-programming-summer-2019&quot;&gt;MAPCP2019U - Introduction to Computer Programming (Summer 2019)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Name:&lt;/strong&gt; &amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;br /&gt;
&lt;strong&gt;UTA EID:&lt;/strong&gt; &amp;lt;your UTA EID&amp;gt;&lt;br /&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &amp;lt;your email&amp;gt;&lt;br /&gt;
&lt;strong&gt;Department:&lt;/strong&gt; &lt;a href=&quot;https://www.uta.edu/physics/&quot;&gt;Department of Physics&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;University:&lt;/strong&gt; &lt;a href=&quot;https://www.utexas.edu/&quot;&gt;The University of Texas at Arlington&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Level:&lt;/strong&gt; graduate - &amp;lt;Freshman (1st year) / Sophomore (2nd year) / Junior (3rd year) / Senior (4th year) / Dinosaur (5th year and above) &amp;gt;&lt;br /&gt;
&lt;strong&gt;MAPCP-Class Title:&lt;/strong&gt; Student&lt;br /&gt;
&lt;strong&gt;Course Webpage:&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.orghttp:/MAPCP2019U/&quot;&gt;https://www.cdslab.orghttp:/MAPCP2019U/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Photo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http:/MAPCP2019U/images/AmirShahmoradi.png&quot; alt=&quot;Amir Shahmoradi&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-of-the-projects-content&quot;&gt;Description of the project’s content&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt; This repository contains my homework, quizzes, and virtually every effort that I have made for &lt;a href=&quot;https://www.cdslab.orghttp:/MAPCP2019U/&quot;&gt;MAPCP2019U class&lt;/a&gt;. The structure of the project is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#homework&quot;&gt;homework&lt;/a&gt;:&lt;/strong&gt; (the homework hyperlink should take the reader to the homework folder)&lt;br /&gt;
  This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#quiz&quot;&gt;quiz&lt;/a&gt;:&lt;/strong&gt; (the quiz hyperlink should take the reader to the quizzes folder)&lt;br /&gt;
  This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#exam&quot;&gt;exam&lt;/a&gt;:&lt;/strong&gt; (the exam hyperlink should take the reader to the exams folder)&lt;br /&gt;
  This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For questions and troubleshooting, please contact:&lt;/p&gt;

&lt;p&gt;&amp;lt;your name&amp;gt;&lt;br /&gt;
&amp;lt;your email&amp;gt;&lt;br /&gt;
&amp;lt;any other contact or signature information that you would like to add&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have not failed. I’ve just found 10,000 ways that won’t work.&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_Edison&quot; target=&quot;_blank&quot;&gt;Thomas A. Edison&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;end-of-the-readme-files-content&quot;&gt;&lt;em&gt;End of the README file’s content&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Use the following Markdown code in your &lt;code&gt;readme.md&lt;/code&gt; file to get the exact same behavior as requested above:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;#### MAPCP2019U - Introduction to Computer Programming (Summer 2019)
&amp;lt;br&amp;gt;
**Name:** \&amp;lt;first name&amp;gt; \&amp;lt;last name&amp;gt;  
**UT EID:** \&amp;lt;your UTA EID&amp;gt;  
**Email:** \&amp;lt;your email&amp;gt;  
**Department:** [Department of Physics](https://www.uta.edu/physics/)    
**University:** [The University of Texas at Arlington](https://www.utexas.edu/)  
**Level:** graduate - \&amp;lt;Freshman (1st year) / Sophomore (2nd year) / Junior (3rd year) / Senior (4th year) / Dinosaur (5th year and above) &amp;gt;  
**MAPCP-Class Title:** Student  
**Course Webpage:** &amp;lt;https://www.cdslab.orghttp:/MAPCP2019U/&amp;gt;  
**Photo:**  

![Amir Shahmoradi](../../images/AmirShahmoradi.png)  

#### Description of the project's content
&amp;lt;br&amp;gt; This repository contains my homework, quizzes, and virtually every effort that I have made for [MAPCP2019U class](https://www.cdslab.orghttp:/MAPCP2019U/). The structure of the project is the following:

* **[homework](#homework):** (the homework hyperlink should take the reader to the homework folder)  
    This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.  
    &amp;lt;br&amp;gt;
* **[quiz](#quiz):** (the quiz hyperlink should take the reader to the quizzes folder)  
    This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.  
    &amp;lt;br&amp;gt;
* **[exam](#exam):** (the exam hyperlink should take the reader to the exams folder)  
    This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.  
    &amp;lt;br&amp;gt;

For questions and troubleshooting, please contact:  

\&amp;lt;your name&amp;gt;  
\&amp;lt;your email&amp;gt;  
\&amp;lt;any other contact or signature information that you would like to add&amp;gt;

&amp;gt;I have not failed. I've just found 10,000 ways that won't work.  
&amp;gt;[Thomas A. Edison](https://en.wikipedia.org/wiki/Thomas_Edison){:target=&quot;_blank&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Note that you will have to change the relevant information and hyper-references in the above Mardown code to those that match your own information in your own repository (including your own photo).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Create two additional test branches in your project, each of which is branched directly from &lt;em&gt;master&lt;/em&gt;. &lt;strong&gt;For each of the following cases, write the command and the corresponding output message of Git, in Markdown language in a &lt;code&gt;readme.md&lt;/code&gt; file inside your &lt;code&gt;homework/1/&lt;/code&gt; folder in your master branch&lt;/strong&gt;. If you don’t have this folder in your project, then create the folder and then place your initial &lt;code&gt;readme.md&lt;/code&gt; file in this folder with your signature as the content of the file. Then stage and commit this file together with homework-1 folder to your local repository. Throughout the rest of this homework, you will fill this &lt;code&gt;readme.md&lt;/code&gt; file with your answers.&lt;/p&gt;

&lt;p&gt;(A) Create two branches, &lt;strong&gt;both from your &lt;em&gt;master&lt;/em&gt; branch&lt;/strong&gt;, with names &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* master

$ git branch test1

$ git branch test2

$ git branch
* master
  test1
  test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(B) Now checkout the &lt;em&gt;test1&lt;/em&gt; branch and create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test1
Switched to branch 'test1'

$ git status
On branch test1
nothing to commit, working tree clean

$ ls
readme.md

$ touch test.txt

$ ls
readme.md  test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(C) Inside &lt;code&gt;test.txt&lt;/code&gt; in &lt;em&gt;test1&lt;/em&gt; branch write this message: &lt;em&gt;This is some example text for branch test1&lt;/em&gt;, and save it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;vim test.txt&lt;/code&gt; to open &lt;em&gt;vim&lt;/em&gt; editor. Press &lt;code&gt;shift + I&lt;/code&gt; to switch to &lt;em&gt;vim insert mode&lt;/em&gt;. write &lt;em&gt;This is some example text for branch test1&lt;/em&gt; in &lt;code&gt;test.txt&lt;/code&gt; file. Now, Press &lt;code&gt;ESC&lt;/code&gt; key and write &lt;code&gt;:wq&lt;/code&gt; on the &lt;em&gt;vim&lt;/em&gt; command line to save the file and quit &lt;em&gt;vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(D) Now stage and commit &lt;code&gt;test.txt&lt;/code&gt; file to branch &lt;em&gt;test1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch test1
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)

$ git add --all
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.

$ git commit -m&quot;commiting the test.txt file in test1 branch&quot;
[test1 715ca59] commiting the test.txt file in test1 branch
1 file changed, 1 insertion(+)
create mode 100644 test.txt

$ git status
On branch test1
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(E) Checkout the branch &lt;em&gt;test2&lt;/em&gt;. Do you still see &lt;code&gt;test.txt&lt;/code&gt; that you just created in your &lt;code&gt;homework/1/&lt;/code&gt; directory? You can search for it by the &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;ls&lt;/code&gt;. Explain why you see/don’t see the file in your working directory anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
Switched to branch 'test2'

$ ls
readme.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;test.txt&lt;/code&gt; files is not in the project’s working directory, since I just chaecked out a new branch &lt;em&gt;test2&lt;/em&gt; that does not contain any files that were generated and committed in &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(F) Create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch as well, and add &lt;em&gt;This is some example text for branch test2&lt;/em&gt; to its content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ touch test.txt

$ vim test.txt

$ git status
On branch test2
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The procedure for adding content to the file is very similar to that in part (C) of the problem, explained above.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(G) Now try to checkout &lt;em&gt;test1&lt;/em&gt;. What error/warning message do you get? Fix the source of error and then checkout &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test1
error: The following untracked working tree files would be overwritten by checkout:
        test.txt
Please move or remove them before you switch branches.
Aborting

$ git add --all
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.

$ git commit -m&quot;commtting the test2 branch changes&quot;
[test2 fce6a94] commtting the test2 branch changes
1 file changed, 1 insertion(+)
create mode 100644 test.txt

$ git status
On branch test2
nothing to commit, working tree clean

$ git checkout test1
Switched to branch 'test1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(H) Now merge the content of &lt;em&gt;test1&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. (Hint: Note from which branch you doing this merge!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ ls
readme.md

$ git status
On branch master
nothing to commit, working tree clean

$ git merge test1
Updating a661e87..715ca59
Fast-forward
 test.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(I) Now what do you see as the content of &lt;em&gt;master&lt;/em&gt; branch? (Hint: Use &lt;code&gt;ls&lt;/code&gt; &lt;em&gt;bash&lt;/em&gt; command, to list the files in the working directory.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls
readme.md  test.txt

$ git status
On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(J) Now merge the content of &lt;em&gt;test2&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. What error/warning message do you get? Why does this error arise?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge test2
Auto-merging test.txt
CONFLICT (add/add): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(K) Now checkout &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
test.txt: needs merge
error: you need to resolve your current index first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(L) Run the Git command &lt;code&gt;git status&lt;/code&gt;. Why does such a conflict exist, as mentioned in &lt;code&gt;git status&lt;/code&gt; output?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Basically, by running &lt;code&gt;git merge test2&lt;/code&gt; command, we attempted to merge test.txt file of &lt;em&gt;test2&lt;/em&gt; branch with the existing &lt;code&gt;test.txt&lt;/code&gt; file of &lt;em&gt;master&lt;/em&gt; branch. But the content of the two is different.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(M) At this stage, you have two options: Either 1. stage and commit the combined conlifting &lt;code&gt;test.txt&lt;/code&gt; file to Git repository (but this is not recommended), or, 2. open the file &lt;code&gt;test.txt&lt;/code&gt; using &lt;em&gt;vim&lt;/em&gt; editor on the command line and reslve the conflict by editing the content of the file to only this sentence: &lt;em&gt;. Then save and quit *vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ vim test.txt

$ cat test.txt
This is some example text from both test1 and test2 branches combined.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;cat&lt;/code&gt; shows the content of &lt;code&gt;text.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(N) Now, run &lt;code&gt;git status&lt;/code&gt;, then stage and commit your conflict-resolved file. Then checkout &lt;em&gt;test2&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both added:      test.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

$ git add test.txt

$ git commit -m&quot;adding the test.txt resolution file&quot;
[master 4c74098] adding the test.txt resolution file

$ git status
On branch master
nothing to commit, working tree clean

$ git checkout test2
Switched to branch 'test2'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(O) Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on branch &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test1
error: The branch 'test1' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test1'.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(P) Now, switch back to &lt;em&gt;master&lt;/em&gt; branch. Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on &lt;em&gt;master&lt;/em&gt; branch. What message do you get from Git? List all the existing branches using &lt;code&gt;git branch&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git branch
* master
  test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(Q) Why is there such a difference in Git messages between when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;test2&lt;/em&gt; branch, and when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;master&lt;/em&gt; branch?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The difference arises, because whichever branch you are in, Git assumes that the content of any other branch should be first merged for the current branch before deteting the other branch. Therefore, in the first case, Git warns that there is unmerged data between &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt; branches. But the delete command from &lt;em&gt;master&lt;/em&gt; branch gives no error, since the content of &lt;em&gt;test1&lt;/em&gt; branch has been previously appropriately merged with &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(R) Now checkout &lt;em&gt;test2&lt;/em&gt; branch. While on &lt;em&gt;test2&lt;/em&gt;, try to delete branch &lt;em&gt;test2&lt;/em&gt;. What error/message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
Switched to branch 'test2'

$ git branch -d test2
error: Cannot delete branch 'test2' checked out at '~/test'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(S) Switch back to &lt;em&gt;master&lt;/em&gt; and delete &lt;em&gt;test2&lt;/em&gt; branch. List all your project branches by the appropriate Git command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git branch -d test2
Deleted branch test2 (was fce6a94).

$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(T) Stage and commit all the changes (including the file &lt;code&gt;test.txt&lt;/code&gt;) to your project’s &lt;em&gt;master&lt;/em&gt; branch. Now push it all to the remote repository by Wednesday Feb 15 2017, 9:00 a.m. CDT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add --all

$ git commit
On branch master
nothing to commit, working tree clean

$ git push --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (Bonus, not mandatory) Design a simple Github page for your project, using the main directory’s &lt;code&gt;readme.md&lt;/code&gt; file. Submit the link to the page as your answer. Note that you don’t need to add anything extra to your readme file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Ask me in class to teach you how to do it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; (Bonus, not mandatory) Create a website for your project, such that your project is accessible through its web address based on the content of your project’s website, not based on the content of &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Ask me in class and I will explain how to do it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/homework/1-solutions-version-control-using-git-github&quot;&gt;Homework 1: Solutions - Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 3: Python for beginners]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/lecture/3-python-for-beginners"/>
  <id>http:/MAPCP2019U/lecture/3-python-for-beginners</id>
  <published>2019-06-13T00:00:00-05:00</published>
  <updated>2019-06-13T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing an introduction to Python programming for beginners, how to install it, different Python distributions available, how to write Jupyter notebooks, and how to perform simple arithmetic operations with Python.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;history&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-a-brief-history&quot;&gt;Python: a brief history&lt;/h2&gt;

&lt;p&gt;Python was developed close to the beginning of the 1990’, by &lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot; target=&quot;_blank&quot;&gt;Guido van Rossum&lt;/a&gt;, a former employee of &lt;a href=&quot;https://en.wikipedia.org/wiki/Google&quot; target=&quot;_blank&quot;&gt;Google&lt;/a&gt;, who is now an employee of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dropbox_(service)&quot; target=&quot;_blank&quot;&gt;Dropbox&lt;/a&gt;. The name of the language is attribution to the British sketch comedy &lt;a href=&quot;https://en.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus&quot; target=&quot;_blank&quot;&gt;Monty Python’s Flying Circus&lt;/a&gt;. As of 2016 Python seems to be the fastest growing language for data science. Python has the following features and attributes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Python is a fourth-generation, high-level programming language.&lt;/strong&gt; Remember from our &lt;a href=&quot;http:/MAPCP2019U/lecture/0-programming-history&quot; target=&quot;_blank&quot;&gt;zeroth lecture&lt;/a&gt;, that a high-level programming language provides a high level of programming abstraction from details of computer and machine code. For comparison, Fortran, C, and C++ are considered high, medium, and low -level programming languages respectively.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Python is general-purpose programming language&lt;/strong&gt;, meaning that it is designed to be used for writing software in a wide variety of application domains, such as &lt;em&gt;scientific computation&lt;/em&gt;, &lt;em&gt;web and internet development&lt;/em&gt;, &lt;em&gt;education&lt;/em&gt;, &lt;em&gt;Software Development&lt;/em&gt;. For more information, visit &lt;a href=&quot;https://www.python.org/about/apps/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Python is a multi-paradigm programming language&lt;/strong&gt;. A &lt;a href=&quot;https://en.wikipedia.org/wiki/Programming_paradigm&quot; target=&quot;_blank&quot;&gt;programming paradigm&lt;/a&gt; is the style of writing and development of a computer programming language. Python allows the programmer to use the following major programming paradigms.&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Structured_programming&quot; target=&quot;_blank&quot;&gt;structured programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot;&gt;imperative programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot; target=&quot;_blank&quot;&gt;procedural programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;object-oriented programming (OOP)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;   Later on, we will get to each of these programming paradigms in Python.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The core philosophy of Python programming&lt;/strong&gt;: Simplicity, Readability, and complexity instead of complication.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Python is an interpreted language&lt;/strong&gt;. A programming-language implementation is a system for executing computer programs. There are two general approaches to programming language implementation:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: An interpreter takes as input a program in some language, and performs the actions written in that language on some machine.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compilation&lt;/strong&gt;: A compiler takes as input a program in some language, and translates that program into some other language, which may serve as input to another interpreter or another compiler.&lt;br /&gt;
&lt;br /&gt;Python is an interpreted language, meaning that, as soon as you type a Python statement on the Python command line and press enter, the Python interpreter, executes the statement. Python programs can also be compiled, to be executed later when desired. This is a topic that will be covered later on in this course.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The most popular major implementation of Python is &lt;a href=&quot;https://en.wikipedia.org/wiki/CPython&quot; target=&quot;_blank&quot;&gt;CPython&lt;/a&gt;&lt;/strong&gt;. Other major implementations include &lt;em&gt;IronPython&lt;/em&gt;, &lt;em&gt;Jython&lt;/em&gt;, &lt;em&gt;MicroPython&lt;/em&gt;, &lt;em&gt;PyPy&lt;/em&gt;, each of which is designed for a specific purpose. Throughout this course, we will be using &lt;em&gt;CPython&lt;/em&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The extension for human-readable Python source code file is “&lt;em&gt;.py&lt;/em&gt;“&lt;/strong&gt;. There are other extensions for Python program files as well, each of which represents a specific type of Python file. For example, “&lt;em&gt;.pyc&lt;/em&gt;” represents compiled (binary) Python source code, and “&lt;em&gt;.pyo&lt;/em&gt;” is used for optimized Python files.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;installation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-installation&quot;&gt;Python installation&lt;/h2&gt;
&lt;p&gt;Depending on your operating system, you can download and install a specific version of Python for your personal computer from one of the major Python vendors, for example, CPython. For this course, we will rely on CPython implementation.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;installation-basic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;basic-python-installation&quot;&gt;Basic Python installation&lt;/h3&gt;
&lt;p&gt;The official CPython implementation of Python can be found at &lt;a href=&quot;https://www.python.org/downloads/&quot; target=&quot;_blank&quot;&gt;python.org&lt;/a&gt;. Once you go to this webpage, you will see that two versions of Python are available for download (for Windows systems):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/ftp/python/3.7.3/python-3.7.3.exe&quot; target=&quot;_blank&quot;&gt;Python 3.7.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/ftp/python/2.7.16/python-2.7.16.msi&quot; target=&quot;_blank&quot;&gt;Python 2.7.16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For operating systems other than Windows, the installation files can be found &lt;a href=&quot;https://www.python.org/downloads/source/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Linux, and &lt;a href=&quot;https://www.python.org/downloads/mac-osx/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Mac.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;installation-recommended&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;recommended-python-installation&quot;&gt;Recommended Python installation&lt;/h3&gt;
&lt;p&gt;In addition to the basic Python distribution that you can obtain from CPython organization, there are also other popular Python &lt;em&gt;distributions&lt;/em&gt; that, by default, contain some highly useful Python libraries, advanced Python editors and &lt;a href=&quot;https://en.wikipedia.org/wiki/Integrated_development_environment&quot; target=&quot;_blank&quot;&gt;integrated development environments (IDEs)&lt;/a&gt;. A &lt;strong&gt;Python distributions&lt;/strong&gt; is basically the Basic Python core bundled together with many useful Python libraries and IDEs. For example, the basic Python distribution from CPython organization is bundled along with a simple primitive integrated development environment for Python coding, called &lt;a href=&quot;https://en.wikipedia.org/wiki/IDLE&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;IDLE&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aside from the official basic CPython distribution of Python available from python.org, there are other Python distributions based on CPython. A comprehensive list can be found &lt;a href=&quot;https://wiki.python.org/moin/PythonDistributions&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Some, among many, of the most popular and useful Python distributions for scientific computing purposes are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.continuum.io/downloads&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Anaconda&lt;/strong&gt;&lt;/a&gt; from &lt;a href=&quot;https://www.continuum.io/&quot; target=&quot;_blank&quot;&gt;Continuum Analytics&lt;/a&gt;. According to the company, Anaconda is the leading open data science platform powered by Python. The open source version of Anaconda is a high-performance distribution of Python and R and includes over 100 of the most popular Python, R and Scala packages for data science. Additionally, the Anaconda user has access to over 720 packages that can be easily installed with &lt;a href=&quot;https://en.wikipedia.org/wiki/Conda_(package_manager)&quot; target=&quot;_blank&quot;&gt;conda&lt;/a&gt;. Conda is a language-agnostic package manager and environment management system that is developed and maintained by Continuum Analytics. The package Conda is itself written in Python.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;The Anaconda distribution of Python is the one that we will use throughout this course.&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
The latest version of Anaconda includes an easy installation of Python (2.7.13, 3.4.5, 3.5.2, and/or 3.6.0) and updates of over 100 pre-built and tested scientific and analytic Python packages. These packages include &lt;strong&gt;NumPy&lt;/strong&gt;, &lt;strong&gt;Pandas&lt;/strong&gt;, &lt;strong&gt;SciPy&lt;/strong&gt;, &lt;strong&gt;Matplotlib&lt;/strong&gt;, and &lt;strong&gt;Jupyter&lt;/strong&gt;. Over 620 more packages are available. You can install any of them with just one command,
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;conda install package-name
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;em&gt;(NOTE: Replace “package-name” with the name of the package you want to install.)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.enthought.com/products/canopy/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Canopy Python&lt;/strong&gt;&lt;/a&gt; from &lt;a href=&quot;https://www.enthought.com/&quot; target=&quot;_blank&quot;&gt;Enthought Canopy&lt;/a&gt;. According to the company, Canopy Python is a comprehensive Python analysis environment that provides easy installation of over 450 core scientific analytic and Python packages, creating a robust platform you can explore, develop, and visualize on. In addition to its pre-built, tested Python distribution. Enthought Canopy has tools for iterative data analysis, visualization and application development. Like Anaconda, Canopy has free and licensed versions available for purchase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;package-installation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;installing-external-python-packages&quot;&gt;Installing external Python packages&lt;/h3&gt;
&lt;p&gt;One of the greatest advantages and reasons for the popularity of Python over other languages is the extensive set of libraries that have been written for Python over the past two decades. As a professional Python programmer, you will virtually always need some of these packages. In any event, you need a Python library that is not already installed on your device, you can get the instructions for Linux installation from &lt;a href=&quot;https://packaging.python.org/installing/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;. For Windows devices, you can get precompiled version of Python external libraries, ready for installation, from &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/&quot; target=&quot;_blank&quot;&gt;Christoph Gohlke’s personal website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;IDE&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;python-editors-and-ides&quot;&gt;Python editors and IDEs&lt;/h3&gt;
&lt;p&gt;The simple Python code editor, IDLE, that comes with the basic CPython distribution of Python is mostly not helpful enough for educational and professional programming. As a result, a myriad of Python code editors and IDEs have been also developed over the past decade. A rather complete list of most popular Python IDEs can be found &lt;a href=&quot;https://wiki.python.org/moin/PythonEditors&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Python&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Some of the most useful for our class and your future professional use are likely the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Spyder_(software)&quot; target=&quot;_blank&quot;&gt;Spyder&lt;/a&gt;&lt;br /&gt;
Spyder (formerly Pydee) is an open source cross-platform IDE for scientific Python programming. It probably has the highest design similarity to the MATLAB environment. Therefore, it is likely a good start as an IDE for those who are already familiar and comfortable with MATLAB environment design. Spyder integrates NumPy, SciPy, Matplotlib, and IPython, as well as other open source software.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/pycharm/&quot; target=&quot;_blank&quot;&gt;PyCharm&lt;/a&gt;&lt;br /&gt;
PyCharm is full-featured IDE for Python. It is available in Free and Open Source edition, fully supporting Python as well as proprietary Professional Edition with Django, Flask, Pyramid and Google App Engine support.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ipython.org/&quot; target=&quot;_blank&quot;&gt;IPython&lt;/a&gt;&lt;br /&gt;
IPython is an enhanced interactive Python shell. It offers a significantly enhanced interactive shell for Python programming, such as tab completion (autocompletion), inline Python syntax highlighting, command history, etc. It is highly useful for testing small snippets of your big code immediately on the IPython shell. IPython is installed on your computer as part of the Anaconda package installation.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jupyter.org/about.html&quot; target=&quot;_blank&quot;&gt;Jupyter&lt;/a&gt;&lt;br /&gt;
Project Jupyter was born out of the IPython Project in 2014 as it evolved to support interactive data science and scientific computing across all programming languages. Jupyter is an abbreviation for Julia, Python, and R programming languages. The Jupyter Notebook is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text. Uses include data cleaning and transformation, numerical simulation, statistical modeling, machine learning and much more.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://notepad-plus-plus.org/&quot; target=&quot;_blank&quot;&gt;Notepad++&lt;/a&gt;  (available only on Windows)&lt;br /&gt;
The last, but in-my-opinion not least, important Python editor is Notepad++. It is a highly versatile text and source code editor for use with Microsoft Windows. It is likely – and in my opinion, arguably – the most powerful general-purpose text editor that is currently available on the web. Notepad++ automatically identifies the type of code the file contains based on the file extension and highlights the code syntax accordingly. However, you should keep in mind that it is not specifically designed for Python. If you are professional multi-language programmer, you will soon find the hidden gems in Notepad++ that are not available in any other editor (including Python-specific editors) as of today, at least as far as I am aware.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;version&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;which-python-standard-version-should-you-use&quot;&gt;Which Python standard version should you use?&lt;/h3&gt;

&lt;p&gt;Like any other programming language, Python has also evolved significantly since its inception in 1991. Normally, a good programming language should be backward-compatible, meaning that the newer programming standard should not violate the previous standards. For example, an old Python code should be executable on the most recent Python standard implementation. Sometimes, however, with some programming language evolutions, this is not the case. It probably happens to all languages that sometimes, the new standard violates the older standard syntax of the language, causing runtime and compile-time error for an old-standard code.&lt;/p&gt;

&lt;p&gt;For Python standards, this backward-incompatibility occurred between Python versions 2.x and 3.x. A list of the key differences between the two standards can be found &lt;a href=&quot;http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. If you would like to know which Python version is likely most useful for your future professional project, consult &lt;a href=&quot;https://wiki.python.org/moin/Python2orPython3&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;. However, it is important to keep in mind that &lt;strong&gt;Python 2.x standard is legacy, and Python 3.x is the present and future of the Python language&lt;/strong&gt;. By the year 2020, the official plan is to cut the security updates and support for Python 2.x and most of the major Python packages have already started migrating to Python 3. Therefore, for the rest of this course, we will be using Python 3 syntax.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-setup&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-jupyter&quot;&gt;Setting up Jupyter&lt;/h2&gt;
&lt;p&gt;There are two ways to set up and run a Jupyter notebook:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;on your personal device&lt;/li&gt;
  &lt;li&gt;online on Jupyter website&lt;br /&gt;
&lt;br /&gt;
In the following, both methods will be explained.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-setup-device&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;running-jupyter-on-personal-device&quot;&gt;Running Jupyter on Personal Device&lt;/h3&gt;

&lt;p&gt;Now, if you have already installed Anaconda on your device, you should also have Jupyter and IPython installed automatically. To open a new Jupyter notebook, follow the instructions below (for Windows OS). For other OS, it would also be similar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Open Windows’ start menu and search for jupyter.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/3/jupyter1.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; By clicking on &lt;code&gt;Jupyter Notebook&lt;/code&gt;, a Windows Command Prompt for Jupyter will open up, initializing the Jupyter server. Then a web browser window will open up on your default web browser. The content of this web page is a list of the content of your home directory on your personal device, as in the following figure.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/3/jupyter2.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Now click on the &lt;code&gt;new&lt;/code&gt; tab on the top-right part of the page, and choose &lt;code&gt;python 3&lt;/code&gt;. If you have installed Python 2 as well, you will also see an option for &lt;code&gt;Python 2&lt;/code&gt;. But, for this course proceed with &lt;code&gt;Python 3&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/3/jupyter3.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Once you choose and click on your Python version, a new browser tab will open, which contains your &lt;strong&gt;Jupyter notebook&lt;/strong&gt;, as illustrated in the following figure.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/3/jupyter4.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Your Jupyter notebook file is stored in the home direcotry of your device, likely with the name &lt;code&gt;Untitled.ipynb&lt;/code&gt;. The very cool feature of Jupyter notebooks is that you can also export your notebook as a Markdown, PDF, HTML, or a single Python file (with &lt;code&gt;.py&lt;/code&gt; extension), as illustrated in the figure below.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/3/jupyter5.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-setup-online&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;running-jupyter-online&quot;&gt;Running Jupyter online&lt;/h3&gt;
&lt;p&gt;The instructions for setting up your online Jupyter notebooks are very similar to the above for your local device, except the very first step, for which, instead of searching in Windows for Jupyter, you have to visit Jupyter’s website at &lt;a href=&quot;https://try.jupyter.org/&quot; target=&quot;_blank&quot;&gt;https://try.jupyter.org/&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-helpful-commands&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;ipython--jupyter-helpful-commands&quot;&gt;IPython / Jupyter helpful commands&lt;/h3&gt;

&lt;p&gt;Every time you start IPython on your local device, the following list of IPython commands is shown on the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Amir@CCBB-Amir MINGW64 ~
$ ipython
Python 3.5.2 |Anaconda 4.2.0 (64-bit)| (default, Jul  5 2016, 11:41:13) [MSC v.1900 64 bit (AMD64)]
Type &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -&amp;gt; Introduction and overview of IPython's features.
%quickref -&amp;gt; Quick reference.
help      -&amp;gt; Python's own help system.
object?   -&amp;gt; Details about 'object', use 'object??' for extra details.
In [1]:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Since Jupyter is an extension of IPython, these commands are also executable in Jupyter notebooks. Here is an example of the last command &lt;code&gt;&amp;lt;object&amp;gt;?&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;In [14]: test = 'test'

In [15]: test?
Type:        str
String form: test
Length:      4
Docstring:
str(object='') -&amp;gt; str
str(bytes_or_buffer[, encoding[, errors]]) -&amp;gt; str

Create a new string object from the given object. If encoding or
errors are specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;rcbox&quot;&gt;
&lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
 Note that each cell in Jupyter notebook, can contain either Python code or Markdown code, or any other code that you can select from the &lt;i&gt;code&lt;/i&gt; dropdown menu at the top of the notebook.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;jupyter-shortcuts&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;jupyter-cheatsheet-and-keyboard-shortcuts&quot;&gt;Jupyter cheatsheet and keyboard shortcuts&lt;/h3&gt;
&lt;p&gt;There are many useful keyboard shortcuts in  Jupyter that facilitate editing and revising your Jupyter notebook cells. A Jupyter cheatsheet can be downloaded from &lt;a href=&quot;https://www.cheatography.com/weidadeyue/cheat-sheets/jupyter-notebook/#downloads&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. The following table is a summary of some of the most useful shortcuts, adopted from Jupyter website.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 1: Some useful shortcuts for Jupyter cells in &lt;i&gt;view mode&lt;/i&gt; (Press &lt;code&gt;ESC&lt;/code&gt; to switch to view mode).
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;keyboard shortcut&lt;/th&gt;
&lt;th&gt;Description of effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;
    &lt;td&gt;Enter&lt;/td&gt;
    &lt;td&gt;enter edit mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Shift + Enter&lt;/td&gt;
    &lt;td&gt;run cell, select below&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Enter&lt;/td&gt;
    &lt;td&gt;run cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Alt + Enter&lt;/td&gt;
    &lt;td&gt;run cell, insert below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Y&lt;/td&gt;
    &lt;td&gt;to code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;M&lt;/td&gt;
    &lt;td&gt;to markdown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;R&lt;/td&gt;
    &lt;td&gt;to raw&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;to heading 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;2,3,4,5,6&lt;/td&gt;
    &lt;td&gt;to heading 2,3,4,5,6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Up/K&lt;/td&gt;
    &lt;td&gt;select cell above&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Down/J&lt;/td&gt;
    &lt;td&gt;select cell below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;A/B&lt;/td&gt;
    &lt;td&gt;insert cell above/below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;X&lt;/td&gt;
    &lt;td&gt;cut selected cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;C&lt;/td&gt;
    &lt;td&gt;copy selected cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift + V&lt;/td&gt;
    &lt;td&gt;paste cell above&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;V&lt;/td&gt;
    &lt;td&gt;paste cell below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Z&lt;/td&gt;
    &lt;td&gt;undo last cell deletion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;D,D&lt;/td&gt;
    &lt;td&gt;delete selected cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift + M&lt;/td&gt;
    &lt;td&gt;merge cell below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Ctrl + S&lt;/td&gt;
    &lt;td&gt;Save and Checkpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;L&lt;/td&gt;
    &lt;td&gt;toggle line numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;O&lt;/td&gt;
    &lt;td&gt;toggle output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift + O&lt;/td&gt;
    &lt;td&gt;toggle output scrolling&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Esc&lt;/td&gt;
    &lt;td&gt;close pager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;H&lt;/td&gt;
    &lt;td&gt;show keyboard shortcut help dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;I,I&lt;/td&gt;
    &lt;td&gt;interrupt kernel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;0,0&lt;/td&gt;
    &lt;td&gt;restart kernel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Space&lt;/td&gt;
    &lt;td&gt;scroll down&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift + Space&lt;/td&gt;
    &lt;td&gt;scroll up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Shift&lt;/td&gt;
    &lt;td&gt;ignore&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 2: Some useful shortcuts for Jupyter cells in &lt;i&gt;edit mode&lt;/i&gt; (Press &lt;code&gt;enter&lt;/code&gt; to switch to edit mode).
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;keyboard shortcut&lt;/th&gt;
&lt;th&gt;Description of effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;
    &lt;td&gt;Tab&lt;/td&gt;
    &lt;td&gt;code completion or indent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Shift + Tab&lt;/td&gt;
    &lt;td&gt;tooltip&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + ]&lt;/td&gt;
    &lt;td&gt;indent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + [&lt;/td&gt;
    &lt;td&gt;dedent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + A&lt;/td&gt;
    &lt;td&gt;select all&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Z&lt;/td&gt;
    &lt;td&gt;undo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Shift + Z&lt;/td&gt;
    &lt;td&gt;redo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Y&lt;/td&gt;
    &lt;td&gt;redo&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Home&lt;/td&gt;
    &lt;td&gt;go to cell start&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Up&lt;/td&gt;
    &lt;td&gt;go to cell start&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + End&lt;/td&gt;
    &lt;td&gt;go to cell end&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Down&lt;/td&gt;
    &lt;td&gt;go to cell end&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Left&lt;/td&gt;
    &lt;td&gt;go one word left&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Right&lt;/td&gt;
    &lt;td&gt;go one word right&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Backspace&lt;/td&gt;
    &lt;td&gt;delete word before&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Delete&lt;/td&gt;
    &lt;td&gt;delete word after&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Esc&lt;/td&gt;
    &lt;td&gt;command mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + M&lt;/td&gt;
    &lt;td&gt;command mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Shift + Enter&lt;/td&gt;
    &lt;td&gt;run cell, select below&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Enter&lt;/td&gt;
    &lt;td&gt;run cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Alt + Enter&lt;/td&gt;
    &lt;td&gt;run cell, insert below&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Shift + Subtract&lt;/td&gt;
    &lt;td&gt;split cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + Shift + -&lt;/td&gt;
    &lt;td&gt;split cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + S&lt;/td&gt;
    &lt;td&gt;Save and Checkpoint&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Up&lt;/td&gt;
    &lt;td&gt;move cursor up or previous cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Down&lt;/td&gt;
    &lt;td&gt;move cursor down or next cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td&gt;Ctrl + /&lt;/td&gt;
    &lt;td&gt;toggle comment on current or selected lines&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/3-python-for-beginners&quot;&gt;Lecture 3: Python for beginners&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 13, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 3: MATLAB for beginners]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/lecture/3-matlab-for-beginners"/>
  <id>http:/MAPCP2019U/lecture/3-matlab-for-beginners</id>
  <published>2019-06-13T00:00:00-05:00</published>
  <updated>2019-06-13T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;Goals: This lecture aims at providing an introduction to MATLAB programming for beginners, how to install it, different components of the Graphical Unit Interface of MATLAB, as well as how to perform simple arithmetic operations in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;matlab-a-brief-history&quot;&gt;MATLAB: a brief history&lt;/h2&gt;

&lt;p&gt;MATLAB was developed in the mid 1980’, by the collaborative works of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cleve_Moler&quot; target=&quot;_blank&quot;&gt;Cleve Moler&lt;/a&gt;, a PhD graduate of Stanford University, and &lt;a href=&quot;https://en.wikipedia.org/wiki/John_N._Little&quot; target=&quot;_blank&quot;&gt;John Little&lt;/a&gt;, a graudate of MIT. Together they co-founded a private company named &lt;a href=&quot;https://en.wikipedia.org/wiki/MathWorks&quot; target=&quot;_blank&quot;&gt;MathWorks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The name of the language and software they developed, &lt;a href=&quot;https://en.wikipedia.org/wiki/MATLAB&quot; target=&quot;_blank&quot;&gt;MATLAB&lt;/a&gt; is an attribution to the original purpose of the software, that is, to serve as a &lt;strong&gt;mat&lt;/strong&gt;rix &lt;strong&gt;lab&lt;/strong&gt;oratory. Cleve Moler was among the developers of the popular Fortran libraries &lt;a href=&quot;https://en.wikipedia.org/wiki/EISPACK&quot; target=&quot;_blank&quot;&gt;EISPACK&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/LINPACK&quot; target=&quot;_blank&quot;&gt;LINPACK&lt;/a&gt;. He wanted to provide his students with a higher-level environment so that they could use these high-performance Fortran libraries without the need to learn Fortran.&lt;/p&gt;

&lt;p&gt;Since MATLAB was developed by a scientist for scientists, its structure and syntax have more resemblance to the popular programming language of scientists, Fortran, than to any other language. You will soon notice this similarity when we get to learn modern Fortran later on in this course.&lt;/p&gt;

&lt;p&gt;An informative historical review of MATLAB by its own inventor is &lt;a href=&quot;https://www.mathworks.com/videos/evolution-of-matlab-93125.html&quot; target=&quot;_blank&quot;&gt;available to watch on MathWork website&lt;/a&gt;. A lower quality of the same video can be accessed on youtube, which I embed here for you:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fa-sUaKv56A&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;matlab-why-do-you-need-to-learn-it&quot;&gt;MATLAB: Why do you need to learn it?&lt;/h2&gt;

&lt;p&gt;For the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It targets engineers as well as natural and medical scientists as its main audience, just like Fortran.&lt;/li&gt;
  &lt;li&gt;It has an excellent &lt;em&gt;native&lt;/em&gt; array/matrix representation and manipulation tools, just like Fortran.&lt;/li&gt;
  &lt;li&gt;It has extensive sets of high-level commands for numerical computing, like Fortran.&lt;/li&gt;
  &lt;li&gt;It is an interpreted language that makes it really easy to use anytime, unlike C, C++, Fortran which are compiled languages.&lt;/li&gt;
  &lt;li&gt;It has an excellent set of graphical tools for 2D and 3D plotting (in fact other languages like Python have tried to copy from and reverse-engineer the graphical tools and commands available in MATLAB).&lt;/li&gt;
  &lt;li&gt;It has one of the largest user-base (over 2,000,000 users) in all scientific communities.&lt;/li&gt;
  &lt;li&gt;There is an extensive list of numerical libraries written in MATLAB over the past decades by all those science/engineering -oriented users.&lt;/li&gt;
  &lt;li&gt;It has an excellent manual and user guide, with extensive illustrative examples. Basically, you might not even need to take a MATLAB class, if you could closely and carefully follow MATLAB’s user guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-caveats&quot;&gt;MATLAB caveats&lt;/h2&gt;

&lt;p&gt;Here is a personal list of MATLAB caveats that I can think of, at the moment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is not free.&lt;/li&gt;
  &lt;li&gt;It is slow compared to compiled programming languages. See for example, the following performance comparisons and tests in &lt;a href=&quot;https://modelingguru.nasa.gov/docs/DOC-1762&quot; target=&quot;_blank&quot;&gt;NASA modeling guru web page&lt;/a&gt;. As you can see there, the &lt;strong&gt;performance of MATLAB script can be significantly lower than compiled languages such as Fortran and C&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If you have already coded in fully object-oriented programming (OOP) language, in particular, Python, you will find some oddities in MATLAB’s OOP implementation. You may feel this when, for example, you are working with &lt;a href=&quot;xx&quot; target=&quot;_blank&quot;&gt;cell arrays&lt;/a&gt; in MATLAB. We will see later on, what cell arrays are.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-features&quot;&gt;MATLAB features&lt;/h2&gt;

&lt;p&gt;MATLAB has the following features and attributes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is a fourth-generation, high-level programming language.&lt;/strong&gt; Remember from our &lt;a href=&quot;http:/MAPCP2019U/lecture/2-programming-history&quot; target=&quot;_blank&quot;&gt;second lecture&lt;/a&gt;, that a high-level programming language provides a high level of programming abstraction from details of computer and machine code. For comparison, Fortran, C, and C++ are considered high, medium, and low -level programming languages respectively.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is an array-based programming language&lt;/strong&gt;, meaning that it is designed to be with the goal of facilitating array manipulation for scientists and engineers.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is a multi-paradigm programming language&lt;/strong&gt;. MATLAB allows the programmer to use the following major programming paradigms in their codes:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot;&gt;imperative programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot; target=&quot;_blank&quot;&gt;procedural programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;object-oriented programming (OOP)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;   Later on, we will get to each of these programming paradigms in MATLAB.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is an interpreted language&lt;/strong&gt;. A programming-language implementation is a system for executing computer programs. There are two general approaches to programming language implementation:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: An interpreter takes as input a program in some language, and performs the actions written in that language on some machine.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compilation&lt;/strong&gt;: A compiler takes as input a program in some language, and translates that program into some other language, which may serve as input to another interpreter or another compiler.&lt;br /&gt;
&lt;br /&gt;MATLAB is an interpreted language, meaning that, as soon as you type a MATLAB command on the MATLAB’s command-line and press enter, the MATLAB interpreter executes the statement.  MATLAB programs can also be compiled using &lt;a href=&quot;https://www.mathworks.com/products/compiler.html&quot; target=&quot;_blank&quot;&gt;MATLAB Compiler&lt;/a&gt;, to create standalone applications to be executed later when desired.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The extension for human-readable MATLAB source code file is &lt;code&gt;.m&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-useful-resources-for-matlab&quot;&gt;Some useful resources for MATLAB&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathworks.com/matlabcentral/&quot; target=&quot;_blank&quot;&gt;MATLAB Central&lt;/a&gt;: A repository of many codes, libraries written in MATLAB, as well as many MATLAB related questions with answers.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathworks.com/matlabcentral/newsreader/&quot; target=&quot;_blank&quot;&gt;comp.soft-sys.matlab&lt;/a&gt;: MATLAB’s newsletter.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathworks.com/moler&quot; target=&quot;_blank&quot;&gt;https://www.mathworks.com/moler&lt;/a&gt;: The original MATLAB developer’s page.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathworks.com/videos/search.html?q=&amp;amp;page=1&quot; target=&quot;_blank&quot;&gt;MATLAB educational videos&lt;/a&gt;: A long search-able list of educational MATLAB videos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-installation&quot;&gt;MATLAB installation&lt;/h2&gt;
&lt;p&gt;Depending on your operating system, you can download and install a specific version of MATLAB for your personal computer. MATLAB is available to all students enrolled at UT Austin for free. It can be downloaded from &lt;a href=&quot;https://www.engr.utexas.edu/itg/products/8017-matlab&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alternative-replicas-of-matlab&quot;&gt;Alternative replicas of MATLAB&lt;/h3&gt;

&lt;p&gt;Since MATLAB is not free, the GNU organization has started a project called &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Octave&quot; target=&quot;_blank&quot;&gt;GNU Octave&lt;/a&gt; which is a reverse-engineering of MATLAB language and environment, hence mostly compatible with it, but &lt;strong&gt;at no cost&lt;/strong&gt;!. You can download it from &lt;a href=&quot;https://www.gnu.org/software/octave/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. GNU Octave is a free open source software (FOSS) package which is &lt;em&gt;mostly compatible&lt;/em&gt; with MATLAB. It provides a very similar command line interpreter interface and implements most of the functionality as the commercial MATLAB product. Nevertheless, there are subtle differences which anyone attempting to switch to GNU Octave or to write MATLAB/GNU Octave-compatible scripts must appreciate. Octave was conceived in 1988 and has been under development since 1992, and over the years has made a great deal of progress, especially in the area of graphics and plotting.&lt;/p&gt;

&lt;h3 id=&quot;matlab-script-editors&quot;&gt;MATLAB script editors&lt;/h3&gt;

&lt;p&gt;I highly recommend you to use MATLAB’s own IDE for MATLAB scripting since it has fantastic features such as automatic debugging, indentation and syntax highlight. However, once you become proficient in MATLAB scripting, you may realize that the text-editing capabilities of MATLAB IDE are not that great compared to highly popular general-purpose text editors. In that case, I recommend you to use,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot;&gt;Sublime&lt;/a&gt;  (available Windows, OS X, Linux)&lt;br /&gt;
Sublime is a sophisticated text editor for codes in many different languages, including MATLAB, C, C++, Fortran, etc. It has many advanced tools for code editing and syntax highlighting.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://notepad-plus-plus.org/&quot; target=&quot;_blank&quot;&gt;Notepad++&lt;/a&gt;  (available only on Windows)&lt;br /&gt;
Notepad++ is a highly versatile text and source code editor for use with Microsoft Windows. It is likely – and in my opinion, arguably – the most powerful general-purpose text editor that is currently available on the web. Notepad++ automatically identifies the type of code the file contains based on the file extension and highlights the code syntax accordingly. However, you should keep in mind that it is not specifically designed for MATLAB. If you are a professional multi-language programmer, you will soon find the hidden gems in Notepad++, that are not available in any other editor, including MATLAB’s own editor.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;which-matlab-version-should-i-use&quot;&gt;Which MATLAB version should I use?&lt;/h3&gt;

&lt;p&gt;Always try to use the latest version if possible, since new features are added to MATLAB every year.&lt;/p&gt;

&lt;h3 id=&quot;using-matlab-online-in-your-web-browser&quot;&gt;Using MATLAB online, in your web browser&lt;/h3&gt;

&lt;p&gt;Since as a UT student, you have a campus-wide MATLAB license, you can log in to your account to use MATLAB in your browser, on a remote server. For instructions on how to use MATLAB online, click &lt;a href=&quot;https://www.mathworks.com/products/matlab-online.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;matlab-environment&quot;&gt;MATLAB environment&lt;/h2&gt;

&lt;p&gt;As soon as you open MATLAB, you will likely encounter an environment like the following figure.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/3/matlab.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A snapshot of MATLAB environment.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The main compartments in the MATLAB environment are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;command window&lt;/strong&gt;: where you can type single or multiple line commands.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;script editor&lt;/strong&gt;: which is where you can create new or open/edit existing MATLAB files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;address bar&lt;/strong&gt;: indicating the &lt;strong&gt;current working directory&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;folder tree window&lt;/strong&gt;: showing all files in the current working directory.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;workspace window&lt;/strong&gt;: which shows all the global variables currently defined in MATLAB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;useful-matlab-commands&quot;&gt;Useful MATLAB commands&lt;/h2&gt;

&lt;p&gt;The following are some useful MATLAB commands  that allow you to get help on the command-line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;demo&lt;/code&gt; will load MATLAB examples in the Help Browser, illustrating some features of MATLAB.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;help &amp;lt;keyword&amp;gt;&lt;/code&gt; will explain any function. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; help sin
sin    Sine of argument in radians.
 sin(X) is the sine of the elements of X.

 See also asin, sind.

 Reference page for sin
 Other functions named sin
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;help help&lt;/code&gt;  will explain how MATLAB help works.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lookfor &amp;lt;keyword&amp;gt;&lt;/code&gt; searches through MATLAB help for a specific word or phrase. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; lookfor gaussian
hwv                            - Create a Hull-White/Vasicek mean-reverting Gaussian diffusion model
xreggpr                        - xreggpm Gaussian Process model constructor
gmdistribution                 - Gaussian mixture distribution class.
awgn                           - Add white Gaussian noise to a signal.
bigaussianir                   - Bi-Gaussian Doppler filter impulse response.
gaussianir                     - Gaussian Doppler filter impulse response.
intfiltgaussian_intfactor      - Support function used by @channel package for
wgn                            - Generate white Gaussian noise.
commblkgaussfilt               - Gaussian filter block helper function.
commblkgaussiansrc2            - Mask function for Gaussian Noise Generator block
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;doc &amp;lt;keyword&amp;gt;&lt;/code&gt; will bring up a documentation page in the Help Browser for the given keyword.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dir &amp;lt;path&amp;gt;&lt;/code&gt; lists the contents of the given path.
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; dir
.                lcdata.xml       m3iregistry      mcc.bat          mexext.bat       mw_mpiexec.bat   win64            
..               lcdata.xsd       matlab.exe       mex.bat          mexsetup.pm      registry         worker.bat       
deploytool.bat   lcdata_utf8.xml  mbuild.bat       mex.pl           mexutils.pm      util             
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;pwd&lt;/code&gt; outputs the current working directory.
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; pwd
ans =
C:\Program Files\MATLAB\R2016a\bin
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;quit&lt;/code&gt; quits MATLAB by closing the application.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;diary('filename')&lt;/code&gt; (or &lt;code&gt;diary filename&lt;/code&gt;) saves  all subsequent keyboard interactions with MATLAB Command Window to the file &lt;code&gt;filename&lt;/code&gt;. &lt;code&gt;diary off&lt;/code&gt; suspends the diary. &lt;code&gt;diary on&lt;/code&gt; resumes diary mode using the current filename, or the default filename diary if none has yet been specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comments-in-matlab-scripts&quot;&gt;Comments in MATLAB scripts&lt;/h2&gt;

&lt;p&gt;Comment lines in MATLAB begin with percent character &lt;code&gt;%&lt;/code&gt;. Anything after &lt;code&gt;%&lt;/code&gt; is ignored by MATLAB interpreter. The &lt;code&gt;%&lt;/code&gt; character itself only tells the interpreter to ignore the remainder of the same line. In the MATLAB Editor, &lt;font color=&quot;#00e600&quot;&gt;commented areas are printed in green by default&lt;/font&gt;. There are two useful keyboard shortcuts for adding and removing chunks of comments. Select the code you wish to comment or uncomment, and then press &lt;code&gt;Ctrl-R&lt;/code&gt; to place one &lt;code&gt;%&lt;/code&gt; symbol at the beginning of each line and `Ctrl-T to do the opposite.&lt;/p&gt;

&lt;p&gt;MATLAB also supports multi-line comments, akin to &lt;code&gt;/* ... */&lt;/code&gt; in languages like C or C++, via the &lt;code&gt;%{ %}&lt;/code&gt; delimiters. But there is a small and important difference. In MATLAB, the &lt;strong&gt;lines containing &lt;code&gt;%{&lt;/code&gt; or &lt;code&gt;%}&lt;/code&gt; should not contain any other text (except white spaces)&lt;/strong&gt;. Otherwise, the multi-line comment would not work as you wish. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;%{ x = 1;
y=2;%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You notice that in the above, &lt;code&gt;y=2;&lt;/code&gt; is not commented. The correct syntax is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;%{
x = 1;
y=2;
%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Comments are useful for explaining what function a certain piece of code performs especially if the code relies on implicit or subtle assumptions or otherwise perform subtle actions. Doing this is a good idea both for yourself and for others who try to read your code. It is highly recommended to include a block of comments at the beginning of your codes explaining what your MATLAB script or function does and how to use it. MATLAB will output the leading comments that appear at the beginning of a &lt;code&gt;.m&lt;/code&gt; file, when you type,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; help &amp;lt;my function name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
All of MATLAB’s built-in functions written in MATLAB are documented this way.&lt;/p&gt;

&lt;h2 id=&quot;matlabs-search-path&quot;&gt;MATLAB’s search path&lt;/h2&gt;

&lt;p&gt;MATLAB has a search path and strategy that is used to find variables and MATLAB scripts. MATLAB’s current &lt;strong&gt;working directory&lt;/strong&gt; is always displayed in the MATLAB address bar. When you enter a name in MATLAB’s command prompt, the MATLAB interpreter attempts to find an entity with that name in the following order:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First, it looks for a variable of the same name in MATLAB’s workspace and if it exists, MATLAB displays the value of the variable.&lt;/li&gt;
  &lt;li&gt;If not, then MATLAB looks for an M-file (a MATLAB script) in the working directory of MATLAB.&lt;/li&gt;
  &lt;li&gt;If not, then MATLAB looks for an M-file in MATLAB’s list of directories (the search path) to find the file. If no entity exists with the given name, then MATLAB gives an error.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/3-matlab-for-beginners&quot;&gt;Lecture 3: MATLAB for beginners&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 13, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 2: Programming history]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/lecture/2-programming-history"/>
  <id>http:/MAPCP2019U/lecture/2-programming-history</id>
  <published>2019-06-11T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief history of the development of computers and computer programming languages and their mutual interaction with rapid developments in natural sciences in the 20th century.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h3&gt;

&lt;p&gt;The following table contains some technical programming phrases that are often used and heard in the field of computer science and programming, that you need to be familiar with as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture. The boldface words in the description column indicate items that are expressions with their own description in this table.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A general method for solving a class of problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;bug&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error in &lt;b&gt;program&lt;/b&gt; that has to be resolved for successful execution of the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiled language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose programs need to be compiled by a &lt;b&gt;compiler&lt;/b&gt; in order to run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiler&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A software that translates an entire high-level program into a lower-level language to make it &lt;b&gt;executable&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;debugging&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of finding and removing any type of error in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;exception&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An alternative name for &lt;b&gt;runtime error&lt;/b&gt; in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;executable&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An &lt;b&gt;object code&lt;/b&gt;, ready to be executed. Generally has the file extension &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.out&lt;/code&gt; or no extension at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;formal language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that is intentionally designed for specific purposes, which, unlike &lt;b&gt;natural languages&lt;/b&gt;, follows a strict standard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;high-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language (e.g., MATLAB, Python, Fortran, Java, etc) that has high level of abstraction from the underlying hardware.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;interpreted language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose statements are interpreted line-by-line by an &lt;b&gt;interpreter&lt;/b&gt; and immediately executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;low-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language that has a low-level of abstraction from computer hardware and architecture, such as Assembly. Very close to machine code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;natural language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that evolves naturally, and has looser &lt;b&gt;syntax&lt;/b&gt; rules and standard compared to &lt;b&gt;formal languages&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;object code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The output of a compiler after translating a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;parsing&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;Reading and examining a file/program and analyzing the syntactic structure of the file/program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;portability&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program's ability to be executable on more than one kind of computer architecture, without changing the code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;problem solving&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of formulating a problem and finding and expressing a solution to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;program&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A set of instructions in a that together specify an algorithm a computation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;runtime error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error that does not arise and cause the program to stop, until the program has started to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;script&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in an &lt;b&gt;interpreted language&lt;/b&gt; stored in a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantic error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in a program that makes the program do something other than what was intended. Catching these errors can be very tricky.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantics&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The meaning of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;source code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in a high-level compiled language, before being compiled by the &lt;b&gt;compiler&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in program that violates the standard &lt;b&gt;syntax&lt;/b&gt; of the programming language, and hence, the program cannot be interpreted or compiled until the syntax error is resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The structure of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;token&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;One of the basic elements of the syntactic structure of a program, in analogy with &lt;i&gt;word&lt;/i&gt; in a &lt;b&gt;natural language&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-rise-of-the-machines&quot;&gt;The rise of the machines&lt;/h3&gt;

&lt;p&gt;Immediately after the first world war and during the second world war, many fields of science and engineering witnessed rapid growth. In particular, two fields of mathematical and physical sciences, &lt;strong&gt;mathematical programming&lt;/strong&gt; (a terminology used commonly in place of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_optimization&quot; target=&quot;_blank&quot;&gt;mathematical optimization&lt;/a&gt;) (not to be confused with computer programming!) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo methods&lt;/a&gt; witnessed rapid exponential growth in both theory and practical applications. Parallel to progresses in natural sciences, a new field of science and technology, &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_computer_science&quot; target=&quot;_blank&quot;&gt;computer science&lt;/a&gt;, began to rise during the years of world-war-II, partly in response to the needs of war, but mostly in response to the exponential growth of natural sciences and engineering in the post-world-war-II era.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/2/wordFreq.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A word-usage relative frequency plot, illustrating the exponential growth of computer technology in the mid 20th century, as well as developments in the fields of deterministic and stochastic optimization techniques, which ultimately led to the emergence of &lt;a href=&quot;https://www.nibib.nih.gov/science-education/science-topics/computational-modeling&quot; target=&quot;_blank&quot;&gt;computational modeling&lt;/a&gt; as the third pillar of science. Advances in the computational methods and technology also led to the gradual popularity of Bayesian techniques in mathematical modeling toward the end of the 20th century, and the emergence of an important subfield of computational modeling, now known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Uncertainty_quantification&quot; target=&quot;_blank&quot;&gt;Uncertainty Quantification&lt;/a&gt;. Note that the positive-slope linear behavior on this semi-logarithmic plot indicates exponential growth.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The history of computer programming probably begins with the development of the first computer, &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot; target=&quot;_blank&quot;&gt;ENIAC&lt;/a&gt; (&lt;em&gt;Electronic Numerical Integrator And Computer&lt;/em&gt;), one of the earliest electronic general-purpose computers made.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/2/computer.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A diagram representing the basic underlying structure of every digital device, most importantly, desktop computers.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;how-to-express-algorithms-in-machine-language&quot;&gt;How to express algorithms in machine language?&lt;/h3&gt;

&lt;p&gt;To answer this question, we have to first understand that all human knowledge can be divided into two classes: declarative and imperative (procedural). As implicitly described by their names, &lt;strong&gt;declarative knowledge&lt;/strong&gt; involves statements of fact. For example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;J is the tenth letter of the alphabet, or,&lt;/li&gt;
  &lt;li&gt;Washington is the capital of the USA, or,&lt;/li&gt;
  &lt;li&gt;$x$ is square-root of $y$ only and only if $x*x=y$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;are all declarative statements. By contrast, &lt;strong&gt;imperative knowledge&lt;/strong&gt; is about how to accomplish something, or basically, is a recipe on how to do something, known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Algorithm&quot; target=&quot;_blank&quot;&gt;algorithm&lt;/a&gt; in scientific terminology. In order for a computer to achieve a specific computational goal, it needs to be given a set of tasks, collectively called an &lt;strong&gt;algorithm&lt;/strong&gt;. For example, most calculators contain a rather complex &lt;a href=&quot;https://www.sistenix.com/sqrt.html&quot; target=&quot;_blank&quot;&gt;algorithm for calculating the square root of a given input number&lt;/a&gt;, like the following,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/2/sqrt.png&quot; width=&quot;500&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As seen, the algorithm has a &lt;strong&gt;start&lt;/strong&gt;, a &lt;strong&gt;flow control&lt;/strong&gt;, and a &lt;strong&gt;stop&lt;/strong&gt;. These are the basic elements of an algorithm. In the early 20th century, the algorithms had to be physically and mechanically implemented in computers. Therefore, the earliest computing machines were often called &lt;strong&gt;fixed-program computers&lt;/strong&gt;. This means that they could only perform the algorithms for which they had been physically wired and built. An example of such machines is &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot; target=&quot;_blank&quot;&gt;ENIAC&lt;/a&gt;. &lt;strong&gt;Reprogramming&lt;/strong&gt; such computers, when possible at all, is a laborious process, starting with flowcharts and paper notes, followed by detailed engineering designs, and then the often-arduous process of physically rewiring and rebuilding the machine. For example, it could take almost a month to set up a program on ENIAC and get it working.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/2/eniac.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        Portraits of The three giants behind the first US-made computer ENIAC and first computer simulations in history.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Even nowadays, some very simple computers still use this design, either for simplicity or training purposes. For example, a desk calculator (in principle) is a fixed program computer. It can do basic mathematics, but it cannot be used as a word processor or a gaming console. Changing the program of a fixed-program machine requires rewiring, restructuring, or redesigning the machine. The earliest computers were not so much “programmed” as they were “designed”.&lt;/p&gt;

&lt;p&gt;It took a while until the early computer scientists noticed that they could design computers in such a way that the algorithm itself could be treated as part of the input data to the computer. In other words, one could build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_machine&quot; target=&quot;_blank&quot;&gt;general-purpose machine&lt;/a&gt;, that could take any computer algorithm as input and given its own basic set of operations (basically, if-conditional, goto, and memory access) could perform the algorithm. Such machines, which are nowadays in everyday use, are called &lt;strong&gt;stored-program computers&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;programming-language-generations&quot;&gt;Programming language generations&lt;/h3&gt;

&lt;p&gt;Initially computers had to be programmed by what is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine code&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine language&lt;/a&gt;, a set of instructions for the Central Processing Unit (CPU)  of the computer, comprising a long sequence of binary digital zeros and ones. Any interaction with computer hardware, even nowadays, has to be first converted to machine code in order to become comprehensible by the computer hardware. The coding in this language is, however, very tedious and time-consuming, and non-portable. As a result, immediately after the development of the first generation of computers, the first generation of programming languages also came to exist, most notably, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly language&lt;/a&gt; in the late 1940s. Many more programming languages have been since developed that provide higher and higher levels of &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction_(software_engineering)&quot; target=&quot;_blank&quot;&gt;programming abstraction&lt;/a&gt; by hiding more complexities of the machine code interaction with machine hardware from the front-end computer software and users.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http:/MAPCP2019U/lecture/2/proglang.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/MAPCP2019U/lecture/2/proglang.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;&lt;!--
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A flowchart illustrating .
    &lt;/figcaption&gt;--&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Depending on their levels of abstraction, programming languages are classified into different generations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/First-generation_programming_language&quot; target=&quot;_blank&quot;&gt;First generation&lt;/a&gt; languages, or machine languages, are the lowest-level computer programming languages, which provide no abstraction in their interactions with computer hardware. These languages directly interact with computer hardware, and so there is no need for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot; target=&quot;_blank&quot;&gt;compiler&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret these languages for the hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Second-generation_programming_language&quot; target=&quot;_blank&quot;&gt;second generation&lt;/a&gt; languages, are at a higher level of abstraction from the machine hardware, meaning that they require an &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret the code for the computer hardware. The most prominent and, to my understanding, the sole language of this generation is &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly&lt;/a&gt;, which is the closest-possible compiled programming language to computer hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Third generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Third-generation_programming_language&quot; target=&quot;_blank&quot;&gt;third generation&lt;/a&gt; languages, or &lt;a href=&quot;https://en.wikipedia.org/wiki/High-level_programming_language&quot; target=&quot;_blank&quot;&gt;high-level&lt;/a&gt; programming languages provide an even higher abstraction level than the second-generation languages. Third-generation languages make programming almost platform-independent, meaning that the content of the code does not depend directly on the current hardware being used. This helps the programmer to focus more on the problem of interest, rather than spending time to understand details of the specific computer and hardware being currently used. Examples of third-generation programming languages are: &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/ALGOL&quot; target=&quot;_blank&quot;&gt;ALGOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;COBOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/BASIC&quot; target=&quot;_blank&quot;&gt;BASIC&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&quot; target=&quot;_blank&quot;&gt;C#&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pascal_(programming_language)&quot; target=&quot;_blank&quot;&gt;Pascal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fourth generation:&lt;/strong&gt; The definition for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourth-generation_programming_language&quot; target=&quot;_blank&quot;&gt;fourth generation&lt;/a&gt; and beyond is not very clear, however, it is generally as the set of languages that provide an even higher level of abstraction from the hardware and proximity to the user (programmer). Some prominent examples of this category include &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot; target=&quot;_blank&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perl&quot; target=&quot;_blank&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_(programming_language)&quot; target=&quot;_blank&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/IDL_(programming_language)&quot; target=&quot;_blank&quot;&gt;IDL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/R_programming_language&quot; target=&quot;_blank&quot;&gt;R&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/S_(programming_language)&quot; target=&quot;_blank&quot;&gt;S&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;a href=&quot;http:/MAPCP2019U/lecture/2/PLchart.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/MAPCP2019U/lecture/2/PLchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A diagram tracing the history of computer languages throughout the history of computer science.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-language-paradigms&quot;&gt;Programming language paradigms&lt;/h3&gt;

&lt;p&gt;Programming paradigms are a way to classify programming languages based on their features. There are several programming paradigms such as,
&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Structured_programming&quot; target=&quot;_blank&quot;&gt;structured programming&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot;&gt;imperative programming&lt;/a&gt; (allows side effects),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt; (disallows side effects),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot; target=&quot;_blank&quot;&gt;procedural programming&lt;/a&gt; (groups code into functions and subroutines),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;object-oriented programming (OOP)&lt;/a&gt; (groups code together with the data on which the code works).&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;a href=&quot;http:/MAPCP2019U/lecture/2/progEvol.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/MAPCP2019U/lecture/2/progEvol.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A schematic representation of the evolution of programming techniques.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Among all, however, the last two programming paradigms are the most important and more widely used than the others. Historically all programming languages were &lt;strong&gt;imperative (or, procedural)&lt;/strong&gt; since this paradigm is more intuitive to the human mind, and indeed, what the computer hardware does. These languages are basically human-readable abstractions of the machine code.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http:/MAPCP2019U/lecture/2/imperative.gif&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/MAPCP2019U/lecture/2/imperative.gif&quot; width=&quot;500&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A schematic representation of the structure of imperative (procedural) programming.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Imperative programs have a structure like in the figure above, with the following components and rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;they must contain a &lt;strong&gt;main procedure&lt;/strong&gt; that determines the control flow for the program, and,&lt;/li&gt;
  &lt;li&gt;they must contain a set of functions that are called to perform certain tasks during program execution, and,&lt;/li&gt;
  &lt;li&gt;the main and sub-main procedures have a hierarchical structure, and,&lt;/li&gt;
  &lt;li&gt;the source code for each procedure is compiled, and,&lt;/li&gt;
  &lt;li&gt;all compiled procedures and the main procedure are linked together with other source codes to produce a complete &lt;strong&gt;executable program&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few decades after the first imperative programming languages were developed, computer scientists came up with an alternative programming paradigm that resulted in higher levels of abstraction from the machine code, however, could also significantly reduce the cost of code development and increase the amount of code re-usability, from one program to the next. This programming paradigm is called &lt;strong&gt;object-oriented programming (OOP)&lt;/strong&gt;, since it looks at everything in the code, as an &lt;strong&gt;object&lt;/strong&gt;. Each object then has a &lt;strong&gt;type&lt;/strong&gt;, or, &lt;strong&gt;class&lt;/strong&gt;, to which it belongs. For example, one can define a class describing a car in general, which has some &lt;strong&gt;attributes&lt;/strong&gt; that specify its model, make, year, owner, … , as well as some &lt;em&gt;*methods&lt;/em&gt; that can act on these attributes and make the car do something,&lt;/p&gt;

&lt;figure&gt;
    &lt;!--
    &lt;a href=&quot;http:/MAPCP2019U/lecture/2/oop_car.png&quot; target=&quot;_blank&quot;&gt;
    &lt;/a&gt;
    --&gt;
        &lt;img src=&quot;http:/MAPCP2019U/lecture/2/oop_car.png&quot; width=&quot;500&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A example of a OOP class describing a car, with its attributes and methods.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-language-purpose&quot;&gt;Programming language purpose&lt;/h3&gt;

&lt;p&gt;Some programming languages have been designed to target a specific market. For example, in the mid 20th century, there were two prominent languages &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt; for numerical and scientific computation, and &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;COBOL&lt;/a&gt; for business problems. In the field of scientific computation, Fortran (FORmula TRANslation), first released in 1956, is undoubtedly the most influential programming language of all human history and the oldest high-level programming language that is still in active everyday use. Among all programming languages, Fortran is the only one that specifically targets scientists and engineers as its audience. Here is a history of Fortran by its original developers:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/KohboWwrsXg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And there is of course, no doubt about the importance of general-purpose programming language &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt; and its descendant &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/a&gt;. Specifically, C++ grew out of interest is developing a language that is universal, that is, can be used for any purpose (business, OS development, scientific computation), that could also reduce the cost of code maintenance and software development. In the beginning, C++ codes were rather slow and inefficient, but more recently the language has significantly caught up with the two high-performance computing (HPC) languages C and Fortran. Here is a short video describing the origin of C++ by its own inventor:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JBjjnqG0BP8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Both C and C++, as well as Fortran are still widely used every day. These three languages are anonymously present in the lives of virtually all humans every day. For example, all climate and weather prediction software, as of today, rely on HPC kernels that have been written and are still written in Fortran. Similarly, almost every operating system that you use on your electronic devices, has some connection to C or C++.&lt;/p&gt;

&lt;h3 id=&quot;a-final-personal-remark&quot;&gt;A final, personal remark&lt;/h3&gt;

&lt;p&gt;Sometimes science acts like humans: it finds a matching partner (a programming language), then they flourish together, make a love story and occasionally decline together as well, with the only difference that polygamy is allowed in science, like Fortran’s marriage with Aerospace and &lt;a href=&quot;https://en.wikipedia.org/wiki/Plasma_(physics)&quot; target=&quot;_blank&quot;&gt;Plasma physics&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://books.google.com/ngrams/graph?content=fortran%2Cplasma%2Caerospace&amp;amp;case_insensitive=on&amp;amp;year_start=1920&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cfortran%3B%2Cc0%3B%2Cs0%3B%3BFORTRAN%3B%2Cc0%3B%3BFortran%3B%2Cc0%3B.t4%3B%2Cplasma%3B%2Cc0%3B%2Cs0%3B%3Bplasma%3B%2Cc0%3B%3BPlasma%3B%2Cc0%3B%3BPLASMA%3B%2Cc0%3B.t4%3B%2Caerospace%3B%2Cc0%3B%2Cs0%3B%3BAerospace%3B%2Cc0%3B%3Baerospace%3B%2Cc0%3B%3BAEROSPACE%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/MAPCP2019U/lecture/2/plasma-aerospace-fortran.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the co-evolution of two of the most challenging computationally-intensive fields of science (Aerospace and Plasma Physics) with the most popular high-performance scientific programming language in human history as of today. The vertical axis represents the relative word-usage frequency of the three keywords (Plasma, Aerospace, and Fortran) in all digital corpus, and the horizontal axis represents the year. Note that the downward slope of the curves in later times does NOT imply the decline of these fields of science or the decline of Fortran. It merely means that they have reached their exponential peak growth in the mid-1980s, and are now expanding steadily (linearly), whereas other newer fields (such as bioinformatics) are being more and more frequently referenced than the above three keywords every year in all digital corpus.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Many times throughout recent history, some specific fields of science have boosted and popularized some computer programming languages and vice versa, in a positive feedback loop. A younger just-married couple seems to be Bioinformatics-Python, both of which, as of today seems to be thriving:&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/MAPCP2019U/lecture/2/bioinformatics-python.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the co-evolution and thriving of the field of bioinformatics with the popular programming language, Python. The vertical axis represents the relative word-usage frequency of the two keywords (Bioinformatics and Python) in all digital corpus, and the horizontal axis represents the year.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Sometimes, a programming language couples with a specific field of science and thrives for a few years, only to be soon replaced with a younger, more attractive, programming language. This is probably what happened to the co-evolution of Perl with bioinformatics, a language which was gradually replaced with Python at the beginning of the new millennium, at least in the field of bioinformatics.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics%2Cperl&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0%3B.t4%3B%2Cperl%3B%2Cc0%3B%2Cs0%3B%3BPerl%3B%2Cc0%3B%3Bperl%3B%2Cc0%3B%3BPERL%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/MAPCP2019U/lecture/2/bioinformatics-python-perl.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the evolution and steady expansion of the Perl programming language and its gradual replacement with Python, in the field of bioinformatics. The vertical axis represents the relative word-usage frequency of the three keywords (Bioinformatics, Python, and Perl) in all digital corpus, and the horizontal axis represents the year.
    &lt;/figcaption&gt;
&lt;/figure&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/2-programming-history&quot;&gt;Lecture 2: Programming history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 11, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 1: A professional programmer uses Version Control System (VCS)]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/lecture/1-version-control-system"/>
  <id>http:/MAPCP2019U/lecture/1-version-control-system</id>
  <published>2019-06-04T00:00:00-05:00</published>
  <updated>2019-06-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief review of Version Control Systems, why they are needed, how they work, and the most prominent and popular version control software that is available today for professional collaborative programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some useful links for future reference:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1/linuxRef.pdf&quot; target=&quot;_blank&quot;&gt;Linux commands cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1/progit.en.pdf&quot; target=&quot;_blank&quot;&gt;Git reference manual (2009)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1/github-git-cheat-sheet.pdf&quot; target=&quot;_blank&quot;&gt;Github’s Git cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1/atlassian_git_cheatsheet.pdf&quot; target=&quot;_blank&quot;&gt;Atlassian’s Git cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ndpsoftware.com/git-cheatsheet.html&quot; target=&quot;_blank&quot;&gt;Advanced Git cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;Motivation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Back in the early years of my graduate studies when I started scientific research and programming, the directory containing my first project looked something like the following figure.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/1/badCodingHabit.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        An example of bad coding habit and project maintenance. The figure shows part of the content of a directory dedicated to a research project. Each folder contains one version of the project and its corresponding codes and results at a given time (i.e., one &lt;a href=&quot;https://en.wikipedia.org/wiki/Deliverable&quot; target=&quot;_blank&quot;&gt;deliverable&lt;/a&gt;). Obviously, tracking minor development stages of the project leading to each of the deliverables would be a very difficult task with such project management method.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Clearly, there are many disadvantages and caveats with maintaining the structure of your project and codes similar to the content of the above figure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Data redundancy and storage inefficiency&lt;/strong&gt;&lt;br /&gt;
 Every time you want to develop your existing project and take it to the next level, you have to make a whole copy of the last version of your project to start the new development (i.e., the next version of your project). Obviously, the new version of your project will have a lot in common with the previous version. But, each one has its own dedicated separate folder. So, there is &lt;em&gt;a lot of code and data redundancy&lt;/em&gt; in using such an approach to keeping track of your project’s version history.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;High risk of errors and irreversible mistakes&lt;/strong&gt;&lt;br /&gt;
Using this method, it is easy to forget which directory you are in, and to accidentally write to the wrong file or to mistakenly overwrite files you did not mean to.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Difficulty in tracking minor developments in the project&lt;/strong&gt;&lt;br /&gt;
 In professional programming, all minor developments and changes to a project must be tracked and well-documented (only the major versions of the project (called &lt;a href=&quot;https://en.wikipedia.org/wiki/Deliverable&quot; target=&quot;_blank&quot;&gt;deliverable&lt;/a&gt; in programming terminology) are supposed to be available to non-developers or customers. This means that in order to keep track of every minor stage of the program development, one has to create a &lt;strong&gt;new complete&lt;/strong&gt; copy of the project, with its own dedicated directory. However, since this is practically impossible, the programmer or the researcher has to either skip documenting all minor improvements and therefore, lose track of detailed changes in the code, or otherwise, worsen the first caveat mentioned above, by generating more and more redundant copies of the same codes and data for the sake of keeping track of all minor stages of the development.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ambiguity in version differences&lt;/strong&gt;&lt;br /&gt;
 With this primitive method of project version control, it is not clear what the main differences between different versions of the project are, unless a very detailed documentation is provided along with each version detailing the differences between the current, its ancestor (i.e., the previous version of the project) and its descendant (i.e., the next version of the project), or parallel independent versions of the project (i.e., the project &lt;a href=&quot;https://en.wikipedia.org/wiki/Branching_(version_control)&quot; target=&quot;_blank&quot;&gt;branches&lt;/a&gt;).
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sharing and collaboration difficulties&lt;/strong&gt;&lt;br /&gt;
 Since the entire project is locally stored and accessible to one programmer or researcher, any collaborative effort will be extremely difficult, and require manual duplication and syncing of the project with other developers.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Potential risk of complete data loss:&lt;/strong&gt;&lt;br /&gt;
 Since the project is stored locally, on a single computer or storage device, there is always a high risk of losing the entire project due to hardware failure, or other unpredicted events.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fortunately, several smart powerful solutions and software have been developed, collectively known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control&quot; target=&quot;_blank&quot;&gt;Version Control System (VCS)&lt;/a&gt; for &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_configuration_management&quot; target=&quot;_blank&quot;&gt;project management&lt;/a&gt;, in particular, since the dawn of the new millennium.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;VCS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-version-control-system-vcs&quot;&gt;What is Version Control System (VCS)?&lt;/h2&gt;

&lt;p&gt;Version control is a system (e.g., software) that records changes to a file or set of files over time so that you can recall specific versions later.&lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
Depending on how the project is maintained and shared with others, VCS is classified into three categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Local VCS&lt;/strong&gt;&lt;br /&gt;
 The simplest form of project version control, and probably the oldest method is &lt;em&gt;local VCS&lt;/em&gt; where the VCS software keeps detailed track of the evolution of individual files in the project &lt;em&gt;only on a local storage device or computer&lt;/em&gt;. A prime example of such version control software is the GNU &lt;a href=&quot;https://www.gnu.org/software/rcs/&quot; target=&quot;_blank&quot;&gt;Revision Control System (RCS)&lt;/a&gt;. Such VCS is able to avoid problems 1-4 mentioned above. The following figure illustrates the inner workings of a local VCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/localVCS.png&quot; alt=&quot;Local Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Major Caveats:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;There is no easy way for collaboration and synchronization between team members.&lt;/li&gt;
      &lt;li&gt;There is a potential risk of complete data loss.&lt;br /&gt;
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Centralized VCS (CVCS)&lt;/strong&gt;&lt;br /&gt;
 Since collaborative effort is at the heart of almost every large-scale project, a new generation of VCS has been developed that go beyond the capabilities of local VCS. These VCS have a central repository that is accessible by all members of the project’s team. This central repository contains all of the project’s information and its development history and clients (team members) can check out and work on individual files of the project. For many years this style of VCS used to be the dominant method of software version control. Prime examples include &lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrent_Versions_System&quot; target=&quot;_blank&quot;&gt;Concurrent Versions System (CVS)&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perforce_Helix&quot; target=&quot;_blank&quot;&gt;Perforce Helix&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Subversion&quot; target=&quot;_blank&quot;&gt;Apache Subversion(SVN)&lt;/a&gt;. The following figure illustrates the inner workings of a CVCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/centralizedVCS.png&quot; alt=&quot;Centralized Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Major Caveats:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Since the main database of the project is centralized, and team members have only snapshots of a specific version of the project, any failure in the central database would halt the individual and the collaborative works of all team members as no further developments can be submitted to the central database.&lt;/li&gt;
      &lt;li&gt;Also, if the central database is completely corrupted with no backups, then the entire history of the project is lost.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Distributed VCS (DVCS)&lt;/strong&gt;&lt;br /&gt;
 In order to resolve the caveats of the aforementioned VCS, several new VCS, known as &lt;em&gt;distributed VCS&lt;/em&gt;, have been developed within the first decade of the new millennium. With these VCS, each client has an entire copy of the central database at their own local storage device. Thus, every &lt;strong&gt;clone&lt;/strong&gt; of the central repository that is with each client, is a full backup of all of the project’s data and history.  Consequently, if the central server/repository fails for any reason, the local repository of the team member that has the most recent clone of the project database, can be used to restore the central repository. &lt;strong&gt;This VCS paradigm is currently the most popular class of VCS&lt;/strong&gt;. We will be using a major implementation of it known as &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt; throughout this course. Other major DVCS implementations include &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Mercurial&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://bazaar.canonical.com/en/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bazaar&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&quot;http://darcs.net/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Darcs&lt;/strong&gt;&lt;/a&gt;. The following figure illustrates the inner working of a DVCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/distributedVCS.png&quot; alt=&quot;Distributed Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A rather complete list of all major VCS software implementations can be found &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_version_control_software&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;GM-VCS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitmercurial-version-control-system&quot;&gt;Git/Mercurial version control system&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is a DVCS that grew out of frustration between the Linux kernel developing community and a proprietary VCS software company that maintained and indexed Linux kernel development. Similar to another major DVCS implementation &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Mercurial&lt;/strong&gt;&lt;/a&gt;, Git is designed with the following goals in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Speed.&lt;/li&gt;
  &lt;li&gt;Simple design.&lt;/li&gt;
  &lt;li&gt;Strong support for non-linear development (thousands of parallel branches).&lt;/li&gt;
  &lt;li&gt;Fully distributed.&lt;/li&gt;
  &lt;li&gt;Able to handle large projects like the Linux kernel efficiently (speed and data size).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;GM-indexingMethod&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;gitmercurial-project-indexing-method&quot;&gt;Git/Mercurial project indexing method&lt;/h3&gt;

&lt;p&gt;VCS software, such as SVN and Bazaar, index the new developments of a given project by tracking the changes in individual files of the project, similar to the diagram below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/1/deltas.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        &lt;b&gt;File-based&lt;/b&gt; project indexing method that is common to some VCS software such as CVS, Subversion, Perforce, Bazaar. &lt;br /&gt;(&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;By contrast, both Git and Mercurial work by generating a complete snapshot of the project at any moment the project is committed to the local repository for the purpose of version control. Even if some files have not changed in the new version of the project, they will still exist in the newly generated version of the project. However, both Git and Mercurial have been designed smart enough to realize what changes have occurred to individual files and then store the files effectively, without redundancy.  The complete history of the project is constructed by the series of snapshots generated, a flow that is similar to the following illustration.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/1/snapshots.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        &lt;b&gt;Snapshot-based&lt;/b&gt; project indexing method that is used in Git and Mercurial VCS software. &lt;br /&gt;(&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&quot;gitAreas&quot;&gt;&lt;/a&gt;
Each project’s file in Git/Mercurial indexing process can have one of the three possible states:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;modified, but not staged:&lt;/strong&gt;
 This is when a project file is modified by the user, but Git/Mercurial has no track of the file changes at the moment. If the file is lost or removed unexpectedly, then Git cannot recover the file.
 &lt;br /&gt;&lt;br /&gt;
 &lt;a name=&quot;stagingArea&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;staged for commit to the repository:&lt;/strong&gt;
 When a file is modified it can be added to the Git staging area to be later &lt;em&gt;committed&lt;/em&gt; permanently to the repository. The staging area is a file, generally contained in the project’s repository (&lt;code&gt;.git&lt;/code&gt; directory), that stores information about what will go into the next &lt;em&gt;commit&lt;/em&gt; to the repository. The staging area is also sometimes referred to as the &lt;strong&gt;index&lt;/strong&gt;.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;committed to the repository:&lt;/strong&gt; Once the staged files are &lt;em&gt;committed&lt;/em&gt; to the repository, they become a permanent part of it and can be later extracted (i.e., checked out) for review or further development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These three file states comprise an important integral part of Git and Mercurial. The following figure provides an illustration of these three file states.
&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/1/gitAreas.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        A diagram illustrating the project-indexing process of Git and Mercurial VCS software. Each project file can reside in three different states: &lt;b&gt;working directory&lt;/b&gt;, &lt;b&gt;staging area&lt;/b&gt;, or in the &lt;b&gt;local repository&lt;/b&gt;. (&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&quot;remRepos&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;remote-repository-options-for-your-gitmercurial-projects&quot;&gt;Remote repository options for your Git/Mercurial projects&lt;/h3&gt;

&lt;p&gt;Git can be downloaded and installed from &lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Windows, Mac, or Linux systems. The installation guide is available &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Mercurial can be downloaded and installed from &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Windows, Mac, or other operating systems. For collaborative projects, you will need a central (remote) project-repository to which all team members submit their latest developments. &lt;strong&gt;Even if you are working on a project alone, it is always a good idea to submit all of your project developments to a remote repository for the sake of avoiding unpredicted data loss, also for publicly showcasing your work.&lt;/strong&gt; Three popular online repositories for version-controlled projects are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;, which is also an Internet hosting service, works exclusively for projects that are indexed using Git VCS. As of today, all public projects (visible to everyone on the web) on Github are free-of-charge. For private projects, you will have to pay a monthly fee. However, &lt;a href=&quot;https://github.com/blog/1900-the-best-developer-tools-now-free-for-students&quot; target=&quot;_blank&quot;&gt;Github Student&lt;/a&gt; offers a micro-account specially for students with five private repositories free-of-charge (normally $7/month) while you’re a student.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/a&gt;, which used to exclusively host Mercurial-indexed projects. But since 2011, it can also host Git-indexed projects. As of today, all projects, public or private (up to 5 users), can be stored on Bitbucket free-of-charge.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;GitLab&lt;/strong&gt;&lt;/a&gt;, is another rather-new  Git-repository manager that provides developer tools comparable wth GitHub, and even more. At the moment, it is not as popular as GitHub. However, it is used by many major companies and industries across the world for software version control (e.g., NASA, IBM, Boeing, CERN, Oracle, Sony, …).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GitHub and Bitbucket are particularly useful for education as they provide notable services and options for educational accounts and purposes. The following is a concise comparison between the general features and services of Github and Bitbucket.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Supported VCS&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Mercurial, Git&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Git&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Public repos&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free, unlimited&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free, unlimited&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Private repos&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free up to 5 users&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Starts at $7/month for unlimited users&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Popular projects hosted&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Adium, Mailchimp, Opera, Python, Django&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Bootstrap, Node.js, jQuery, Rails, Homebrew&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Notable Extra features&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;External authentication via Github, Twitter, Facebook, Google&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Two-factor authentication, Github Pages, Github Gists&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;gitProjectSetup&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-your-first-git-project-on-github&quot;&gt;Setting up your first Git project on Github&lt;/h2&gt;

&lt;p&gt;For this course, we will use Git as our version control software, and Github as our central (remote) repository. Follow the guidelines below to create your first Git project on Github.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://education.github.com/&quot; target=&quot;_blank&quot;&gt;Github Student&lt;/a&gt; and create your student account.&lt;/li&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt; on your computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;gitID&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;setting-up-your-git-identity&quot;&gt;Setting up your Git identity&lt;/h3&gt;

&lt;p&gt;The first thing you should do when you install Git is to set your user-name and email address. This is important because every Git commit uses this information, and this information is permanently baked into the &lt;em&gt;commits&lt;/em&gt; that will make to your projects’ repository. To set your name and email globally for all Git projects &lt;em&gt;once and for all&lt;/em&gt; on your computer, use the following Git commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git config --global user.name &quot;&amp;lt;your name, e.g., Amir Shahmoradi&amp;gt;&quot;
$ git config --global user.email &amp;lt;your email, e.g., shahmoradi@utexas.edu&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You need to do this only once if you pass the &lt;code&gt;--global&lt;/code&gt; option because then Git will always use the provided information for anything you do with Git on your system. Later on, if you want to override this information with a different name or email address for some specific projects, you can run the above same Git commands, but &lt;em&gt;without the &lt;code&gt;--global&lt;/code&gt; optional flag&lt;/em&gt;, only &lt;strong&gt;when you are in your specific project’s directory&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;gitInit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;two-methods-of-project-initialization&quot;&gt;Two methods of project initialization&lt;/h3&gt;

&lt;p&gt;Now at this point, there are two ways for project initialization. We will go through both here. A good detailed tutorial can be found &lt;a href=&quot;https://www.atlassian.com/git/tutorials/setting-up-a-repository&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;1-remote-project-initialization-on-github&quot;&gt;&lt;strong&gt;1. Remote project initialization (on Github)&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;With this method you first initialize an empty project on Github, and then clone the project from the remote (Github) repository to your local device, using the &lt;code&gt;git clone&lt;/code&gt; command, discussed later below. To create a remote repository on Github, login to your Github account and follow the instructions on &lt;a href=&quot;https://help.github.com/articles/create-a-repo/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;2-local-project-initialization&quot;&gt;&lt;strong&gt;2. Local project initialization&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Local project initialization is done by the following git command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command will initialize an empty repository in the current directory. If you check the directory containing your repository, you will notice that a new hidden  &lt;code&gt;.git&lt;/code&gt; folder has been added to the directory. This folder will contain all of the history of your new project. Anything in the directory where the hidden &lt;code&gt;.git&lt;/code&gt; folder exists will be indexed as part of the project.&lt;br /&gt;
In order to generate the project’s repository in a different directory, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init &amp;lt;directory name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Even if the requested directory does not exist, git will first automatically create the requested directory and initialize an empty project inside of it. That’s it! Now all you need to do is to start adding or developing your project files inside the project folder.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;lorcalRemoteConnection&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;local-device-and-remote-repository-ssh-connection&quot;&gt;Local device and remote repository SSH connection&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;Why is SSH needed?&lt;/strong&gt;&lt;br /&gt;
Now every time may you want to &lt;strong&gt;clone&lt;/strong&gt; your remote private repository to your local device or &lt;strong&gt;push&lt;/strong&gt; your local repository to a remote server (your Github account), or basically do any communication between the local and remote repositories, Git will ask you to authenticate your connection by supplying your Github username and password. Note that this security check is necessary since you don’t want just anyone to be able to push unwanted changes to your personal projects or mess with them without your prior permission.
However, this rather annoying user/pass request by Git can be resolved by setting up an &lt;strong&gt;SSH&lt;/strong&gt; secure connection between your local device and the remote repository.&lt;br /&gt;
SSH, also known as &lt;strong&gt;Secure Shell&lt;/strong&gt; or &lt;strong&gt;Secure Socket Shell&lt;/strong&gt;, is a network protocol that gives users a secure way to access a computer over an unsecured network. SSH may also refer to the suite of utilities that implement the SSH protocol.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;br /&gt;
Think of your local device as a person who has a set of keys. Now, if your remote repository is a home with an entrance keyhole that matches one of the person’s keys, then the person (i.e., your local device) can gain access to the interior of the home (i.e., your remote repository).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is it set up?&lt;/strong&gt;&lt;br /&gt;
You can generate keys for your local device by following the instructions given &lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Once you have generated the key and the keyhole, you can add a copy of the keyhole to your Github account by following the instructions given &lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example educational video, explaining the SSH key setup process:&lt;/p&gt;
&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/H5qNpRGB7Qw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;mainGitCommands&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;main-git-commands&quot;&gt;Main Git commands&lt;/h3&gt;

&lt;p&gt;As of today, Git has more than 150 commands. For a complete list, you can type the following on your &lt;em&gt;Git bash&lt;/em&gt; command window,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to see a list of all possible Git commands. Note that every Git command begins with &lt;code&gt;git&lt;/code&gt;. Despite the long list of Git commands, you will likely use only five of them on an everyday basis. Not that the rest are unimportant, but with these five basic commands you will be at least able to develop and index your project and communicate with your remote repository as well as your colleagues. In order to understand these five, we will have to recall the three states of a project’s files, described earlier &lt;a href=&quot;#gitAreas&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-status&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-check-the-status-of-the-project&quot;&gt;1. Check the status of the project&lt;/h4&gt;

&lt;p&gt;First of all, you can check the status of your git project at any time by typing the following command in the git-bash prompt window, assuming the command line is already on the project’s directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-add&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-add-files-to-the-staging-area&quot;&gt;2. Add files to the staging area&lt;/h4&gt;

&lt;p&gt;In order to add any of the modified or new files to the &lt;a href=&quot;#stagingArea&quot;&gt;staging area&lt;/a&gt;, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add &amp;lt;file name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To add all modified files (including file removals as well as changes) to the staging area, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add -A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command is equivalent to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add .
$ git add -u
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The first command stages the new and modified files, but not the deleted files. The second command stages the modified and deleted files, without the newly-created files.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git add&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-add&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-commit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-commit-the-staged-files-to-the-local-repository&quot;&gt;3. Commit the staged files to the local repository&lt;/h4&gt;

&lt;p&gt;The stages files can be committed (i.e., submitted permanently) to the local repository by&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
once this command is entered, a new page for &lt;em&gt;log message&lt;/em&gt; will open on the command line, which contains the list of all files to be committed, and a place at the top of the page to add comments regarding this version of files that are being committed to the repository. To add a comment, press &lt;code&gt;i&lt;/code&gt; to enter the &lt;em&gt;insert&lt;/em&gt; mode of the &lt;strong&gt;vim&lt;/strong&gt; text-editor. Once your comment is added to the text file, press &lt;code&gt;ESC&lt;/code&gt; button to exit the insert mode, and write &lt;code&gt;:wq&lt;/code&gt; on the command-line to &lt;strong&gt;w&lt;/strong&gt;rite the comment file (i.e., save it) and &lt;strong&gt;q&lt;/strong&gt;uit &lt;em&gt;vim&lt;/em&gt; text-editor.&lt;/p&gt;

&lt;p&gt;If you use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Both commands act as a shortcut to first automatically &lt;strong&gt;stage files&lt;/strong&gt; that have been &lt;strong&gt;modified and deleted&lt;/strong&gt; and then &lt;strong&gt;commit&lt;/strong&gt; them to the repository, but &lt;strong&gt;not the new files&lt;/strong&gt; that you have not yet told Git about. Another useful flag is &lt;code&gt;-m&lt;/code&gt; with which you can enter a short message on the command line as the log message of the commit, and therefore no new page will open up for entering log message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -m &quot;This is a test commit!&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;-m&lt;/code&gt; flags can be combined to automatically stage and commit the files together,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -am &quot;This is a test commit!&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;But, keep in mind that with this method of staging, the &lt;strong&gt;new files&lt;/strong&gt; will neither be staged nor committed to the repository.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git commit&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-commit&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-push&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-push-the-changes-in-local-repository-to-the-remote-repository&quot;&gt;4. Push the changes in local repository to the remote repository&lt;/h4&gt;

&lt;p&gt;Now, in order to &lt;em&gt;push&lt;/em&gt; all your commits from the local repository to the remote repository, in order to place permanently there and be able to share it with others, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git push --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
We have not yet talked about &lt;strong&gt;git branches&lt;/strong&gt;, but what the above command basically does is that it orders Git to &lt;strong&gt;push all branches of the project&lt;/strong&gt; to the remote repository. Later on, we will talk more about different flags that can follow &lt;code&gt;git push&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git push&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-push&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-pull&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-pull-the-latest-project-revision-from-the-remote-to-the-local-repository&quot;&gt;5. Pull the latest project revision from the remote to the local repository&lt;/h4&gt;

&lt;p&gt;Sometimes, your project collaborators might be working simultaneously but independently on the project. In such cases, whenever you want to restart your work on your project, you may want to first &lt;em&gt;pull&lt;/em&gt; the latest revision of the project – that is not available yet in your local repository – from the remote to your local repository. To do so, you can simply use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There are some important details about &lt;code&gt;git pull&lt;/code&gt; which we will delve into later on in the following sections.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git pull&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-pull&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-summary&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-commands-summary&quot;&gt;Git commands summary&lt;/h4&gt;
&lt;p&gt;All in all, the most trivial, but also the most useful git commands are the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
$ git add --all
$ git commit
$ git push --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
for submitting your changes to the local and remote repositories, and&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
for syncing your local with the remote repository. Remember that you have to use these commands, in the above forms, **inside the directory of the project **.&lt;/p&gt;

&lt;h2 id=&quot;getting-help-with-git-commands&quot;&gt;Getting help with Git commands&lt;/h2&gt;

&lt;p&gt;There are basically three ways to request information about Git commands on the Git-bash command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help &amp;lt;command name&amp;gt;
$ git &amp;lt;command name&amp;gt; --help
$ man git-&amp;lt;command name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the last command &lt;code&gt;man&lt;/code&gt; is not a Git command, but a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot; target=&quot;_blank&quot;&gt;Bash environment&lt;/a&gt; command. Just as a reminder, all Git commands begin with the word &lt;em&gt;git&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;viewing-the-git-commit-history&quot;&gt;Viewing the Git commit history&lt;/h2&gt;

&lt;p&gt;You can check the history of your project’s commits to the repository using the Git command &lt;code&gt;git log&lt;/code&gt;.
For example, here is a snippet from the output  of &lt;code&gt;git log&lt;/code&gt; on my laptop screen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  $ git log
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit

commit b6f4fb69d97a396bde7159c78424100704328634
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 21:03:28 2017 -0600

    *.txt files removed

commit 961ff2d4ac68081a21864b2f1b067b43424d3342
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 21:02:00 2017 -0600

    update

commit 8fd3c49e90d96f4bcef2302c7b227f06ad7a5250
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:36:45 2017 -0600

    minor

commit cd0ed7def385ba29ea134bcc18a4ad0873d9f5ee
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:32:51 2017 -0600

    minor

commit 8096668868ef64189f788669d5f1838cd944f9b6
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:28:22 2017 -0600

    minor

commit c52ba6adea474625cce1493896ecaac40cb976af
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:24:23 2017 -0600

    minor

commit ab5a17f9e913e55cae0f971fd9b485a0a6e8dec3
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:16:27 2017 -0600

    minor

commit ce5c2421db6e76a338a0e6922acead9100a7c4c4
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:10:19 2017 -0600

    minor

commit 4a7d27d81260c2e2a29b6259e6c97befc065c069
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:05:14 2017 -0600

:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There is a long list of options that can be used with &lt;code&gt;git log&lt;/code&gt; command to display exactly what you need on the Bash environment screen.
Some of the most useful options are discussed below.&lt;br /&gt;
To lists the differences between different commits of the same file, use &lt;code&gt;-p&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To list only a limited count of the most recent commits use &lt;code&gt;-&amp;lt;number of commits to display&amp;gt;&lt;/code&gt; flag. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -2
$ git log -2
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To list the statistics of the commits, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --stat -1
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

 README.md                |   1 +
 results/tables/README.md |   8 ++-
 results/tables/tgm.mat   | Bin 0 -&amp;gt; 2550889 bytes
 src/defineProject.m      |   3 +-
 src/main.m               |  82 +++++++++------------------
 src/writeTables.m        |  75 ++++++++++++++++++++++++
 9 files changed, 140 insertions(+), 56 deletions(-)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The log data can be even represented in formatted style via the flag &lt;code&gt;--pretty=format:&quot;&amp;lt;the desired format&amp;gt;&quot;&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -3 --pretty=format:&quot;%h - %an, %ar : %s&quot;
264043e - Amir Shahmoradi, 7 days ago : data tables for 1D model added.
b45ddd7 - Amir Shahmoradi, 7 days ago : minor edit
b6f4fb6 - Amir Shahmoradi, 3 weeks ago : *.txt files removed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A list of available format options is provided below.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 1: Some useful options for &lt;code&gt;git log --pretty=format:&quot;&amp;lt;options&amp;gt;&quot;&lt;/code&gt;. &lt;sup&gt;&lt;a href=&quot;#fn2&quot; id=&quot;ref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description of Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Commit hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated commit hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tree hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated tree hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Parent hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated parent hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%an&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ad&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author date (format respects the --date=option)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author date, relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer date, relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subject&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
A list of useful options for &lt;code&gt;git log&lt;/code&gt; is given in the table below.&lt;/p&gt;

&lt;table id=&quot;log_options&quot; class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;Table 2: Common flags for &lt;code&gt;git log&lt;/code&gt; command. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot; /&gt;
&lt;col style=&quot;width: 80%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the patch introduced with each commit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--stat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show statistics for files modified in each commit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--shortstat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display only the changed/insertions/deletions line from the --stat command.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the list of files modified after the commit information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the list of files affected with added/modified/deleted information as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show only the first few characters of the SHA-1 checksum instead of all 40.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--relative-date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display an ASCII graph of the branch and merge history beside the log output.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
A list of useful options for &lt;code&gt;git log&lt;/code&gt; commands that can change the format of the output, is given in the table below.&lt;/p&gt;

&lt;table id=&quot;limit_options&quot; class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;Table 3. Flags limiting the output of &lt;code&gt;git log&lt;/code&gt; command. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 66.6667%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&amp;lt;n&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show only the last n commits  (e.g., -2, -3, ...). &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--since&lt;/code&gt;, &lt;code&gt;--after&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limit the commits to those made after the specified date.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--until&lt;/code&gt;, &lt;code&gt;--before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limit the commits to those made before the specified date.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits in which the author entry matches the specified string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--committer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits in which the committer entry matches the specified string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits with a commit message containing the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits adding or removing code matching the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
For example, to list the commit history since a specific time in the past, use &lt;code&gt;--since&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --since=2.weeks
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or, with the following date format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --since=&quot;2017-01-15&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;undoing-amending-and-tagging&quot;&gt;Undoing, amending, and tagging&lt;/h2&gt;

&lt;p&gt;Suppose you want to undo the latest addition of files to the staging area of your Git repository. The command that you need to use to clean the stage area is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git reset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command is basically the opposite of &lt;code&gt;git add&lt;/code&gt;. There are a lot of options that can accompany this Git command, details of which can be found in &lt;a href=&quot;https://git-scm.com/docs/git-reset&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
However, &lt;strong&gt;be careful when using this command&lt;/strong&gt;, especially with flag &lt;code&gt;--hard&lt;/code&gt;, which can result in changes in your working directory as well, thus leading to &lt;strong&gt;involuntary loss of latest uncommitted files&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Another useful command is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which is used when you forget to add some files to your latest commit and now, you would like to add the latest content of your project’s staging area to the last commit, by &lt;em&gt;amending&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;The Git command &lt;code&gt;git tag&lt;/code&gt; allows you to tag specific important commits in your project’s commit history, for example, a final release of your project (e.g., software). If you just type &lt;code&gt;git tag&lt;/code&gt; on Git bash command line, it will list all tags in the project, &lt;strong&gt;in alphabetical order&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git tag
v1.0
v1.1
v2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can create a tag for the latest commit to your repository by using,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag -a v3.0 -m &quot;new version of the project&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will add a new tag pointing to the latest commit in the project with name &lt;code&gt;v3.0&lt;/code&gt; and the message &lt;em&gt;new version of the project&lt;/em&gt;.
Now if you want to display the information about a specific tag, use &lt;code&gt;git show&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git show v1.0
tag v1.0
Tagger: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 1 18:08:00 2017 -0600

first tag

commit 25129a074aece69d234838764e7df63ed1fb3023
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Fri Dec 27 17:12:08 2016 -0600

    Update README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also create a &lt;strong&gt;lightweight&lt;/strong&gt; tag by avoiding &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-m&lt;/code&gt; flags in your tag command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag v4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Annotated tags (created with &lt;code&gt;-a&lt;/code&gt; flag) are meant for very important project versions, such as a software release, while lightweight tags are meant for private or temporary object labels.&lt;br /&gt;
For more information about &lt;code&gt;git tag&lt;/code&gt;, see &lt;a href=&quot;https://git-scm.com/docs/git-tag&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;working-with-remote-repositories&quot;&gt;Working with remote Repositories&lt;/h2&gt;

&lt;p&gt;In order to see which remote servers you have configured for your project, you can run the following Git command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the output above, &lt;code&gt;origin&lt;/code&gt; is the default name that Git gives to the server from which you cloned your the project. If you also specify &lt;code&gt;-v&lt;/code&gt; flag, Git will show you the URLs that Git has stored corresponding to the remote’s short name (e.g., origin). This URL is used to read from or write to the remote repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote -v
origin  git@github.com:shahmoradi/foo.git (fetch)
origin  git@github.com:shahmoradi/foo.git (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In order to see more information about the remote repository of your project, you can use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote show origin
* remote origin
  Fetch URL: git@github.com:shahmoradi/foo.git
  Push  URL: git@github.com:shahmoradi/foo.git
  HEAD branch: master
  Remote branches:
    development tracked
    master      tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The above information indicates that the current HEAD branch of the project is on &lt;em&gt;master&lt;/em&gt; branch, and the remote branches on the remote repository are &lt;em&gt;master&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can find more information about &lt;code&gt;git remote&lt;/code&gt; command in &lt;a href=&quot;https://git-scm.com/docs/git-remote&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-branching&quot;&gt;Git branching&lt;/h2&gt;

&lt;p&gt;Branching is a powerful idea in the Version Control System which significantly facilitates collaboration or parallel development of a project. Suppose you have already a project which has reached its first release version, meaning that it works all fine. Now, you like to add a new feature to your project. To do this and to avoid further commits to your original project, you can create a new &lt;strong&gt;branch&lt;/strong&gt; of the project which is specifically devoted to adding the new feature. See the following figure, for an example of Git branching.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/lecture/1/branch-flowchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        An example illustration of Git branching for a project with three branches: master, development, topic.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When you create a Git project, the default single branch in your project is &lt;strong&gt;master&lt;/strong&gt;. So, for example, if you search for your project branches, you’d see,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you have already created other branches in your project, for example, &lt;strong&gt;development&lt;/strong&gt;, then you may see a Git message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* development
  master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;strong&gt;*&lt;/strong&gt; behind the branch name indicates that the &lt;strong&gt;project HEAD (i.e., your working directory)&lt;/strong&gt; points to that branch. This means that all commits will be made to that branch highlighted by &lt;strong&gt;*&lt;/strong&gt;. In the example above, the working directory points to the &lt;em&gt;development&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;In order to &lt;strong&gt;create a new branch&lt;/strong&gt; in your project, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When you create a new branch, Git creates an exact duplicate of the current branch that you are in, but with the requested name for the new branch. In order to &lt;strong&gt;switch to a specific Git branch&lt;/strong&gt; in your project, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout development
Switched to branch 'development'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A shortcut for &lt;strong&gt;both creating a new branch from the current branch, and switching to the new branch automatically&lt;/strong&gt; is to use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout -b &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout -b test
Switched to a new branch 'test'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose, you have made some significant progress on your project &lt;strong&gt;development&lt;/strong&gt; branch, and now you want to add the newly-developed feature in the development branch to your &lt;strong&gt;master&lt;/strong&gt; branch. All you need to do is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
$ git merge development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
By doing this, you first switch to master branch, then request Git to &lt;strong&gt;merge&lt;/strong&gt; all changes made to the project on the &lt;em&gt;development&lt;/em&gt; branch to be copied and transferred to the &lt;em&gt;master&lt;/em&gt; branch. For example, if I have added a single &lt;code&gt;test.txt&lt;/code&gt; file, and committed the change to the development branch, then upon merging it with the master branch, Git will display a message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Updating 25129a0..57ed7c2
Fast-forward
 test.txt | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose there was no change in the development branch ever since branching it from the master branch. Then upon merging, you would get a message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Already up-to-date.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Occasionally, conflicts may arise between branches upon merging. This happens when a common file between the two branches, has been modified on both branches in parallel. In such cases, you will need to resolve the conflict by choosing one of the file edits in one of the branches and discard the other. The following is an example merge conflict message by Git.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, if you use &lt;code&gt;git status&lt;/code&gt; command, the following is the typical message that will be displayed,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch test
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both modified:   test.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To resolve the conflict, open the conflicting file. There you will see segments of the file from both versions which are the cause of the conflict. Edit the file as you wish. and then perform the normal &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; on the file, to resolve the conflict and complete the merge process.&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;git merge&lt;/code&gt;, there is another more elegant and powerful Git command, &lt;code&gt;git rebase&lt;/code&gt; for integrating changes in different branches into a single branch. But, the subject goes beyond the goals of this class, and the interested reader is referred to &lt;a href=&quot;https://git-scm.com/docs/git-rebase&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt; for this command and &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&quot; target=&quot;_blank&quot;&gt;this pedagogical Git page&lt;/a&gt; for &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deleting-a-branch&quot;&gt;Deleting a branch&lt;/h3&gt;
&lt;p&gt;Normally, when a branch merge is done, the development branch is not needed anymore, so it is always wise and cleaner to delete the unwanted branches, using the command &lt;code&gt;git branch -d &amp;lt;branch name&amp;gt;&lt;/code&gt;. To do this, check out the same branch on which you just performed &lt;code&gt;git merge&lt;/code&gt;, then delete the other unwanted branch,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Your branch is ahead of 'origin/master' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)
Switched to branch 'master'
$ git branch -d test
Deleted branch hotfix (3a0874c).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Note that you cannot delete a branch while you are on it (i.e., while it is checked out)&lt;/strong&gt;. If you do so, Git will print out an error message like the following on screen,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;You cannot delete a branch from another branch with which you have not performed the merging either&lt;/strong&gt;. In this case, Git will print the following error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: The branch 'test' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Advice for good project management&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Your &lt;i&gt;master&lt;/i&gt; branch should always contain the latest clean version of your project, that is, the complete and working version/release. You should always make your new developments in a separate branch, and once it works and the new feature/development is complete, you merge the new development into the master branch.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Footnotes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;fn1&quot; style=&quot;font-size:1em&quot;&gt;
    1. For a thorough review of VCS and particularly Git, see the &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;. &lt;a href=&quot;#ref1&quot; title=&quot;Jump back to footnote 2 in the text.&quot;&gt;↩&lt;/a&gt;
&lt;/sup&gt;&lt;br /&gt;
&lt;sup id=&quot;fn2&quot; style=&quot;font-size:1em&quot;&gt;
    2. See &lt;a href=&quot;https://git-scm.com/docs/git-log&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt; for more details and updates. &lt;a href=&quot;#ref2&quot; title=&quot;Jump back to footnote 2 in the text.&quot;&gt;↩&lt;/a&gt;
&lt;/sup&gt;&lt;/p&gt;

&lt;!--
[^2]: &lt;span style=&quot;font-size:0.7em&quot;&gt;For a short history of Git see [Git history](https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git){:target=&quot;_blank&quot;}.&lt;/span&gt;
--&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1-version-control-system&quot;&gt;Lecture 1: A professional programmer uses Version Control System (VCS)&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 04, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Problems - Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/homework/1-problems-version-control-using-git-github"/>
  <id>http:/MAPCP2019U/homework/1-problems-version-control-using-git-github</id>
  <published>2019-06-04T00:00:00-05:00</published>
  <updated>2019-06-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: One week from the posting date @ 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;p&gt;First, use the following Markdown language references, or any other reference that you find or prefer, to design a Github-interpretable README file for each of folders in your project for this course, and a Github web-page for your project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet (pdf)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ghost.org/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown language reference (web)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot; target=&quot;_blank&quot;&gt;Adam Pritchard’s Markdown cheat-sheet (web)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write your code sections of your answer in Markdown syntax.
For example,&lt;br /&gt;
&lt;code&gt;
    ```bash  &lt;br /&gt;
    $ git branch -d test  &lt;br /&gt;
    error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'  &lt;br /&gt;
    ```
&lt;/code&gt;
&lt;br /&gt;
will display the following text highlighted as &lt;em&gt;bash&lt;/em&gt; code, in your &lt;em&gt;readme.md&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Include the following information with the following format and information in your main directory &lt;code&gt;readme.md&lt;/code&gt; file:&lt;/p&gt;

&lt;h2 id=&quot;beginning-of-the-readme-files-content&quot;&gt;&lt;em&gt;Beginning of the README file’s content&lt;/em&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mapcp2019u---introduction-to-computer-programming-summer-2019&quot;&gt;MAPCP2019U - Introduction to Computer Programming (Summer 2019)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Name:&lt;/strong&gt; &amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;br /&gt;
&lt;strong&gt;UTA EID:&lt;/strong&gt; &amp;lt;your UTA EID&amp;gt;&lt;br /&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &amp;lt;your email&amp;gt;&lt;br /&gt;
&lt;strong&gt;Department:&lt;/strong&gt; &lt;a href=&quot;https://www.uta.edu/physics/&quot;&gt;Department of Physics&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;University:&lt;/strong&gt; &lt;a href=&quot;https://www.utexas.edu/&quot;&gt;The University of Texas at Arlington&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Level:&lt;/strong&gt; graduate - &amp;lt;Freshman (1st year) / Sophomore (2nd year) / Junior (3rd year) / Senior (4th year) / Dinosaur (5th year and above) &amp;gt;&lt;br /&gt;
&lt;strong&gt;MAPCP-Class Title:&lt;/strong&gt; Student&lt;br /&gt;
&lt;strong&gt;Course Webpage:&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.orghttp:/MAPCP2019U/&quot;&gt;https://www.cdslab.orghttp:/MAPCP2019U/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Photo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http:/MAPCP2019U/images/AmirShahmoradi.png&quot; alt=&quot;Amir Shahmoradi&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-of-the-projects-content&quot;&gt;Description of the project’s content&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt; This repository contains my homework, quizzes, and virtually every effort that I have made for &lt;a href=&quot;https://www.cdslab.orghttp:/MAPCP2019U/&quot;&gt;MAPCP2019U class&lt;/a&gt;. The structure of the project is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#homework&quot;&gt;homework&lt;/a&gt;:&lt;/strong&gt; (the homework hyperlink should take the reader to the homework folder)&lt;br /&gt;
  This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#quiz&quot;&gt;quiz&lt;/a&gt;:&lt;/strong&gt; (the quiz hyperlink should take the reader to the quizzes folder)&lt;br /&gt;
  This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#exam&quot;&gt;exam&lt;/a&gt;:&lt;/strong&gt; (the exam hyperlink should take the reader to the exams folder)&lt;br /&gt;
  This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For questions and troubleshooting, please contact:&lt;/p&gt;

&lt;p&gt;&amp;lt;your name&amp;gt;&lt;br /&gt;
&amp;lt;your email&amp;gt;&lt;br /&gt;
&amp;lt;any other contact or signature information that you would like to add&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have not failed. I’ve just found 10,000 ways that won’t work.&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_Edison&quot; target=&quot;_blank&quot;&gt;Thomas A. Edison&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;end-of-the-readme-files-content&quot;&gt;&lt;em&gt;End of the README file’s content&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Create two additional test branches in your project, each of which is branched directly from &lt;em&gt;master&lt;/em&gt;. &lt;strong&gt;For each of the following cases, write the command and the corresponding output message of Git, in Markdown language in a &lt;code&gt;readme.md&lt;/code&gt; file inside your &lt;code&gt;homework/1/&lt;/code&gt; folder in your master branch&lt;/strong&gt;. If you don’t have this folder in your project, then create the folder and then place your initial &lt;code&gt;readme.md&lt;/code&gt; file in this folder with your signature as the content of the file. Then stage and commit this file together with homework-1 folder to your local repository. Throughout the rest of this homework, you will fill this &lt;code&gt;readme.md&lt;/code&gt; file with your answers.&lt;/p&gt;

&lt;p&gt;(A) Create two branches, &lt;strong&gt;both from your &lt;em&gt;master&lt;/em&gt; branch&lt;/strong&gt;, with names &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(B) Now checkout the &lt;em&gt;test1&lt;/em&gt; branch and create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(C) Inside &lt;code&gt;test.txt&lt;/code&gt; in &lt;em&gt;test1&lt;/em&gt; branch write this message: &lt;em&gt;This is some example text for branch test1&lt;/em&gt;, and save it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(D) Now stage and commit &lt;code&gt;test.txt&lt;/code&gt; file to branch &lt;em&gt;test1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(E) Checkout the branch &lt;em&gt;test2&lt;/em&gt;. Do you still see &lt;code&gt;test.txt&lt;/code&gt; that you just created in your &lt;code&gt;homework/1/&lt;/code&gt; directory? You can search for it by the &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;ls&lt;/code&gt;. Explain why you see/don’t see the file in your working directory anymore.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(F) Create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch as well, and add &lt;em&gt;This is some example text for branch test2&lt;/em&gt; to its content.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(G) Now try to checkout &lt;em&gt;test1&lt;/em&gt;. What error/warning message do you get? Fix the source of error and then checkout &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(H) Now merge the content of &lt;em&gt;test1&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. (Hint: Note from which branch you doing this merge!)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(I) Now what do you see as the content of &lt;em&gt;master&lt;/em&gt; branch? (Hint: Use &lt;code&gt;ls&lt;/code&gt; &lt;em&gt;bash&lt;/em&gt; command, to list the files in the working directory.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(J) Now merge the content of &lt;em&gt;test2&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. What error/warning message do you get? Why does this error arise?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(K) Now checkout &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(L) Run the Git command &lt;code&gt;git status&lt;/code&gt;. Why does such a conflict exist, as mentioned in &lt;code&gt;git status&lt;/code&gt; output?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(M) At this stage, you have two options: Either 1. stage and commit the combined conlifting &lt;code&gt;test.txt&lt;/code&gt; file to Git repository (but this is not recommended), or, 2. open the file &lt;code&gt;test.txt&lt;/code&gt; using &lt;em&gt;vim&lt;/em&gt; editor on the command line and reslve the conflict by editing the content of the file to only this sentence: &lt;em&gt;. Then save and quit *vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(N) Now, run &lt;code&gt;git status&lt;/code&gt;, then stage and commit your conflict-resolved file. Then checkout &lt;em&gt;test2&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(O) Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on branch &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(P) Now, switch back to &lt;em&gt;master&lt;/em&gt; branch. Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on &lt;em&gt;master&lt;/em&gt; branch. What message do you get from Git? List all the existing branches using &lt;code&gt;git branch&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(Q) Why is there such a difference in Git messages between when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;test2&lt;/em&gt; branch, and when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;master&lt;/em&gt; branch?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(R) Now checkout &lt;em&gt;test2&lt;/em&gt; branch. While on &lt;em&gt;test2&lt;/em&gt;, try to delete branch &lt;em&gt;test2&lt;/em&gt;. What error/message do you get?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(S) Switch back to &lt;em&gt;master&lt;/em&gt; and delete &lt;em&gt;test2&lt;/em&gt; branch. List all your project branches by the appropriate Git command.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(T) Stage and commit all the changes (including the file &lt;code&gt;test.txt&lt;/code&gt;) to your project’s &lt;em&gt;master&lt;/em&gt; branch. Now push it all to the remote repository by Wednesday Feb 15 2017, 9:00 a.m. CDT.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (Bonus, not mandatory) Design a simple Github page for your project, using the main directory’s &lt;code&gt;readme.md&lt;/code&gt; file. Submit the link to the page as your answer. Note that you don’t need to add anything extra to your readme file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; (Bonus, not mandatory) Create a website for your project, such that your project is accessible through its web address based on the content of your project’s website, not based on the content of &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/homework/1-problems-version-control-using-git-github&quot;&gt;Homework 1: Problems - Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 04, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 1: Assessing your programming knowledge and interests]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/announcement/1-assessing-your-programming-knowledge-and-interests"/>
  <id>http:/MAPCP2019U/announcement/1-assessing-your-programming-knowledge-and-interests</id>
  <published>2019-06-04T00:00:00-05:00</published>
  <updated>2019-06-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your prior programming experience and to identify the favorite programming language for this class, as well as the language that your advisor deems essential for your research. Ask Amir to send you a link to the survey if you have not already received it.&lt;/p&gt;

&lt;h2 id=&quot;survey-results-as-of-june-4-2019&quot;&gt;Survey results as of June 4, 2019&lt;/h2&gt;

&lt;p&gt;The following are the summaries of the responses to the survey questions. The total number of survey respondents is 10. It appears that at least half of the class, knows at least one programming language at some elementary level. Also it appears that almost everyone in this class is in love with Python!&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q2.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q3.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q4.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q5.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q6.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q7.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/announcement/1-assessing-your-programming-knowledge-and-interests&quot;&gt;Announcement 1: Assessing your programming knowledge and interests&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 04, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 0: Student-professor connection day]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/announcement/0-student-professor-connection-day"/>
  <id>http:/MAPCP2019U/announcement/0-student-professor-connection-day</id>
  <published>2019-06-04T00:00:00-05:00</published>
  <updated>2019-06-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;On the first day of our class, we will try to get to know each other and I will attempt to describe my research work and educational background for you, as well as what we should expect from this course. Then I will present the results of the survey that I sent out to you a week ago to assess your programming knowledge, your favorite programming language, and the programming language that you would need for your research. Based on the survey results and your feedback in class, we will decide on the choice of language and the design of this course.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;about-me-amir-the-instructor&quot;&gt;About me, Amir, the instructor&lt;/h2&gt;

&lt;p&gt;I am a physicist and researcher, and currently a faculty member at &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/physics/&quot;&gt;the Department of Physics&lt;/a&gt; as well as the Data Science Program in &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/science/index.php&quot;&gt;The College of Science&lt;/a&gt; at &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/&quot;&gt;The University of Texas at Arlington&lt;/a&gt;. You can find more information about me, our group, and our research at &lt;a target=&quot;_blank&quot; href=&quot;https://www.cdslab.org&quot;&gt;cdslab.org&lt;/a&gt;. Here is a summary of my life in a few pictures:&lt;/p&gt;

&lt;p&gt;I was introduced to the world of information and computer programming around 1991 by my father and elder brother. By the end of elementary school, I was so impressed with and knew enough about computer software to write a few simple &lt;a target=&quot;_blank&quot; href=&quot; https://en.wikipedia.org/wiki/PC_game&quot;&gt;computer games&lt;/a&gt; in &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/QBasic&quot;&gt;QBasic programming language&lt;/a&gt; on our first family personal computer, &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/IBM_386SLC&quot;&gt;IBM 386&lt;/a&gt;. Here is an example of how computer games looked liked 30 years ago.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4TSF5sIgorA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
		&lt;!-- &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; --&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/memoriesOfGreen.jpg&quot; width=&quot;100%&quot; /&gt;
        
        
            &lt;figcaption&gt;A portrait of me at high-school by my friends&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/EinsteinSandals.jpg&quot; width=&quot;100%&quot; /&gt;
        
        
            &lt;figcaption&gt;What I imagined I'd do as a physicist&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/PhDdefense.gif&quot; width=&quot;100%&quot; /&gt;
        
        
            &lt;figcaption&gt;A scene from my Ph.D. defense&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I never imagined a day I would use computer programming for scientific purposes. Nevertheless, there has been almost no single day that I have not used scientific programming for my work and research, ever since I entered graduate school.&lt;/p&gt;

&lt;h2 id=&quot;my-research-topics&quot;&gt;My research topics&lt;/h2&gt;

&lt;p&gt;The following are a few examples of what I do nowadays as part of my scientific research at UT Austin.&lt;/p&gt;

&lt;h3 id=&quot;theoretical-astrophysics&quot;&gt;Theoretical Astrophysics&lt;/h3&gt;

&lt;p&gt;While my current focus of research is mathematical modelling of tumor growth and Monte Carlo samplers, I am and have been working in multiple branches of science and engineering for several years, from the subatomic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Elementary_particle&quot;&gt;elementary particles&lt;/a&gt;, to the microscopic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Macromolecule&quot;&gt;biological macromolecules&lt;/a&gt;, to &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot;&gt;astrophysical phenomena&lt;/a&gt; occurring on the grandest scales of the &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Observable_universe&quot;&gt;observable Universe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For several years of my research, I have been working on understanding Gamma-Ray Bursts (GRB) and their physics. Below is a movie of the moment a Short-duration GRB is generated from the merger of a binary Neutron star system.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/astro_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;theoretical-biology-bioinformatics&quot;&gt;Theoretical Biology, Bioinformatics&lt;/h3&gt;

&lt;p&gt;I have also worked for a few years in the field of bioinformatics and evolutionary biology. The overarching goal in the field of protein bioinformatics and biophysics is to understand how proteins fold into their unique structure, and what determines the stability of the protein &lt;abbr title=&quot;3-Dimensional&quot;&gt;3D&lt;/abbr&gt; structure.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/bio_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/bio_2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the workhorses of this field, is therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Molecular_dynamics&quot; target=&quot;_blank&quot;&gt;molecular dynamic simulation&lt;/a&gt; to probe the dynamics of proteins and their interactions with other molecules. The following is a 1.5ns molecular dynamics simulation of Human Influenza H1 Hemagglutinin protein (&lt;a href=&quot;https://www.rcsb.org/pdb/explore.do?structureId=1rd8&quot; target=&quot;_blank&quot;&gt;1RD8&lt;/a&gt;, chains AB).&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;petroleum-engineering&quot;&gt;Petroleum Engineering&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/petro_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;computational-oncology&quot;&gt;Computational Oncology&lt;/h3&gt;

&lt;p&gt;What you see in the figures below, is a representation of the growth of Glioblastoma tumor cells in a Rat’s brain over time.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/onco_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/onco_2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/onco_3.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-temporal-evolution-of-the-growth-of-glioma-tumor-in-rat&quot;&gt;The temporal evolution of the growth of Glioma tumor in rat&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_1_t10.0.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/GBGlastLong.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_2_t12.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_3_t14.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_5_t16.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_6_t18.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_7_t20.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

--&gt;

&lt;h3 id=&quot;monte-carlo-simulation-and-integration-methods&quot;&gt;Monte Carlo Simulation and Integration Methods&lt;/h3&gt;

&lt;p&gt;One of the fields on which my research is currently focused, is developing Monte Carlo optimizer/sampler and integrator algorithms for Bayesian inverse problems.&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-sampling-algorithms&quot;&gt;Development of Monte Carlo sampling algorithms&lt;/h4&gt;

&lt;p&gt;Below you see example animations of two &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&quot; target=&quot;_blank&quot;&gt;Markov Chain Monte Carlo&lt;/a&gt; (MCMC) samplers, both of which sample a double Gaussian-peak function, but with different MCMC sampling parameters.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/PDF_RS_H_Forever20ms.gif&quot; width=&quot;100%&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of highly-efficiency, but bad-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/PDF_RS_L_Forever20ms.gif&quot; width=&quot;100%&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of low-efficiency, but good-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-integration-algorithms&quot;&gt;Development of Monte Carlo integration algorithms&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/DRI.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/DLI.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/GR3D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/GR2D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/GR2D.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/EB3D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/EB2D.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;biomedical-data-science&quot;&gt;Biomedical Data Science&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/PT509_ST9501_SE00144_ADC0016.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/PT509_ST9501_SE00144_ADC0016_overlay.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/announcement/0-student-professor-connection-day&quot;&gt;Announcement 0: Student-professor connection day&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 04, 2019.&lt;/p&gt;</content>
</entry>

</feed>
