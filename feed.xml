<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/MAPCP2019U/feed.xml" />
<link rel="alternate" type="text/html" href="http:/MAPCP2019U/" />
<updated>2019-08-08T10:39:56-05:00</updated>
<id>http:/MAPCP2019U/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/MAPCP2019U/</uri>
  <email>shahmoradi@utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Quiz 4: Converting Comma-Separated-Values (CSV) input to formatted output]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/quiz/4-io"/>
  <id>http:/MAPCP2019U/quiz/4-io</id>
  <published>2019-08-08T00:00:00-05:00</published>
  <updated>2019-08-08T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/4/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Consider this comma-separated data file: &lt;a href=&quot;4/data.in&quot; target=&quot;_blank&quot;&gt;data.in&lt;/a&gt;. Write a simple script named &lt;code&gt;csv2formatted&lt;/code&gt; that takes two input arguments representing the input and output file names. Then, the script writes the same input float data to the output file &lt;code&gt;data.out&lt;/code&gt; &lt;strong&gt;in a formatted style&lt;/strong&gt;, like this example output file: &lt;a href=&quot;4/outputter.out&quot; target=&quot;_blank&quot;&gt;example output file&lt;/a&gt;. Note that every numer in the output file has only three significant digits after the decimal point.&lt;/p&gt;

&lt;p&gt;Write your Python script in such a way that it takes the input and output file names from the Bash command line arguments, like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;python csv2formatted.py data.in dataPython.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write your MATLAB script as a function that takes the input and output file names as input arguments to a function named &lt;code&gt;csv2formatted&lt;/code&gt;, so that it can be called like the following from the MATLAB command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;csv2formatted('data.in','dataMATLAB.out')
&lt;/code&gt;&lt;/pre&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/quiz/4-io&quot;&gt;Quiz 4: Converting Comma-Separated-Values (CSV) input to formatted output&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on August 08, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 3: Branching, loops, functions]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/quiz/3-branching-loops-functions"/>
  <id>http:/MAPCP2019U/quiz/3-branching-loops-functions</id>
  <published>2019-07-23T00:00:00-05:00</published>
  <updated>2019-07-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/3/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; A Geometric Series is defined by the following mathematical sequence,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;1 + \frac{1}{2} + \frac{1}{4} + \frac{1}{8} + \frac{1}{16} + \ldots = \sum^{\infty}_{n=0} \frac{1}{2^n} ~,&lt;/script&gt;

&lt;p&gt;A finite version of this sequence can be defined as the following,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;1 + \frac{1}{2} + \frac{1}{4} + \frac{1}{8} + \frac{1}{16} + \ldots  + \frac{1}{2^m} = \sum^{m}_{n=0} \frac{1}{2^n} ~,&lt;/script&gt;

&lt;p&gt;a) Write a recursive function that takes an input integer &lt;code&gt;m&lt;/code&gt; and computes the finite Geometric sum as defined above.&lt;/p&gt;

&lt;p&gt;b) Write a non-recursive function, using loops, that takes an input integer &lt;code&gt;m&lt;/code&gt; and computes the finite Geometric sum as defined above.&lt;/p&gt;

&lt;p&gt;c) Write a third script, for example, named &lt;code&gt;benchmark&lt;/code&gt;, that measures the speed of the above two function implementations for some input test value of &lt;code&gt;m&lt;/code&gt;, and displays a message like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Recursive implementation is 0.76 as fast as the loop-based implementation of the function.  
&lt;/code&gt;&lt;/pre&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/quiz/3-branching-loops-functions&quot;&gt;Quiz 3: Branching, loops, functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on July 23, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 4: Exceptions, Errors, Vectorization, Visualization]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/homework/4-exceptions-errors-vectorization-visualization"/>
  <id>http:/MAPCP2019U/homework/4-exceptions-errors-vectorization-visualization</id>
  <published>2019-07-23T00:00:00-05:00</published>
  <updated>2019-07-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Two weeks from the posting date @ 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience with data transfer, exceptions and errors, vectorization, and visualization methods in Python and MATLAB. Write your scripts with the corresponding &lt;code&gt;*.py&lt;/code&gt; or &lt;code&gt;*.m&lt;/code&gt; file names, and add a readme.md file in HW 4 folder of your project if you need to add any additional explanation (Don’t forget to use markdown syntax highlight in your readme file, if needed).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.  Python.&lt;/strong&gt; Write a simple program named &lt;code&gt;sum.py&lt;/code&gt;, that takes in an arbitrary-size list of input floats from the command-line, and prints out the sum of them on the terminal with the following message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you will need to use the Python’s builtin function &lt;code&gt;sum()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.  Python.&lt;/strong&gt; Similar to the previous problem, write a simple program named &lt;code&gt;sum_via_eval.py&lt;/code&gt;, that takes in an arbitrary-size list of input numbers from the command-line, and prints out the sum of them on the terminal, this time using Python’s &lt;code&gt;eval&lt;/code&gt; function. The program output should look like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python sum.py 1 2 1 23
The sum of 1 2 1 23 is 27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.  Python.&lt;/strong&gt; Consider &lt;a href=&quot;http:/MAPCP2019U/homework/4-problems/1A2T_A.dssp&quot; target=&quot;_blank&quot;&gt;this data file&lt;/a&gt;. It contains information about the amino-acids in &lt;a href=&quot;http://www.rcsb.org/pdb/explore.do?structureId=1a2t&quot; target=&quot;_blank&quot;&gt;a protein&lt;/a&gt; called &lt;code&gt;1A2T&lt;/code&gt;. Each amino-acid in protein is labeled by a single letter. There are 20 amino-acid molecules in nature, and each has a total surface area (in units of Angstroms squared) that is given by the following table,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'A': 129.0
'R': 274.0
'N': 195.0
'D': 193.0
'C': 167.0
'Q': 225.0
'E': 223.0
'G': 104.0
'H': 224.0
'I': 197.0
'L': 201.0
'K': 236.0
'M': 224.0
'F': 240.0
'P': 159.0
'S': 155.0
'T': 172.0
'W': 285.0
'Y': 263.0
'V': 174.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, when these amino acids sit next to each other to form a chain protein, they cover parts of each other, such that only parts of their surfaces is exposed, while the rest is hidden from the outside world by other neighboring amino acids. Therefore, one would expect an amino acid that is at the core of a spherical protein would have almost zero exposed surface area.&lt;/p&gt;

&lt;p&gt;Now given the above information, write a Python program that takes in two command-line input arguments, one of which is a string containing the path to the above &lt;a href=&quot;http:/MAPCP2019U/homework/4-problems/1A2T_A.dssp&quot; target=&quot;_blank&quot;&gt;input file&lt;/a&gt; &lt;code&gt;1A2T_A.dssp&lt;/code&gt; which contains the partially exposed surface areas of amino acids in protein &lt;code&gt;1A2T&lt;/code&gt; for each of its amino acids, and a second command-line argument which is the path to the file containing output of the code (e.g., it could be &lt;code&gt;./readDSSP.out&lt;/code&gt;). Then,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;the code reads the content of this file, and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;extracts the names of the amino acids in this protein from the data column inside the file which has the header &lt;code&gt;AA&lt;/code&gt; (look at the line number 25 inside the input data file, below &lt;code&gt;AA&lt;/code&gt; is the column containing the one-letter names of amino acids in this protein), and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;also extracts the partially exposed surface area information for each of these amino acids which appear in the column with header &lt;code&gt;ACC&lt;/code&gt;, and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;then uses the above table of maximum surface area values to calculate the fractional exposed surface area of each amino acid in this protein (i.e., for each amino acid, fraction_of_exposed_surface = ACC / maximum_surface_area_from_table), and&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;finally for each amino acid in this protein, it prints the one-letter name of the amino acid, its corresponding partially exposed surface area (ACC from the input file), and its corresponding fractional exposed surface area (name it RSA) to the output file given by the user on the command line.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;On the first column of the output file, the code should also write the name of the protein (which is basically the name of the input file &lt;code&gt;1A2T_A&lt;/code&gt;) on each line of the output file. &lt;strong&gt;Note that your code should extract the protein name from the input filename&lt;/strong&gt; (by removing the file extension and other unnecessary information from the input command line string). &lt;a href=&quot;http:/MAPCP2019U/homework/4-problems/readDSSP.out&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; is an example output of the code.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Your code should also be able to handle an error resulting from less or more than 2 input command line arguments. That is, if the number of input arguments is 3 or 1, then it should input the following message on screen and stop.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./readDSSP.py ./1A2T_A.dssp


Usage:
      ./readDSSP.py &amp;lt;input dssp file&amp;gt; &amp;lt;output summary file&amp;gt;

Program aborted.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./readDSSP.py ./1A2T_A.dssp ./readDSSP.out amir


Usage:
      ./readDSSP.py &amp;lt;input dssp file&amp;gt; &amp;lt;output summary file&amp;gt;

Program aborted.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To achieve the above goal, you will have to create a dictionary from the above table, with amino acid names as the keys, and the maximum surface areas as the corresponding values. Name your code &lt;code&gt;readDSSP.py&lt;/code&gt; and submit it to your repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write your code in such a way that it checks for the existence of the output file&lt;/strong&gt;. If it already exists, then it does not remove the content of the file, whereas, it appends new data to the existing file. therwise, if the file does not exist, then it creates a new output file as requested by the user. To do so, you will need to use &lt;code&gt;os.path.isfile&lt;/code&gt; function from module &lt;code&gt;os&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ATTENTION&lt;/strong&gt;: Note that in some rows instead of a one-letter amino acid name, there is &lt;code&gt;!&lt;/code&gt;. In such cases, your code should be able to detect the abnormality and skip that row, because that row does not contain amino acid information.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.  MATLAB.&lt;/strong&gt; Solve the same problem as in 3, except that you don’t need to read the arguments (i.e., filenames) from the command line. Instead, implement your script as a MATLAB function.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.  Python.&lt;/strong&gt; Consider the simplest program for evaluating the formula $y(t) = v_0t-\frac{1}{2}gt^2$,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;v0 = 3; g = 9.81; t = 0.6
y = v0*t - 0.5*g*t**2
print(y)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(A) Write a program that takes in the above necessary input data ($t$,$v_0$) as command line arguments.&lt;br /&gt;
&lt;br /&gt;
(B) Extend your program from part (A) with exception handling such that missing command-line arguments are detected. For example, if the user has entered enough input arguments, then the code should raise &lt;code&gt;IndexError&lt;/code&gt; exception. In the &lt;code&gt;except IndexError&lt;/code&gt; block, the code should use the &lt;code&gt;input&lt;/code&gt; function to ask the user for the missing input data.&lt;br /&gt;
&lt;br /&gt;
(C) Add another exception handling block that tests if the $t$ value read from the command line, lies between $0$ and $2v_0/g$. If not, then it raises a &lt;code&gt;ValueError&lt;/code&gt; exception in the if block on the legal values of $t$, and notifes the user about the legal interval for $t$ in the exception message.&lt;/p&gt;

&lt;p&gt;Here are some example runs of the code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py
Both v0 and t must be supplied on the command line
v0 = ?
5
t = ?
4
Traceback (most recent call last):
  File &quot;./projectile.py&quot;, line 17, in &amp;lt;module&amp;gt;
    'must be between 0 and 2v0/g = {}'.format(t,2.0*v0/g))
ValueError: t = 4.0 is a non-physical value.
must be between 0 and 2v0/g = 1.019367991845056
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py
Both v0 and t must be supplied on the command line
v0 = ?
5
t = ?
0.5
y = 1.27375
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py 5 0.4
y = 1.2151999999999998
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./projectile.py 5 0.4 3
y = 1.2151999999999998
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.  Python.&lt;/strong&gt; Consider the function &lt;code&gt;Newton&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def Newton(f, dfdx, x, eps=1E-7, maxit=100):
    if not callable(f): raise TypeError( 'f is %s, should be function or class with __call__' % type(f) )
    if not callable(dfdx): raise TypeError( 'dfdx is %s, should be function or class with __call__' % type(dfdx) )
    if not isinstance(maxit, int): raise TypeError( 'maxit is %s, must be int' % type(maxit) )
    if maxit &amp;lt;= 0: raise ValueError( 'maxit=%d &amp;lt;= 0, must be &amp;gt; 0' % maxit )
    n = 0 # iteration counter
    while abs(f(x)) &amp;gt; eps and n &amp;lt; maxit:
        try:
            x = x - f(x)/float(dfdx(x))
        except ZeroDivisionError:
            raise ZeroDivisionError( 'dfdx(%g)=%g - cannot divide by zero' % (x, dfdx(x)) )
        n += 1
    return x, f(x), n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function is supposed to be able to handle exceptions such as divergent iterations, and division-by-zero. The latter error happens when &lt;code&gt;dfdx(x)=0&lt;/code&gt; in the above code. Write a test code that ensures the above code is able to correctly identify a division-by-zero exception and raise the correct assertionError.  &lt;br /&gt;
(&lt;em&gt;Hint: To do so, you need to consider a test mathematical function as input to &lt;code&gt;Newton&lt;/code&gt;. One example could be $f(x)=\cos(x)$ with a starting search value $x=0$. This would result in derivative value $f’(x=0)=-\sin(x=0)=0$, which should lead to a &lt;code&gt;ZeroDivisionError&lt;/code&gt; exception. Now, write a test function &lt;code&gt;test_Newton_div_by_zero&lt;/code&gt; that can explicitly handle this exception by introducing a boolean variable &lt;code&gt;success&lt;/code&gt; that is &lt;code&gt;True&lt;/code&gt; if the exception is raised and otherwise &lt;code&gt;False&lt;/code&gt;&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; &lt;strong&gt;Reading scientific data from web using Python/MATLAB&lt;/strong&gt;. Consider the following webpage address &lt;a href=&quot;https://www.cdslab.org/ICP2017F/homework/5-problems/swift/bat_time_table.html&quot; target=&quot;_blank&quot;&gt;https://www.cdslab.org/ICP2017F/homework/5-problems/swift/bat_time_table.html&lt;/a&gt;. This is an data table (in HTML language) containing data from &lt;a href=&quot;https://www.nasa.gov/mission_pages/swift/main&quot; target=&quot;_blank&quot;&gt;NASA’s Swift satellite&lt;/a&gt;. Each row in this table represents information about a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot; target=&quot;_blank&quot;&gt;Gamma-Ray Burst (GRB)&lt;/a&gt; detection that Swift has made in the past years. Now, corresponding to each of event IDs, there (might) exist files that contain some attributes of these events which we wish to plot and understand their behavior. For example, for the first event in this table, contains a data file which is hidden in a directory on this website &lt;a href=&quot;https://www.cdslab.org/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. For each event in this table, there is likely one such table hidden in this web directory.&lt;/p&gt;

&lt;p&gt;Our goal in this question is to fetch all these files from the website and save them locally in our own computer. Then read their contents one by one and plot the two columns of data in all of them together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write a script named &lt;code&gt;fetchDataFromWeb.*&lt;/code&gt; (with the star &lt;code&gt;*&lt;/code&gt; indicating the arbitrary choice of your own language) that uses this web address: &lt;a href=&quot;https://www.cdslab.org/ICP2017F/homework/5-problems/triggers.txt&quot; target=&quot;_blank&quot;&gt;https://www.cdslab.org/ICP2017F/homework/5-problems/triggers.txt&lt;/a&gt; to read a list of all GRB events and then writes the entire table of &lt;code&gt;triggers.txt&lt;/code&gt; to a local file with the same name on your device. For this purpose, you will need some built-in or library functionality to read the contents of a web page, such as &lt;code&gt;webread()&lt;/code&gt; in MATLAB or the package &lt;code&gt;urllib.request&lt;/code&gt; in Python (or some other libraries).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Now, add to your script another set of commands that uses the event IDs stored in this file, to generate the corresponding web addresses like: &lt;a href=&quot;https://www.cdslab.org/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;https://www.cdslab.org/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&lt;/a&gt;. Then it uses the generated web address to read the content of the page and store it in a local file on your device with the same name as it is stored on the webpage (for example, for the given webpage, the filename would be &lt;code&gt;GRB00745966_ep_flu.txt&lt;/code&gt;). &lt;strong&gt;Note:&lt;/strong&gt; Some of the web addresses for the given event IDs do not exist. Therefore, you should use an exception-handling construct such as MATLAB’s &lt;code&gt;try-catch&lt;/code&gt; or Python’s &lt;code&gt;try-except&lt;/code&gt; construct to avoid runtime errors in your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; Now write another script named &lt;code&gt;plotDatafromFile.m&lt;/code&gt;, that reads all of these files in your directory, one by one, and plots the content of all of them together, on a single scatter plot like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/4-problems/SwiftDataPlot.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; again that some the data files stored on your computer are empty and some others have useless data if data in the second column of the file is larger than 0. So you will have to write your script in such a way that it checks for non-emptiness of the file (that is, the file does indeed contain some numerical data) as well as the negativity of the values in the column of data in each file. For example, you could check for the negativity of the values in MATLAB using function &lt;code&gt;all(data[:,1]&amp;lt;0.0)&lt;/code&gt; assuming that data is the variable containing the information read from the file.&lt;/p&gt;

&lt;p&gt;Once you have done all these checks, you have to do one final manipulation of data, that is, the data in these files on the second column is actually the log of data, so have to get the &lt;code&gt;exp()&lt;/code&gt; value to plot it (because the plot in the figure above is a log-log plot and we want to exactly regenerate it). To do so in MATLAB, for example, you could simply use the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;data[:,2] = exp(data[:,2]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
as soon as you read from the file, and then finally you make a scatter plot of all data using MATLAB scatter plot. At the end, you will have to set a title for your plot as well and label the axes of the plot, and save your plot using MATLAB’s built-in function &lt;code&gt;saveas()&lt;/code&gt;. In order to find out how many files you have plotted in the figure, you will have to define a variable counter which increases by one unit, each time a new non-empty negative-second-column data file is read and plotted.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;Simulating a fun Monte Carlo game.&lt;/strong&gt; Suppose you’re on a game show, and you’re given the choice of three doors:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/4-problems/Monty_1.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Behind one door is a car; behind the two others, goats. You pick a door, say No. 1, and the host of the show opens another door, say No. 3, which has a goat.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/4-problems/Monty_open_door.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;He then says to you, “Do you want to pick door No. 2?”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question: What would you do?&lt;/strong&gt; Is it to your advantage to switch your choice from door 1 to door 2? Is it to your advantage, &lt;strong&gt;in the long run, for a large number of game tries&lt;/strong&gt;, to switch to the other door?&lt;/p&gt;

&lt;p&gt;Now whatever your answer is, I want you to check/prove your answer by a Monte Carlo simulation of this problem. Make a plot of your simulation for &lt;code&gt;nExperiments=100000&lt;/code&gt; repeat of this game, that shows, in the long run, on average, what is the probability of winning this game if you switch your choice, and what is the probability of winning, if you do not switch to the other door.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; I strongly urge you to attend the lectures this week in order to get help for this question.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; &lt;strong&gt;Monte Carlo approximation of the number $\pi$&lt;/strong&gt;. Suppose we did not know the value of $\pi$ and we wanted to estimate its value using Monte Carlo methods. One practical approach is to draw a square of unit side, with its diagonal opposite corners extending from the coordinates origin $(0,0)$ to $(1,1)$. Now we try to simulate uniform random points from inside of this square by generating uniform random points along the $X$ and $Y$ axes, i.e., by generating two random uniform numbers (x,y) from the range $[0,1]$.&lt;/p&gt;

&lt;p&gt;Now the generated random point $P$ has the coordinate $(x,y)$, so we can calculate its distance from the coordinate origin. Now suppose we also draw a quarter-circle inside of this square whose radius is unit and is centered at the origin $(0,0)$. The ratio of the area of this quarter-circle, $S_C$ to the area of the area of the square enclosing it, $S_S$ is,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{S_C}{S_S} = \frac{\frac{1}{4}\pi r^2}{r^2} = \frac{1}{4}\pi&lt;/script&gt;

&lt;p&gt;This is because the area of the square of unit sides, is just 1. Therefore, if we can somehow measure the area of the quarter $S_C$, then we can use the following equation, to get an estimate of $\pi$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi = 4S_C&lt;/script&gt;

&lt;p&gt;In order to obtain, $S_C$, we are going to throw random points in the square, just as described above, and then find the fraction of points, $f=n_C/n_{\rm total}$, that fall inside this quarter-circle. This fraction is related to the area of the circle and square by the following equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f=\frac{n_C}{n_{\rm total}} = \frac{S_C}{S_S}&lt;/script&gt;

&lt;p&gt;Therefore, one can obtain an estimate of $\pi$ using this fraction,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi \approx 4\frac{n_C}{n_{\rm total}}&lt;/script&gt;

&lt;p&gt;Now, write a MATLAB script, that takes in the number of points to be simulated, and then calculates an approximate value for $\pi$ based on the Monte Carlo algorithm described above.  Write a second function that plot the estimate of $\pi$ versus the number of points simulated, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/4-solutions/approximatePI.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. &lt;/strong&gt; &lt;strong&gt;Subplots in MATLAB.&lt;/strong&gt; Consider this MATLAB data file &lt;a href=&quot;http:/MAPCP2019U/homework/4-problems/data3D.mat&quot; target=&quot;_blank&quot;&gt;data3D.mat&lt;/a&gt; which contains a 3-dimensional $41\times 61\times 16$ matrix of the brain of a rat. Write a MATLAB script that  creates and saves a graph of all $X-Y$ information for the 16 slices along the z axis like the following.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/4-problems/subplots.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Start from this &lt;a href=&quot;http:/MAPCP2019U/homework/4-problems/hw6prob1.m&quot; target=&quot;_blank&quot;&gt;MATLAB script&lt;/a&gt; that I have written for you. Play with all the options to understand what they do and see their effects on the resulting plot. This script should generate the following figure for you.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/4-problems/currentPlot.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11.  MATLAB.&lt;/strong&gt; &lt;strong&gt;Getting the boundary of objects in images.&lt;/strong&gt;. Consider the same dataset as in the previous problem. Write a MATLAB script that delineates the boundary of the tumor in all of the subplots and generates a figure with the tumor boundary highlighted, like the following graph.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/4-problems/subplotsWithTumorBoundaries.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12.  MATLAB.&lt;/strong&gt; &lt;strong&gt;Regression: obtaining the most likely mean and standard deviation of a set of Standard Normally Distributed Random Variables.&lt;/strong&gt; Consider this dataset, &lt;a href=&quot;http:/MAPCP2019U/homework/4-problems/Drand.mat&quot; target=&quot;_blank&quot;&gt;Drand.mat&lt;/a&gt;, which contains a set of random numbers. Let’s make a hypothesis with regards to this dataset: We assume that this dataset is well fit by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian distribution&lt;/a&gt;. But, we don’t know the values of the two parameters (mean and standard deviation) of this Normal (Gaussian) distribution. Therefore, write a MATLAB script that constructs an objective function (similar to what we are planning to do for the mathematical modeling section of the project) and then uses MATLAB’s built-in function, &lt;code&gt;fminsearch()&lt;/code&gt;, to find the most likely values of the mean and standard deviation of this Gaussian distribution. Here is a best-fit Gaussian distribution using the most likely parameters to the histogram of this dataset.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/4-problems/histfit.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Hints:&lt;/strong&gt; Our hypothesis is that the data in this histogram comes from a standard Normal distribution with a fixed mean ($\mu$) and standard deviation ($\sigma$). For the moment, let’s assume that we know the values of these two parameters. Then if all of these points, $D$, come from the normal distribution with the given $(\mu,\sigma)$, then the probability of all them coming from the normal distribution with these parameter values can be computed as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi\big(\boldsymbol D\big|\mu,\sigma\big) = \prod^{N=100}_{i=1} \frac{1}{2\pi\sigma^2}\exp\bigg( -\bigg[ \frac{\boldsymbol D(i)-\mu}{\sqrt{2}\sigma} \bigg]^2 \bigg) ~~,&lt;/script&gt;

&lt;p&gt;where the symbol $\pi$ to the left of equality means &lt;strong&gt;probability&lt;/strong&gt; (but note that $\pi$ on the right hand side of the euqation stands for the number $\pi=3.14\ldots$, and $D(i)$ refers to the $i$th point in the sample of points. Since probabilities are always extremely small numbers, it is always good to work with their &lt;code&gt;log()&lt;/code&gt; values instead of their raw values (can you guess why?). Therefore, we could take the log of the above equation to write it as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\log\pi\big(\boldsymbol D\big|\mu,\sigma\big) = \sum^{N=100}_{i=1} - \log\big(2\pi\sigma^2\big) - \bigg[ \frac{\boldsymbol D(i)-\mu}{\sqrt{2}\sigma} \bigg]^2 ~~,&lt;/script&gt;

&lt;p&gt;Now our goad is to construct this function (let’s name it &lt;code&gt;getLogProbNorm()&lt;/code&gt;) and pass it to MATLAB’s built-in function &lt;code&gt;fminsearch()&lt;/code&gt; in order to find the most likely $(\mu,\sigma)$ that leads to the highest likelihood value (the maximum of the above equation). Here is one last tip: Note that &lt;code&gt;fminsearch()&lt;/code&gt; minimizes functions, but we want to maximize &lt;code&gt;getLogProbNorm()&lt;/code&gt;, instead of minimizing it. What change could you make to this function to make it work with &lt;code&gt;fminsearch()&lt;/code&gt;? Name your main script &lt;code&gt;findBestFitParameters.m&lt;/code&gt;. Now when you run your script it should call &lt;code&gt;fminsearch()&lt;/code&gt; and then output the best-fit parameters like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; findBestFitParameters
mu: -0.082001 , sigma: 1.0043
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Start your parameter search via &lt;code&gt;fminsearch()&lt;/code&gt; with the following values: $[\mu,\sigma] = [1,10]$.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/homework/4-exceptions-errors-vectorization-visualization&quot;&gt;Homework 4: Exceptions, Errors, Vectorization, Visualization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on July 23, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: Branching, looping, and functions]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/homework/3-branching-looping-functions"/>
  <id>http:/MAPCP2019U/homework/3-branching-looping-functions</id>
  <published>2019-07-11T00:00:00-05:00</published>
  <updated>2019-07-11T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: One week from the posting date @ 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience with branching, looping, and functions in both MATLAB and Python. Write your scripts with the corresponding &lt;code&gt;*.py&lt;/code&gt; or &lt;code&gt;*.m&lt;/code&gt; file names, and add a readme.md file in HW 3 folder of your project if you need to add any additional explanation (Don’t forget to use markdown syntax highlight in your readme file, if needed).&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/gradeDist/gradeHistHomework5.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, that are characterized by the fact that every number after the first two is the sum of the two preceding ones:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;0,~1,~1,~2,~3,~5,~8,~13,~21,~34,~55,~89,~144,~\dots&lt;/script&gt;

&lt;p&gt;with the following sequence equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
     Fib(n) &amp;=&amp; Fib(n-1) + Fib(n-2) ~, \\
     Fib(0) &amp;=&amp; 0 ~, \\
     Fib(1) &amp;=&amp; 1 ~.
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a Python function named &lt;code&gt;fib&lt;/code&gt; that takes in an input argument which should be integer number &lt;code&gt;n&lt;/code&gt;, and then calculates the $n^{th}$ number in the Fibonacci sequence and outputs it on the screen. Also, if the input argument is not a non-negative integer, it prints an error message on the screen and asks the user to re-enter a non-negative integer number. Also, when it is done with finding the requested Fibonacci number, it asks again the user to either input a new non-negative integer, or enter ‘stop’ to end the function, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; fib('amir')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The input argument amir is not a non-negative integer!
Please enter a non-negative integer: -123
The input argument -123 is not a non-negative integer!
Please enter a non-negative integer: 12.4
The input argument 12.4 is not a non-negative integer!
Please enter a non-negative integer: 0
Fib(0) = 0
Please enter another non-negative integer or type stop: 1
Fib(1) = 1
Please enter another non-negative integer or type stop: 2
Fib(2) = 1
Please enter another non-negative integer or type stop: 3
Fib(3) = 2
Please enter another non-negative integer or type stop: 4
Fib(4) = 3
Please enter another non-negative integer or type stop: 5
Fib(5) = 5
Please enter another non-negative integer or type stop: 6
Fib(6) = 8
Please enter another non-negative integer or type stop: 7
Fib(7) = 13
Please enter another non-negative integer or type stop: 8
Fib(8) = 21
Please enter another non-negative integer or type stop: 9
Fib(9) = 34
Please enter another non-negative integer or type stop: 10
Fib(10) = 55
Please enter another non-negative integer or type stop: 11
Fib(11) = 89
Please enter another non-negative integer or type stop: 12
Fib(12) = 144
Please enter another non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First write a function &lt;code&gt;fibo(n_int)&lt;/code&gt; that finds the requested Fibonacci number for you, given a non-negative integer input (for example, name it &lt;code&gt;n_int&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Then put this function &lt;strong&gt;inside another Python function &lt;code&gt;fib(n)&lt;/code&gt;&lt;/strong&gt; that checks the type of the input argument &lt;code&gt;n&lt;/code&gt; and prints the appropriate error message as in the above and then asks the user to enter another number (and then again checks for its type to be integer).&lt;/li&gt;
  &lt;li&gt;Then if this number is an integer, this function &lt;code&gt;fib(n)&lt;/code&gt; passes the integer number &lt;code&gt;n&lt;/code&gt; to the function &lt;code&gt;fibo(n_int)&lt;/code&gt; which is inside of itself (it is a &lt;strong&gt;nested function&lt;/strong&gt;), in order to get the requested Fibonacci number.&lt;/li&gt;
  &lt;li&gt;Finally, once the requested Fibonaccy number is obtained, it prints the number value with the requested format as in the above example, AND then asks again the user to input a new non-negative integer, or simply type &lt;code&gt;stop&lt;/code&gt; to stop the function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that, if you call the function as &lt;code&gt;fib('stop')&lt;/code&gt; in the Python interpreter, it should return nothing to you, just like the following example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;fib('stop')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I highly recommend you to write your function in Jupyter notebook, test it there, and then get the results for the same input arguments as in the above example (a string, negative integer, float, and n=1,…,12, and also ‘stop’) and download all of the notebook as a Markdown file, and put it in your repository folder for this homework. Name the notebook, &lt;code&gt;fib.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also note that, you don’t need to know or use anything beyond Python function syntax, Python built-in functions and methods (like &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;isdigit()&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;str()&lt;/code&gt;, &lt;code&gt;int()&lt;/code&gt;, …), and Python if-blocks.&lt;/p&gt;

&lt;blockquote&gt;
    I recommend you to use Jupyter notebook on your device, since the online version of notebook, can be interrupted repeatedly because of internet connection.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def fib(n):

    def fibo(n_int):
        if n_int==0: return 0
        elif n_int==1: return 1
        else:
            return fibo(n_int-1) + fibo(n_int-2)

    if n=='stop':
        return None
    elif str(n).isdigit():    # Make sure n is integer. Here is a bug: all positive numbers are assumed to not precede with + sign.
        n=int(n) 
        print('Fib({}) = {}'.format(n,fibo(n)))
        n = input(&quot;Please enter another integer or type stop: &quot;)  # Note that n is read as string!
        return fib(n)
    else: # the input is not an integer
        print( 'The input argument {} is not a non-negative integer!'.format(n) )    
        n = input(&quot;Please enter an integer: &quot;)  # Note that n is read as string!
        return fib(n)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an implementation in MATLAB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function fib()

    % get the input 
    n = input('Please enter a non-negative integer or type stop: ','s');
    if strcmp(n,'stop')
        return
    else
        n = str2double(n);
        if isreal(n) &amp;amp;&amp;amp; n&amp;gt;=0 &amp;amp;&amp;amp; round(n)==n
            disp( [ 'fib(' , num2str(n) , ') = ' , num2str(getFib(n)) ] );
            fib()
            return
        end
        disp('The input argument is not a non-negative integer!');
        fib()
    end

    function fib = getFib(n_int)
        if n_int == 0
            fib = 0;
        elseif n_int == 1
            fib = 1;
        else
            fib = getFib(n_int-1) + getFib(n_int-2);
        end
    end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Python.&lt;/strong&gt; Branching…, the Pythonic way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Change the &lt;strong&gt;first&lt;/strong&gt; if statement in the following script to an equivalent &lt;strong&gt;one-line&lt;/strong&gt; if-expression. Test the resulting new script, and make sure it behaves as the original,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the four-letter abbreviation for the National Aeronautics and Space Administration? &quot;)

answer_status = 'wrong'
if abbr == 'NASA':
    answer_status = 'correct'

if answer_status=='correct':
    print('Your answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Can you acheive the same goal as in &lt;strong&gt;(A)&lt;/strong&gt; without if-expression or block, but instead using only tuple notation? Explain why your solution works.&lt;/p&gt;

&lt;p&gt;Modify the if block and the print statements that are only in the last part of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if answer_status=='correct':
    print('Your answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to write a single-line Python statement that only uses &lt;code&gt;print&lt;/code&gt; and tuple or list notations, to perform the exact same task as the original print and if-block statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the four-letter abbreviation for the National Aeronautics and Space Administration? &quot;)

answer_status = 'correct' if abbr == 'NASA' else 'wrong'

if answer_status=='correct':
    print('Your answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the four-letter abbreviation for the National Aeronautics and Space Administration? &quot;)

answer_status = ('wrong','correct')[abbr=='NASA']

if answer_status=='correct':
    print('Your answer is correct!')
else:
    print(&quot;wrong buddy...try again&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python

abbr = input (&quot;What is the four-letter abbreviation for the National Aeronautics and Space Administration? &quot;)

answer_status = ('wrong','correct')[abbr=='NASA']

print( ('wrong buddy...try again','Your answer is correct!')[answer_status=='correct'] )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.  Python.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write a &lt;strong&gt;single-line&lt;/strong&gt; Python code that reads a string containing comma-separated first-name, last-name, and the city in which a person lives from the Python interpreter command line, and simultaneouly, in the same line of Python code, removes all white-space characters from the input string, and converts all letters of the input variables to lower-case, and converts the string to a tuple and saves in a tuple &lt;code&gt;(first,last,city)&lt;/code&gt;, such that, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Enter the first name, last name, and the city of the person (comma-separated): Amir, Shahmoradi  ,  Austin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would give,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(first,last,city)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;('amir', 'shahmoradi', 'austin')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Use &lt;code&gt;input&lt;/code&gt; function for this purpose. The output of &lt;code&gt;input&lt;/code&gt; is a string, which can be manipulated repeatedly on the same line, using multiple string methods that you learned about in the previous lectures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; As discussed in our lecture notes, the one-line if-expression syntax does not provide a functionality like &lt;code&gt;elif&lt;/code&gt; keyword as in the if-statement syntax. Our goal here is to learn how to convert a Python if-statement containing &lt;code&gt;elif&lt;/code&gt; to a one-line Python expression. Convert the following if-block to a single line if-expression. Modify the if-block inside the following function to one-line if-expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def dummy(i):
    if i==0:
        j=0
    elif i==1:
        j=1
    elif i==2:
        j=2
    else: j = 'j is not in [0,1,2]' 
    return j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(first,last,univ) = ((input('Enter the first name, last name, and the city of the person (comma-separated): ').replace(' ','')).lower()).split(',')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def dummy(i):
    j = 0 if i==0 else (1 if i==1 else (2 if i==2 else 'j is not in [0,1,2]') )
    return j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; 
An arbitrary triangle can be described by the coordinates of its three vertices: $(x1,y1),(x2,y2),(x3,y3)$, numbered in a counterclockwise direction. The area of the triangle is given by the formula,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \frac{1}{2} \bigg| x2y3 - x3y2 - x1y3 + x3y1 + x1y2 - x2y1 \bigg|&lt;/script&gt;

&lt;p&gt;Write a function &lt;code&gt;get_triangle_area(vertices)&lt;/code&gt; that returns the area of a triangle whose vertices are specified by the argument vertices, which is a nested list of the vertex coordinates. Test your implementation with the following test function, which also illustrates how the &lt;code&gt;get_triangle_area&lt;/code&gt; function works.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def test_get_triangle_area():
    &quot;&quot;&quot;
    Verify the area of a triangle with vertex coordinates
    (0,0), (1,0), and (0,2).
    &quot;&quot;&quot;
    v1 = (0,0); v2 = (1,0); v3 = (0,2)
    vertices = [v1, v2, v3]
    expected = 1
    computed = get_triangle_area(vertices)
    tol = 1E-14
    success = abs(expected - computed) &amp;lt; tol
    msg = 'computed area=%g != %g (expected)' % (computed, expected)
    assert success, msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is a Python implementation of the solution:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# getTriangleArea.py
def get_triangle_area(vert):
    area = 0.5 * abs(vert[1][0] * vert[2][1] - vert[2][0] * vert[1][1] -
                     vert[0][0] * vert[2][1] + vert[2][0] * vert[0][1] +
                     vert[0][0] * vert[1][1] - vert[1][0] * vert[0][1])
    return area
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a MATLAB implementation of the solution:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;% getTriangleArea.m
function area = getTriangleArea(vertices)
    area = 0.5 * abs( vertices{2}(1) * vertices{3}(2) ...
                    - vertices{3}(1) * vertices{2}(2) ...
                    - vertices{1}(1) * vertices{3}(2) ...
                    + vertices{3}(1) * vertices{1}(2) ...
                    + vertices{1}(1) * vertices{2}(2) ...
                    + vertices{2}(1) * vertices{1}(2) ...
                    )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Write a logical (boolean) function named &lt;code&gt;is_prime(n)&lt;/code&gt; that takes in an integer number &lt;code&gt;n&lt;/code&gt;, and finds whether it is a Prime number or not. Example output is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;is_prime(n=23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;is_prime(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you do not need and don’t have to use &lt;code&gt;for-loop&lt;/code&gt; for this problem (we have not yet discussed loops in our class!). All of it can be done using recursive function concept.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime(n):
    
    is_prime = True
    
    def is_divisible(n,divisor):
        if n&amp;lt;(divisor-1)*divisor: return False
        if n%divisor==0: return True
        else:
            divisor += 1
            return is_divisible(n,divisor)

    if is_divisible(n,divisor=2): is_prime=False
    return is_prime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an implementation in MATLAB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function outLogical = isPrime(n)

    divisor = 2;
    outLogical = true;
    sqrt_n = round(sqrt(n));
    outLogical = isDivisible(n,sqrt_n,divisor);

    function output = isDivisible(n,sqrt_n,divisor)
        if mod(n,divisor) == 0
            output = false;
        elseif sqrt_n&amp;lt;divisor
            output = true;
            return
        else
            divisor = divisor + 1;
            output = isDivisible(n,sqrt_n,divisor);
        end
    end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;MATLAB Function generators.&lt;/strong&gt; Write a nested function that evaluates a polynomial of the form $y = ax^2+bx+c$. The host function &lt;code&gt;genFunc()&lt;/code&gt; should be able to take varying number of arguments using &lt;code&gt;varargin&lt;/code&gt; with maximum of 3 arguments (&lt;code&gt;a,b,c&lt;/code&gt;) to initialize the coefficients of the polynomial. If there is only one argument, then &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; must be set to zero. If there are two input arguments, then &lt;code&gt;c&lt;/code&gt; is set to zero. If none are given on input, then the returned function should be zero. If more than 3 arguments exist, then the function should display an error and stop. Also, if the input arguments are not real numbers, then the function should return an error and stop.&lt;/p&gt;

&lt;p&gt;On output, the host function should create and return a function handle for the nested function &lt;code&gt;evalFunc()&lt;/code&gt;. The nested function should calculate a value of $y$ for a given value of $x$, using the values of $a$, $b$, and $c$ stored in the host function. This is called a &lt;strong&gt;function generator&lt;/strong&gt;, since the host function generates and outputs another function that can be called and used later on in the program. Once you create your function generator, test it in the following way: Call &lt;code&gt;genFunc(1,2,0)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h1&lt;/code&gt;. Call &lt;code&gt;genFunc(1,2)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h2&lt;/code&gt;. Then these two function handles, should give the same result, given the same input &lt;code&gt;x&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of the function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [outputQuadraticFuncHandle] = genFunc(varargin)

    switch nargin
        case 0
            a=0;
            b=0;
            c=0;
        case 1
            a=varargin{1};
            b=0;
            c=0;
        case 2
            a=varargin{1};
            b=varargin{2};
            c=0;
        case 3
            a=varargin{1};
            b=varargin{2};
            c=varargin{3};
        otherwise
            error('Too many arguments')   
    end

    function y = evalQuadFunc(x)
        y = a*x.^2 + b*x + c;
    end
    outputQuadFuncHandle = @evalQuadFunc;

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Consider the following nested list in Python,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or its equivalent in MATLAB,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;q = {{'a', 'b', 'c'}, {'d', 'e', 'f'}, {'g', 'h'}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write a for-loop that extracts all the letters in the list and finally prints them all as a single string,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is a solution in Python:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
s = ''
for i in q:
    for j in range(len(i)):
        s += i[j]
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;abcdefgh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt;  &lt;strong&gt;The significant impact of round-off errors in numerical computation.&lt;/strong&gt;  Consider the following program in Python,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import sqrt
for n in range(1, 60):
    r_org = 2.0
    r = r_org
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print ('With {} times sqrt and then {} times **2, the number {} becomes: {:.16f}'.format(n,n,r_org,r))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or its equivalent in MATLAB,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;formatSpec = 'With %d sqrt, then %d times ^2 operations, the number %.16f becomes: %.16f \n'; % the string format for fprintf function
for n = 1:60
    r_original = 2.0;
    r = r_original;
    for i = 1:n
        r = sqrt(r);
    end
    for i = 1:n
        r = r^2;
    end
    fprintf(formatSpec,n,n,r_original,r);
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explain what this code does. Then run the code, and explain why do you the behavior observed. In particular, why do you not recover the original value $2$ after many repetitions of the same forward and reverse task?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This code will yield the following output in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import sqrt
for n in range(1, 60):
    r_org = 2.0
    r = r_org
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print ('With {} times sqrt and then {} times **2, the number {} becomes: {:.16f}'.format(n,n,r_org,r))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;With 1 times sqrt and then 1 times **2, the number 2.0 becomes: 2.0000000000000004
With 2 times sqrt and then 2 times **2, the number 2.0 becomes: 1.9999999999999996
With 3 times sqrt and then 3 times **2, the number 2.0 becomes: 1.9999999999999996
With 4 times sqrt and then 4 times **2, the number 2.0 becomes: 1.9999999999999964
With 5 times sqrt and then 5 times **2, the number 2.0 becomes: 1.9999999999999964
With 6 times sqrt and then 6 times **2, the number 2.0 becomes: 1.9999999999999964
With 7 times sqrt and then 7 times **2, the number 2.0 becomes: 1.9999999999999714
With 8 times sqrt and then 8 times **2, the number 2.0 becomes: 2.0000000000000235
With 9 times sqrt and then 9 times **2, the number 2.0 becomes: 2.0000000000000235
With 10 times sqrt and then 10 times **2, the number 2.0 becomes: 2.0000000000000235
With 11 times sqrt and then 11 times **2, the number 2.0 becomes: 2.0000000000000235
With 12 times sqrt and then 12 times **2, the number 2.0 becomes: 1.9999999999991336
With 13 times sqrt and then 13 times **2, the number 2.0 becomes: 1.9999999999973292
With 14 times sqrt and then 14 times **2, the number 2.0 becomes: 1.9999999999973292
With 15 times sqrt and then 15 times **2, the number 2.0 becomes: 1.9999999999973292
With 16 times sqrt and then 16 times **2, the number 2.0 becomes: 2.0000000000117746
With 17 times sqrt and then 17 times **2, the number 2.0 becomes: 2.0000000000408580
With 18 times sqrt and then 18 times **2, the number 2.0 becomes: 2.0000000000408580
With 19 times sqrt and then 19 times **2, the number 2.0 becomes: 2.0000000001573586
With 20 times sqrt and then 20 times **2, the number 2.0 becomes: 2.0000000001573586
With 21 times sqrt and then 21 times **2, the number 2.0 becomes: 2.0000000001573586
With 22 times sqrt and then 22 times **2, the number 2.0 becomes: 2.0000000010885857
With 23 times sqrt and then 23 times **2, the number 2.0 becomes: 2.0000000029511749
With 24 times sqrt and then 24 times **2, the number 2.0 becomes: 2.0000000066771721
With 25 times sqrt and then 25 times **2, the number 2.0 becomes: 2.0000000066771721
With 26 times sqrt and then 26 times **2, the number 2.0 becomes: 1.9999999917775542
With 27 times sqrt and then 27 times **2, the number 2.0 becomes: 1.9999999917775542
With 28 times sqrt and then 28 times **2, the number 2.0 becomes: 1.9999999917775542
With 29 times sqrt and then 29 times **2, the number 2.0 becomes: 1.9999999917775542
With 30 times sqrt and then 30 times **2, the number 2.0 becomes: 1.9999999917775542
With 31 times sqrt and then 31 times **2, the number 2.0 becomes: 1.9999999917775542
With 32 times sqrt and then 32 times **2, the number 2.0 becomes: 1.9999990380770896
With 33 times sqrt and then 33 times **2, the number 2.0 becomes: 1.9999971307544144
With 34 times sqrt and then 34 times **2, the number 2.0 becomes: 1.9999971307544144
With 35 times sqrt and then 35 times **2, the number 2.0 becomes: 1.9999971307544144
With 36 times sqrt and then 36 times **2, the number 2.0 becomes: 1.9999971307544144
With 37 times sqrt and then 37 times **2, the number 2.0 becomes: 1.9999971307544144
With 38 times sqrt and then 38 times **2, the number 2.0 becomes: 1.9999360966436217
With 39 times sqrt and then 39 times **2, the number 2.0 becomes: 1.9999360966436217
With 40 times sqrt and then 40 times **2, the number 2.0 becomes: 1.9999360966436217
With 41 times sqrt and then 41 times **2, the number 2.0 becomes: 1.9994478907329654
With 42 times sqrt and then 42 times **2, the number 2.0 becomes: 1.9984718365144798
With 43 times sqrt and then 43 times **2, the number 2.0 becomes: 1.9965211562778555
With 44 times sqrt and then 44 times **2, the number 2.0 becomes: 1.9965211562778555
With 45 times sqrt and then 45 times **2, the number 2.0 becomes: 1.9887374575497223
With 46 times sqrt and then 46 times **2, the number 2.0 becomes: 1.9887374575497223
With 47 times sqrt and then 47 times **2, the number 2.0 becomes: 1.9887374575497223
With 48 times sqrt and then 48 times **2, the number 2.0 becomes: 1.9887374575497223
With 49 times sqrt and then 49 times **2, the number 2.0 becomes: 1.8682459487159784
With 50 times sqrt and then 50 times **2, the number 2.0 becomes: 1.6487212645509468
With 51 times sqrt and then 51 times **2, the number 2.0 becomes: 1.6487212645509468
With 52 times sqrt and then 52 times **2, the number 2.0 becomes: 1.0000000000000000
With 53 times sqrt and then 53 times **2, the number 2.0 becomes: 1.0000000000000000
With 54 times sqrt and then 54 times **2, the number 2.0 becomes: 1.0000000000000000
With 55 times sqrt and then 55 times **2, the number 2.0 becomes: 1.0000000000000000
With 56 times sqrt and then 56 times **2, the number 2.0 becomes: 1.0000000000000000
With 57 times sqrt and then 57 times **2, the number 2.0 becomes: 1.0000000000000000
With 58 times sqrt and then 58 times **2, the number 2.0 becomes: 1.0000000000000000
With 59 times sqrt and then 59 times **2, the number 2.0 becomes: 1.0000000000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this code will yield the following output in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;formatSpec = 'With %d sqrt, then %d times ^2 operations, the number %.16f becomes: %.16f \n'; % the string format for fprintf function
for n = 1:60
    r_original = 2.0;
    r = r_original;
    for i = 1:n
        r = sqrt(r);
    end
    for i = 1:n
        r = r^2;
    end
    fprintf(formatSpec,n,n,r_original,r);
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt; roundoff
With 1 sqrt, then 1 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000004 
With 2 sqrt, then 2 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999996 
With 3 sqrt, then 3 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999996 
With 4 sqrt, then 4 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 5 sqrt, then 5 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 6 sqrt, then 6 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 7 sqrt, then 7 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999714 
With 8 sqrt, then 8 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 9 sqrt, then 9 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 10 sqrt, then 10 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 11 sqrt, then 11 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 12 sqrt, then 12 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999991336 
With 13 sqrt, then 13 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 14 sqrt, then 14 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 15 sqrt, then 15 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 16 sqrt, then 16 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000117746 
With 17 sqrt, then 17 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000408580 
With 18 sqrt, then 18 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000408580 
With 19 sqrt, then 19 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 20 sqrt, then 20 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 21 sqrt, then 21 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 22 sqrt, then 22 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000010885857 
With 23 sqrt, then 23 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000029511749 
With 24 sqrt, then 24 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000066771721 
With 25 sqrt, then 25 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000066771721 
With 26 sqrt, then 26 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 27 sqrt, then 27 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 28 sqrt, then 28 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 29 sqrt, then 29 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 30 sqrt, then 30 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 31 sqrt, then 31 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 32 sqrt, then 32 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999990380770896 
With 33 sqrt, then 33 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 34 sqrt, then 34 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 35 sqrt, then 35 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 36 sqrt, then 36 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 37 sqrt, then 37 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 38 sqrt, then 38 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 39 sqrt, then 39 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 40 sqrt, then 40 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 41 sqrt, then 41 times ^2 operations, the number 2.0000000000000000 becomes: 1.9994478907329654 
With 42 sqrt, then 42 times ^2 operations, the number 2.0000000000000000 becomes: 1.9984718365144798 
With 43 sqrt, then 43 times ^2 operations, the number 2.0000000000000000 becomes: 1.9965211562778555 
With 44 sqrt, then 44 times ^2 operations, the number 2.0000000000000000 becomes: 1.9965211562778555 
With 45 sqrt, then 45 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 46 sqrt, then 46 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 47 sqrt, then 47 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 48 sqrt, then 48 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 49 sqrt, then 49 times ^2 operations, the number 2.0000000000000000 becomes: 1.8682459487159784 
With 50 sqrt, then 50 times ^2 operations, the number 2.0000000000000000 becomes: 1.6487212645509468 
With 51 sqrt, then 51 times ^2 operations, the number 2.0000000000000000 becomes: 1.6487212645509468 
With 52 sqrt, then 52 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 53 sqrt, then 53 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 54 sqrt, then 54 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 55 sqrt, then 55 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 56 sqrt, then 56 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 57 sqrt, then 57 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 58 sqrt, then 58 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 59 sqrt, then 59 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 60 sqrt, then 60 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is happening is that, 1 is returned for n &amp;gt;= 52 as square root of 2, that is, after 52 times square-root operation, the degree of accuracy required for representing the result goes beyond the degree of accuracy available in a MATLAB double precision number. Consequently, the later squaring operation on 1.00000000000000 will leave the number unchanged and therefore, 2 is not recovered.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; Consider the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;eps = 1.0
while 1.0 != 1.0 + eps:
    print ('...............', eps)
    eps /= 2.0
print ('final eps:', eps)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or its equivalent in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;eps = 1.0;
while 1.0 ~= 1.0 + eps
    disp(num2str(eps));
    eps = eps / 2.0;
end
disp(['final eps:', num2str(eps)]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 != 1.0 + eps&lt;/code&gt; be False?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is the output of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;............... 1.0
............... 0.5
............... 0.25
............... 0.125
............... 0.0625
............... 0.03125
............... 0.015625
............... 0.0078125
............... 0.00390625
............... 0.001953125
............... 0.0009765625
............... 0.00048828125
............... 0.000244140625
............... 0.0001220703125
............... 6.103515625e-05
............... 3.0517578125e-05
............... 1.52587890625e-05
............... 7.62939453125e-06
............... 3.814697265625e-06
............... 1.9073486328125e-06
............... 9.5367431640625e-07
............... 4.76837158203125e-07
............... 2.384185791015625e-07
............... 1.1920928955078125e-07
............... 5.960464477539063e-08
............... 2.9802322387695312e-08
............... 1.4901161193847656e-08
............... 7.450580596923828e-09
............... 3.725290298461914e-09
............... 1.862645149230957e-09
............... 9.313225746154785e-10
............... 4.656612873077393e-10
............... 2.3283064365386963e-10
............... 1.1641532182693481e-10
............... 5.820766091346741e-11
............... 2.9103830456733704e-11
............... 1.4551915228366852e-11
............... 7.275957614183426e-12
............... 3.637978807091713e-12
............... 1.8189894035458565e-12
............... 9.094947017729282e-13
............... 4.547473508864641e-13
............... 2.2737367544323206e-13
............... 1.1368683772161603e-13
............... 5.684341886080802e-14
............... 2.842170943040401e-14
............... 1.4210854715202004e-14
............... 7.105427357601002e-15
............... 3.552713678800501e-15
............... 1.7763568394002505e-15
............... 8.881784197001252e-16
............... 4.440892098500626e-16
............... 2.220446049250313e-16
final eps: 1.1102230246251565e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is happening is that after a certain number of divisions performed on the value of &lt;code&gt;eps&lt;/code&gt;, the value goes beyond the highest float precision representable by Python standard ($0.0000000000000001$), and therefore the value of &lt;code&gt;eps&lt;/code&gt; is eventually rounded to exact zero. The nonzero &lt;code&gt;eps&lt;/code&gt; value computed above is called &lt;strong&gt;machine epsilon&lt;/strong&gt; or &lt;strong&gt;machine zero&lt;/strong&gt; and is an important parameter to know, since it can lead to disasters in your very important complex calculations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10.  MATLAB.&lt;/strong&gt; Suppose you want to find the largest prime number that is smaller than a given input value by the user. Write a function named &lt;code&gt;getLargestPrime&lt;/code&gt; that does so, using for-loop, break, and MATLAB’s intrinsic function isprime(). Here is a test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getLargestPrime(123)
ans =
   113
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function integer = getLargestPrime(upper)
    if (upper&amp;lt;1)
        disp('input value cannot be less than 1. Goodbye!')
        return
    end
    for integer = upper:-1:1
        if isprime(integer)
            break
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11.  Python&lt;/strong&gt; Consider the following list,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;numbers = list(range(10))
print(numbers)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the following code, given the above list. Explain the weird behavior that you observe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;for n in numbers:
    i = len(numbers)//2
    del numbers[i]
    print ('n={}, del {}'.format(n,i), numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;numbers = list(range(10))
for n in numbers:
    i = len(numbers)//2
    del numbers[i]
    print ('n={}, del {}'.format(n,i), numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;n=0, del 5 [0, 1, 2, 3, 4, 6, 7, 8, 9]
n=1, del 4 [0, 1, 2, 3, 6, 7, 8, 9]
n=2, del 4 [0, 1, 2, 3, 7, 8, 9]
n=3, del 3 [0, 1, 2, 7, 8, 9]
n=8, del 3 [0, 1, 2, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is really happening is that the list over which we are looping changes its content because of the modifications during on the list in the for-loop. The message in this exercise is to &lt;strong&gt;never modify a list that you are looping over&lt;/strong&gt;. Modification is indeed technically possible, as shown above, but you really need to know what you are doing. Otherwise you will experience very strange program behavior.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12.  Python&lt;/strong&gt; Write a Python function that when executed, asks the user to enter an integer number, then the function count and outputs the number of prime numbers that are smaller than the given input integer number. Here is the answer to this question using only the knowledge of recursive functions and if-blocks,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime(n):
    
    is_prime = True
    
    def is_divisible(n,divisor):
        if n&amp;lt;(divisor-1)*divisor: return False
        if n%divisor==0: return True
        else:
            divisor += 1
            return is_divisible(n,divisor)

    if is_divisible(n,divisor=2): is_prime=False
    return is_prime

def get_primes(n):
    count = 0
    if n == 1:
        return count
    else:
        if is_prime(n):
            count = 1
        n -= 1
        return count + get_primes(n)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_primes(13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(A) Now rewrite &lt;code&gt;get_primes(n)&lt;/code&gt; and the other functions in the above code using for-loop this time. Name the new functions &lt;code&gt;get_prime_for(n)&lt;/code&gt; and &lt;code&gt;is_prime_for(n)&lt;/code&gt;, with &lt;em&gt;for&lt;/em&gt; in the names indicating that the functions now use for-loops.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def is_prime_for(x):
    if x &amp;gt; 1:
        n = x // 2
        for i in range(2, n + 1):
            if x % i == 0:
                return False
        return True
    else:
        return False

def get_primes_for(n):
    count = 0
    for i in range(2,n):
        if is_prime(i):
            count += 1
    return count
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;get_primes_for(13)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(B) Now compare the performance of the two functions &lt;code&gt;get_primes(n=500)&lt;/code&gt; and &lt;code&gt;get_primes_for(n500)&lt;/code&gt; using Jupyter’s or IPython’s &lt;code&gt;%timeit&lt;/code&gt; magic function. Which one is faster?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit get_primes(500)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1000 loops, best of 3: 1.32 ms per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;%timeit get_primes_for(500)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1000 loops, best of 3: 1.69 ms per loop  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interesting, recursive functions seem to be faster than Python for-loops!&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/homework/3-branching-looping-functions&quot;&gt;Homework 3: Branching, looping, and functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on July 11, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Final exam: semester project]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/exam/1-semester-project"/>
  <id>http:/MAPCP2019U/exam/1-semester-project</id>
  <published>2019-07-11T00:00:00-05:00</published>
  <updated>2019-07-11T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is page describes the final semester project that will serve as the final exam for this course. Please submit all your efforts for this project (all files, data and results) in &lt;code&gt;MAPCP2019U/exams/final/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by &lt;strong&gt;10:30 AM, August 8, 2019&lt;/strong&gt;.  &lt;strong&gt;Note: I strongly urge you to attend the future lectures until the end of the semester and seek help from the instructor (Amir) to tackle this project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inside the directory for the project (&lt;code&gt;MAPCP2019U/exams/final/&lt;/code&gt;) create three other folders: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; folder contains the &lt;a href=&quot;http:/MAPCP2019U/exam/1-problems/cells.mat&quot; target=&quot;_blank&quot;&gt;input data&lt;/a&gt; for this project. The &lt;code&gt;src&lt;/code&gt; folder should contain all your codes that you write for this project, and the &lt;code&gt;results&lt;/code&gt; folder should contain all the results generated by your code.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;data-reduction-and-visualization&quot;&gt;Data reduction and visualization&lt;/h2&gt;

&lt;p&gt;Our goal in this project is to fit a mathematical model of the growth of living cells to real experimental data for the growth of a cancer tumor in the brain of a rat. You can download the data in the form of a MATLAB data file for this project from &lt;a href=&quot;http:/MAPCP2019U/exam/1-problems/cells.mat&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Write a set of separate MATLAB/Python codes that perform the following tasks one after the other, and output all the results to the &lt;code&gt;results&lt;/code&gt; folder described above. Since you have multiple MATLAB/Python codes each in a separate file for different purposes, you should also write a &lt;code&gt;main&lt;/code&gt; MATLAB/Python code, such that when the user of your codes runs on MATLAB command line,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt; main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
then all the necessary MATLAB/Python codes to generate all the results will be called by this &lt;code&gt;main&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;Initially at time $t=0 ~\mathrm{[days]}$, $100,000\pm10,000$ brain tumor cells are injected to the brain of the rat. These cells are then allowed to grow for 10 days. Then starting at day 10, the brain of the rat is imaged using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnetic_resonance_imaging&quot; target=&quot;_blank&quot;&gt;MRI machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each image results in a 4-dimensional double-precision MATLAB matrix &lt;code&gt;cells(:,:,:,:)&lt;/code&gt;, corresponding to dimensions &lt;code&gt;cells(y,x,z,time)&lt;/code&gt;. This data is collected from MRI imaging of the rat’s brain almost every other day for a period of two weeks. For example, &lt;code&gt;cells(:,:,:,1)&lt;/code&gt; contains the number of cells at each point in space (y,x,z) at the first time point, or, &lt;code&gt;cells(:,:,10,1)&lt;/code&gt; represents a (XY) slice of MRI at $z=1$ and $t=1 [days]$.&lt;/p&gt;

&lt;p&gt;Therefore, the vector of times at which we have the number of tumor cells measured would be,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Time = [ 0, 10, 12, 14, 16, 18, 20, 22 ] ~,&lt;/script&gt;

&lt;p&gt;in units of days. Given this data set,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; First write a MATLAB/Python script that reads the input MATLAB binary file containing cell numbers at different positions in the rat’s brain measured by MRI, on different days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write MATLAB/Python codes that generate a set of figures as similar as possible to the following figures (specific color-codes of the curves and figures do not matter, focus more on the format of the plots and its parts). For this part of the project you will MATLAB plotting functions such as &lt;code&gt;plot()&lt;/code&gt;, &lt;code&gt;imagesc()&lt;/code&gt; and the concept subplots in MATLAB/Python.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;obtaining-the-error-in-tumor-cell-count&quot;&gt;Obtaining the error in tumor cell count&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Our assumption here is that the uncertainty in the total number of tumor cells at each time point is given by the number of tumor cells at the boundary of tumor. Therefore, you will have to write a MATLAB code that identifies the boundary of tumor at each time point and then sums over the count cells in all boundary points and uses that as the error in number of tumor cell counts. For this part, you will need MATLAB/Python functions such as &lt;code&gt;bwboundaries()&lt;/code&gt; and &lt;code&gt;errorbar()&lt;/code&gt;. In the end, you should get and save a figure in your project’s figure folder like the following figure,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/exam/1-problems/figures/growthCurve.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that this part of the project is completely independent of the modeling part described in the following section.&lt;/p&gt;

&lt;h2 id=&quot;the-mathematical-model-of-tumor-growth&quot;&gt;The mathematical model of tumor growth&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Now our goal is to fit the time evolution of the growth of this tumor, using a mathematical model. To do so, we need to find the best-fit parameters of the model. The mathematical model we will use here is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gompertz_function&quot; target=&quot;_blank&quot;&gt;Gompertzian growth model&lt;/a&gt;. Here, we will use a slightly modified for of the Gompertzian function of the following form,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N(t,\lambda,c) = N_0 \times \exp\bigg( \lambda~\bigg[ 1-\exp(-ct) \bigg] \bigg) ~,&lt;/script&gt;

&lt;p&gt;where $N(t,\lambda,c)$ is the &lt;strong&gt;predicted number&lt;/strong&gt; of tumor cells at time $t$, $N_0$ is the initial number of tumor cells at time $t=0$ days, $\lambda$ is the growth rate parameter of the model, and $c$ is just another parameter of the model. We already know the initial value of the number of tumor cells, $N_0=100,000\pm10,000$. Therefore, we can fix $N_0$ to $100,000$ in the equation of the model given above.&lt;/p&gt;

&lt;p&gt;However, we don’t know the values of the parameters $\lambda$ and $c$. Thus, we would like to find their best values given the input tumor cell data using some MATLAB/Python optimization algorithm.&lt;/p&gt;

&lt;p&gt;This Gompertzian growth model is called our &lt;strong&gt;physical model&lt;/strong&gt; for this problem, because it describes the physics of our problem (The physics/biology of the tumor growth).&lt;/p&gt;

&lt;h3 id=&quot;combining-the-physical-model-with-a-regression-model&quot;&gt;Combining the physical model with a regression model&lt;/h3&gt;

&lt;p&gt;Now, if our physical model was ideally perfect in describing the data, the curve of the model prediction would pass through all the points in the growth curve plot of the above figure, thus providing a prefect description of data. This is however, never the case, as it is famously said &lt;strong&gt;all models are wrong, but some are useful&lt;/strong&gt;. In other words, the model prediction never matches observation perfectly.&lt;/p&gt;

&lt;p&gt;Therefore, we have to seek for the parameter values that can bring the model prediction us as close as possible to data. To do so, we define a &lt;strong&gt;statistical model&lt;/strong&gt; in addition to the &lt;strong&gt;physical model&lt;/strong&gt; described above. In other words, we have to define a statistical regression model (the renowned &lt;strong&gt;least-squares method&lt;/strong&gt;) that gives us the probability $\pi(\log N_{obs}|\log N(t))$ of observing individual data points at each of the given times,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi(\log N_{obs} | \log N(t,\lambda,c),\sigma) = \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t)-\log N(t,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;Note that our statistical model given above is a Normal probability density function, with its mean parameter represented by &lt;strong&gt;the log&lt;/strong&gt; of the output of our physical model, $\log N(t,\lambda,c)$, and its standard deviation represented by $\sigma$, which is unknown, and we seek to find it. The symbol $\pi$, whenever it appears with parentheses, like $\pi()$, it means probability of the entity inside the parentheses. However, whenever it appears alone, it means the famous number PI, $\pi\approx 3.1415$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we use the logarithm of the number of cells instead of using the number of cells directly?&lt;/strong&gt; The reason behind it is slightly complicated. A simple (but not entirely correct argument) is the following: We do so, because the tumor cell counts at later times become extremely large numbers, on the order of several million cells (For example, look at the number of cells in the late stages of the tumor growth, around $t=20$ days). Therefore, to make sure that we don’t hit any numerical precision limits of the computer when dealing with such huge numbers, we work with the logarithm of the number of tumor cells instead of their true non-logarithmic values.&lt;/p&gt;

&lt;p&gt;We have seven data points, so the overall probability of observing all of data $\mathcal{D}$ together (the time vector and the logarithm of the number of cells at different times) given the parameters of the model, $\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$, is the product of their individual probabilities of observations given by the above equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\mathcal{L}(\mathcal{D}|\lambda,c,\sigma) 
&amp;= \prod_{i=1}^{n=8} \pi(\log N_{obs}(t_i) | \log N(t_i,\lambda,c),\sigma) \\\\
&amp;= \prod_{i=1}^{n=8} \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i)-\log N(t_i,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Frequently however, you would want to work with $\log\mathcal{L}$ instead of $\mathcal{L}$. This is again because the numbers involved are extremely small often below the precision limits of the computer. So, by taking the logarithm of the numbers, we work instead with number’s exponent, which looks just like a normal number (not so big, not so small). So, by taking the log, the above equation becomes,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    \log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)
    &amp;= \sum_{i=1}^{n=8} \log \pi( \log N_{obs}(t_i) | \log N(t_i,\lambda,c),\sigma) \\\\
    &amp;= \sum_{i=1}^{n=8} \log \bigg[ \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i) - \log N(t_i,\lambda,c) \big]^2}{2\sigma^2} \bigg) \bigg] ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;
Now the goal is to use an optimization algorithm in MATLAB/Python, such as &lt;code&gt;fminsearch()&lt;/code&gt;, to find the most likely set of the parameters of the model $\lambda,c,\sigma$ that give the highest likelihood of obtaining the available data, which is given by the number $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$ from the above equation. So we want to find the set of parameters for which this number given by the above equation is maximized. You can also use any MATLAB/Python optimization function or method that you wish, to obtain the best parameters.&lt;/p&gt;

&lt;p&gt;However, if you use &lt;code&gt;fminsearch()&lt;/code&gt;, then note that this function finds the minimum of an input function, not the maximum. What we want is to find the maximum of $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$.
What is the solution then? Very simple.
We can multiply the value of $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$ by a negative, so that the maximum value is converted to minimum. But, note that the position (the set of parameter values) at which this minimum occurs, will remain the same as the maximum position for $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$.&lt;/p&gt;

&lt;p&gt;So, now rewrite your likelihood function above by multiplying its final result (which is just number) by a negative sign. Then you pass this modified function to &lt;code&gt;fminsearch()&lt;/code&gt; and you find the optimal parameters. Note that &lt;code&gt;fminsearch()&lt;/code&gt; takes as input also a set of initial staring parameter values to initiate the search for the optimal parameters. You can use $(\lambda,c,\sigma) = [10,0.1,1]$ as your starting point given to &lt;code&gt;fminsearch()&lt;/code&gt; to search for the optimal values of the parameters.&lt;/p&gt;

&lt;p&gt;Then redraw the above tumor evolution curve and show the result from the model prediction as well, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/exam/1-problems/figures/growthCurveFit.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Report also your best fit parameters in a file and submit them with all the figures and your codes to your exam folder repository.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/exam/1-semester-project&quot;&gt;Final exam: semester project&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on July 11, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Value, variables, types]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/quiz/2-values-variables-types"/>
  <id>http:/MAPCP2019U/quiz/2-values-variables-types</id>
  <published>2019-06-26T00:00:00-05:00</published>
  <updated>2019-06-26T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of values and variables. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/2/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Name three different levels of the computer memory.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Register (L1 Cache), L2 Cache, L3 Cache, RAM (Random-Access Memory), HDD (Hard Drive Disk).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Suppose that you have a matrix of rank 2 to store in the computer memory. How would each one of the following languages store this matrix (column-wise vs. row-wise):&lt;br /&gt;
b) C&lt;br /&gt;
a) Fortran&lt;br /&gt;
c) MATLAB&lt;br /&gt;
d) Python&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;  &lt;br /&gt;
a) row-wise&lt;br /&gt;
b) column-wise&lt;br /&gt;
c) column-wise&lt;br /&gt;
d) row-wise&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three fundamental components of a Turing-complete language?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;a way for accessing the memory&lt;/li&gt;
      &lt;li&gt;a way for iteration&lt;/li&gt;
      &lt;li&gt;a way for branching&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three common types of errors in computer programs?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;syntax errors&lt;/li&gt;
      &lt;li&gt;runtime errors&lt;/li&gt;
      &lt;li&gt;semantic errors&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Suppose you write a program that has memory leak. What type of programming error you dealing with?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; runtime error&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the biggest integer (in base 10) that you could store in an &lt;code&gt;int32&lt;/code&gt; type?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; 2,147,483,647&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the difference between &lt;code&gt;int16&lt;/code&gt; and &lt;code&gt;uint64&lt;/code&gt; types (two major differences is enough)?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1) &lt;code&gt;int16&lt;/code&gt; is only 16 bits storage, whereas &lt;code&gt;uint64&lt;/code&gt; is 64 bits storage.&lt;br /&gt;
2) &lt;code&gt;int16&lt;/code&gt; is a signed integer storage meaning that one bit is reserved for the integer’s sign representation, whereas &lt;code&gt;uint64&lt;/code&gt; can only represent positive integers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/quiz/2-values-variables-types&quot;&gt;Quiz 2: Value, variables, types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 26, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Version control system]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/quiz/1-version-control-system"/>
  <id>http:/MAPCP2019U/quiz/1-version-control-system</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/MAPCP2019U/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Version Control System. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/1/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
 &lt;br /&gt;
 (A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
 (B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
 (C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
 (D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
 (E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
 (F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
 (G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
 (H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
 (I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
 (J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer: A, D, G, F, I&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
 &lt;br /&gt;
 (A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
 (B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
 (C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer: B, C&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write down the Git command that lists all Git commands for you.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; $ git help -a
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;/p&gt;

    &lt;p&gt;(B) Does it need interpretation in order to become machine-comprehensible?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Yes. An &lt;em&gt;Assembler&lt;/em&gt; interprets the program for the machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name the oldest high-level programming language that is still in active daily use.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;/p&gt;

    &lt;p&gt;(B) Approximately how many decades is it old? ($\pm15$ years is acceptable answer. the decade it was created is also an acceptable answer)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
in 1950s&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name a second-generation programming language.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;/p&gt;

    &lt;p&gt;(B) Which language-generation are Fortran, C, C++, MATLAB, Python, R?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
third, third, third, fourth, fourth, fourth&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In what decades C, C++, and MATLAB/Python were created, respectively?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1970s, 1980s, 1980s, 1990s&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name an ancestor programming language of C.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
B&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of C++.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
C, Simula&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of MATLAB/Python.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran/C&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How would you distinguish exponential behavior vs. power-law behavior (relationship) in a 2-dimensional plot?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An exponential curve looks like a line only when the X-axis is plotted on log-scale.&lt;br /&gt;
A power-law curve looks like a line only when both the X- and Y- axes are plotted on log-scale.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/quiz/1-version-control-system&quot;&gt;Quiz 1: Version control system&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Variables, Values, and Types]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/homework/2-variables-values-types"/>
  <id>http:/MAPCP2019U/homework/2-variables-values-types</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Thursday 27 @ 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience with values, variables, types, and assignments in programming.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Type the following in the command window and submit the results. Briefly explain what each assignment does.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = 1
b = 'x'
c = true
whos a b c
a == c
a + c
d = [1 2 3 4]
e = ['a' 'b' 'c' 'd']
f = ['a','b','c','d']
g = ['abcd']
h = {‘a’ ‘b’ ‘c’ ‘d’}
i = { a b c d}
whos d e f g h i
class(a)
type(a)
True
true
False
false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
In MATLAB:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = 1                   % assigns value 1 to a
b = 'x'                 % assigns character 'x' to b
c = true                % assigns logical value true to variable c
whos a b c              % prints a description of the variables a b c
a == c                  % evaluates whether a euqals b
a + c                   % returns sum of a and c
d = [1 2 3 4]           % creates a real array
e = ['a' 'b' 'c' 'd']   % creates a string 'abcd'
f = {'a','b','c','d'}   % creates a cell array of the input 4 characters
g = ['abcd']            % creates a string 'abcd'
h = {‘a’ ‘b’ ‘c’ ‘d’}   % syntax error due to use of undefined characters ‘ and ’
i = { a b c d}          % creates a cell array from the four input variables
whos d e f g h i        % prints a description of the variables d e f g h i
class(a)                % returns the type of the variable a
type(a)                 % syntax error: input arguments to type() must be character vectors or strings
True                    % syntax error: undefined variable
true                    % logical value true in MATLAB
False                   % syntax error: undefined variable
false                   % logical value false in MATLAB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Python, a lot of the above commands would yield syntax errors, however, many of them can be easily fixed with minor tweaks.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Integer_overflow&quot; target=&quot;blank&quot;&gt;Overflow&lt;/a&gt;.&lt;/strong&gt; What would happen if you went beyond the range for a particular type? For example, the largest integer that can be stored in &lt;strong&gt;int8&lt;/strong&gt; is 127, and the smallest integer is -128, so what would happen if we type cast a larger integer to the type &lt;strong&gt;int8&lt;/strong&gt;? Smaller integer? Use the MATLAB built-in functions &lt;code&gt;intmin&lt;/code&gt; and &lt;code&gt;intmax&lt;/code&gt; or Python’s numpy package command &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.iinfo.html&quot; target=&quot;blank&quot;&gt;&lt;code&gt;iinfo&lt;/code&gt;&lt;/a&gt; to find the largest and smallest integers that can be stored in &lt;strong&gt;int16&lt;/strong&gt; and &lt;strong&gt;int32&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The resulting behavior is language-dependent. In MATLAB, the overflow and underflow as of today freeze to the largest or smallest possible values that could be represented by that variable type. In python, it leads to rollover or perhaps random value assignments to the variable. Here is the results in MATLAB:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int8(200)
ans =
  int8
   127
&amp;gt;&amp;gt; int8(-150)
ans =
  int8
   -128
&amp;gt;&amp;gt; intmax('int16')
ans =
  int16
   32767
&amp;gt;&amp;gt; intmin('int16')
ans =
  int16
   -32768
&amp;gt;&amp;gt; intmax('int32')
ans =
  int32
   2147483647
&amp;gt;&amp;gt; intmin('int32')
ans =
  int32
   -2147483648
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations&quot; target=&quot;blank&quot;&gt;Operator Precedence&lt;/a&gt;.&lt;/strong&gt; Think about what the results would be for the following expressions, and then type them in to the terminal to verify your answers. Briefly explain the results for each one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 1\2 
&amp;gt;&amp;gt; 1/2
&amp;gt;&amp;gt; int8(1/2)
&amp;gt;&amp;gt; int8(1/3)
&amp;gt;&amp;gt; -5^2  
&amp;gt;&amp;gt; -5**2  
&amp;gt;&amp;gt; (-5) ^ 2 
&amp;gt;&amp;gt; (-5) ** 2 
&amp;gt;&amp;gt; 10-6/2 
&amp;gt;&amp;gt; 5*4/2*3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;
Here is the output in MATLAB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 1\2
ans =
     2
&amp;gt;&amp;gt; 1/2
ans =
    0.5000
&amp;gt;&amp;gt; int8(1/2)
ans =
  int8
   1
&amp;gt;&amp;gt; int8(1/3)
ans =
  int8
   0
&amp;gt;&amp;gt; -5^2
ans =
   -25
&amp;gt;&amp;gt; (-5)^2
ans =
    25
&amp;gt;&amp;gt; 10-6/2
ans =
     7
&amp;gt;&amp;gt; 5*4/2*3
ans =
    30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, note that the same results would not hold in Python.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Provide three different methods of generating the matrix &lt;strong&gt;a&lt;/strong&gt;, one method should use the &lt;code&gt;diag()&lt;/code&gt; function, one should use the &lt;strong&gt;eye&lt;/strong&gt; function, and one should use the &lt;strong&gt;zeros&lt;/strong&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is the output in MATLAB. Similar results can be achieved in Python, by using the same function names as in MATLAB, but via Python’s &lt;code&gt;numpy&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = eye(3,3) * 2
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; d = [2 2 2]
d =
     2     2     2
&amp;gt;&amp;gt; a = diag(d)
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = zeros(3,3);
&amp;gt;&amp;gt; a(1,1) = 2;
&amp;gt;&amp;gt; a(2,2) = 2;
&amp;gt;&amp;gt; a(3,3) = 2;
&amp;gt;&amp;gt; a
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; &lt;strong&gt;MATLAB.&lt;/strong&gt; Download this &lt;a href=&quot;http:/MAPCP2019U/homework/2-problems/matlab_script_full_of_errors.m&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_fixed.m&lt;/code&gt; in your folder for this HW. Explain in front of each corrected MATLAB statement, why the error occurred. Modify the last two variables so that they display,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Persian
Persian =
Persian is a human language
&amp;gt;&amp;gt; Spanish
Spanish = 
    'Spanish '    'is '    ' another'    'language'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Modify the last line such that for the last line the code displays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Persian is not the same as Spanish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain these results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The corrected script can be found &lt;a href=&quot;http:/MAPCP2019U/homework/2-solutions/script_full_of_errors_fixed.m&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;Python.&lt;/strong&gt; Download &lt;a href=&quot;http:/MAPCP2019U/homework/2-problems/python_script_full_of_errors.pi&quot; target=&quot;_blank&quot;&gt;this Python script&lt;/a&gt;. This Python script is full of syntax, runtime, and semantic errors. Please identify and corrent these errors, such that code becomes fully executable and outputs the following message on the screen, when run from the Git Bash command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;The life expectancy for the millennials is projected to be 120 years! (But don't believe it...)


    A recent study published in the journal of Nature, discovered that over the past century,
    although the life expectancy has significantly increased due to technological advances,
    the maximum life span of the oldest people in the world has not changed much.


Cardano was the first to introduce complex numbers of the form a + sqrt(-b) into algebra, but he had misgivings about it.
In his solution to an algebra equation he encountered the solution 5 + sqrt(-15) for the unknown, which is now mathematically represented by

       (5+3.872983346207417j)

in Python, which can also be obtained as an addition of real and imaginary numbers in Python like this


      5 + sqrt(-15) = (5+3.872983346207417j),


      which can also be manually stated as


      (5+3.872983346207417j)





One final note:

        In python the sqrt function from math and cmath modules are different.
        The sqrt function that returns &quot;float&quot; results is sqrt from math module.
        Therefore, if using math module, then,

                sqrt(25) = 5.0000,

        which is obviously a float (real number).




Also note that by convention, 0**0 = 1 in Python.
And division by 0, will give you a runtime exception: 1/0 = NaN

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Identify at least one example in the code for each of the error types.&lt;/p&gt;

&lt;p&gt;Here are a few hints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to get familiar with string formatting in &lt;code&gt;print&lt;/code&gt; function. See &lt;a href=&quot;https://www.cdslab.org/ECL2017S/lecture/4-python-values-variables-types&quot; target=&quot;_blank&quot;&gt;Lecture 4&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Note that in Python, the interpreter is sensitive to &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#indentation&quot; target=&quot;_blank&quot;&gt;indentations&lt;/a&gt; in your codes. All lines must be aligned at the beginning (except for looping and branching, … which we will get to them later on).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Become familiar with &lt;a href=&quot;https://python-reference.readthedocs.io/en/latest/docs/str/escapes.html&quot; target=&quot;_blank&quot;&gt;escape characters&lt;/a&gt; in Python, such as &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\t'&lt;/code&gt;, and &lt;code&gt;'\t'&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The corrected file can be downloaded from &lt;a href=&quot;http:/MAPCP2019U/homework/2-solutions/python_script_full_of_errors_corrected.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Examples of different types of programming errors:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;semantic error example: &lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;line 15, in the wrong script: The purpose is to print the complex number 5+sqrt(-15), but instead 5-15j is printed by the wrong script.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;line 35, in the wrong script: The purpose is to print float number, but since we used &lt;code&gt;sqrt&lt;/code&gt; from &lt;code&gt;cmath&lt;/code&gt; module, the output is in complex format, which is not what we intend to obtain and print.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;runtime error example:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;in line 45, in the wrong script, division by zero, is a runtime exception.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;syntax error example:&lt;br /&gt;
Almost any other error in the code is a syntax error. For example, lines 11,12,13 should be aligned, but they are not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; &lt;strong&gt;MATLAB.&lt;/strong&gt; Use MATLAB help to find out how you can create a new directory named &lt;code&gt;mynewdir&lt;/code&gt; from MATLAB command line. Then change the working directory the newly created directory. Then create a MATLAB script in this directory named &lt;code&gt;myscript.m&lt;/code&gt; with the following code in it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;% First create an array from -2*pi to 2:pi
x = -2*pi:pi/20:2*pi;

% Calculate |sin(x)|
y = abs(sin(x));

plot(x,y);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now on MATLAB command line, run the script by calling its name. What do you get? Save the output as a figure and submit it with your homework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can create a new directory and switch the current directory to it using the following commands,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt; mkdir mynewdir
&amp;gt;&amp;gt; cd mynewdir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The script &lt;code&gt;myscript&lt;/code&gt; generates a plot of $y$ versus $x$ where $y = |sin(x)|$. In doing so, MATLAB opens a new window called &lt;strong&gt;plot window&lt;/strong&gt; that contains the plot of y as a function of x. Here is the resulting figure:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/2-solutions/plot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;MATLAB.&lt;/strong&gt; Now change your working directory to the original directory before you created &lt;code&gt;mynewdir&lt;/code&gt; directory. Try to run the script &lt;code&gt;myscript&lt;/code&gt; you had created again, from MATLAB command line. What do you get? and why?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You get an error message like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; cd mynewdir\
&amp;gt;&amp;gt; myscript
&amp;gt;&amp;gt; cd ..
&amp;gt;&amp;gt; myscript
Undefined function or variable 'myscript'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
And this happens because the script we are trying to run is neither in MATLAB’s working directory, nor in any of MATLAB’s search paths. Therefore, MATLAB gives an error, as it cannot find the requested file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; &lt;strong&gt;Python&lt;/strong&gt; Write a Python script that is directly executable from the Git Bash command line, without any need to invoke &lt;code&gt;python&lt;/code&gt; interpreter. The script should produce &lt;strong&gt;exactly&lt;/strong&gt; the following output, including line breaks and separations. Each part of the output (separated by a line-break, or a new-line character &lt;code&gt;'\n'&lt;/code&gt; from the rest) is generated by &lt;strong&gt;only and only one call&lt;/strong&gt; to print function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;This is Python version 3.5.2 

Python is the best language for String manipulation!

!noitalupinam gnirtS rof egaugnal tseb eht si nohtyP

!otlpnmgit o gunlte h inhy

pYTHON IS THE BEST LANGUAGE FOR sTRING MANIPULATION!


The sentence 'Python is the best language for String manipulation!' contains 
4 'a' letters, and
0 'A' letters!

Python
is
the
best
language
for
String
manipulation!

PYTHON
IS
THE
BEST
LANGUAGE
FOR
STRING
MANIPULATION!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here are some hints (all the information you need to answer this question can be found in the lecture notes):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To make the script executable, add the appropriate shebang to the script’s file.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Import the appropriate module to get the python version command, as we did in class. Use &lt;code&gt;print&lt;/code&gt; function to print the Python version.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Define a String variable &lt;code&gt;my_string&lt;/code&gt; which contains the string value “Python is the best language for String manipulation!” ( Of course, you can totally accomplish this question without defining a string variable, by only using the string value itself wherever needed… This is also totally fine at this point in our course, if your prefer this method).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Then use the appropriate examples and external links provided in the lecture notes, to find the proper &lt;strong&gt;string methods&lt;/strong&gt; that can manipulate this string variable/value in order to generate each of the outputs printed above.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Again, note that for each output, the entire output must result from &lt;strong&gt;one single call&lt;/strong&gt; to function &lt;code&gt;print&lt;/code&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Wherever needed, use the &lt;a href=&quot;https://python-reference.readthedocs.io/en/latest/docs/str/escapes.html&quot; target=&quot;_blank&quot;&gt;escape character&lt;/a&gt; value &lt;code&gt;'\n'&lt;/code&gt; in &lt;code&gt;print&lt;/code&gt; input arguments, in order to generate a line-break (or new line) in the output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
A working Python script file can be downloaded from &lt;a href=&quot;http:/MAPCP2019U/homework/2-solutions/bashExecutable.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. &lt;/strong&gt; The bell-shaped &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian probability density function&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)=\frac{1}{\sqrt{2\pi}\sigma}\exp\bigg[ -\frac{1}{2}\bigg( \frac{x-\mu}{\sigma} \bigg)^2 \bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
is one of the most widely used functions in science and technology. The parameters of the function (mu,sigma&amp;gt;0) are prescribed real numbers. Write a program for evaluating this function when $\mu=0$, $\sigma=2$, $x = 1$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; The value &lt;code&gt;pi&lt;/code&gt;, and &lt;code&gt;exp()&lt;/code&gt; , &lt;code&gt;sqrt()&lt;/code&gt; function are built-in in MATLAB, but are not so in Python. You will need to export them using the following command in Python,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from math import pi, exp, sqrt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Verify your answer by getting the same result from &lt;a href=&quot;https://www.wolframalpha.com/&quot; target=&quot;_blank&quot;&gt;Wolfram Alpha&lt;/a&gt; mathematical search engine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
A version of the code in Python can be downloaded from &lt;a href=&quot;http:/MAPCP2019U/homework/2-solutions/gaussian.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. &lt;/strong&gt; &lt;strong&gt;Python.&lt;/strong&gt; Download &lt;a href=&quot;http:/MAPCP2019U/homework/2-problems/script_full_of_errors.py&quot; target=&quot;_blank&quot;&gt;this code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_corrected.py&lt;/code&gt; in your hw4 folder of your project. Explain in front of each corrected Python statement, why the error occurred.  On the last line of the script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;true = fox is rev in Persian
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the statement runs without error. But can you explain what it does? (Hint: For this part you need to understand operation precedence. You can find more information &lt;a href=&quot;https://www.mathcs.emory.edu/~valerie/courses/fall10/155/resources/op_precedence.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The corrected file can be downloaded from &lt;a href=&quot;http:/MAPCP2019U/homework/2-solutions/script_full_of_errors_corrected.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. &lt;/strong&gt; As an egg cooks, the proteins first denature and then coagulate. When the temperature exceeds a critical point, reactions begin and proceed faster as the temperature increases. In the egg white, the proteins start to coagulate for temperatures above $63^\circ\rm{C}$, while in the yolk the proteins start to coagulate for temperatures above $70^\circ\rm{C}$. For a soft boiled egg, the white needs to have been heated long enough to coagulate at a temperature above $63^\circ\rm{C}$, but the yolk should not be heated above $70^\circ\rm{C}$. For a hard boiled egg, the center of the yolk should be allowed to reach $70^\circ\rm{C}$.&lt;/p&gt;

&lt;p&gt;The following formula expresses the time $t$ it takes (in seconds) for the center of the yolk to reach the temperature Ty (in Celsius degrees):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t = \frac
{ M^{2/3} ~ c ~ \rho^{1/3} }
{ K\pi^2 ~ (4\pi/3)^{2/3} }
~\ln
\bigg[
0.76 \frac{T_0 - T_w}{T_y-T_w}
\bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
where $M$ is the mass of egg, $\rho$ is the density, $c$ is the specific heat capacity, and $K$ is thermal conductivity. Relevant values are $M=47~[g]$ for a small egg and $M=67~[g]$ for a large egg, $\rho=1.038 ~[g~cm^{-3}]$, $c = 3.7 ~[J~g^{-1}~K^{-1}]$, and $K = 5.4\times10^{-3} ~[Wcm^{-1}K^{-1}]$. Furthermore, $T_w$ is the temperature
(in C degrees) of the boiling water, and $T_0$ is the original temperature (in C degrees) of the egg before being put in the water. Implement the formula in a Python/MATLAB program, set $T_w = 100^\circ C$ and $T_y = 70^\circ C$, and compute $t$ for a large egg taken from the fridge ($T_0 = 4^\circ C$) and from room temperature ($T_0 = 20^\circ C$). (&lt;strong&gt;Hint&lt;/strong&gt;: Note that for this problem you will need to import &lt;code&gt;log, pi&lt;/code&gt; from &lt;code&gt;math&lt;/code&gt; module in Python, but these are intrinsic in MATLAB.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
A version of the code can be downloaded from &lt;a href=&quot;http:/MAPCP2019U/homework/2-solutions/egg.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13.  Python: Aliasing vs. Copying variables.&lt;/strong&gt; Run the following python statements and briefly explain why you get the behavior printed by the &lt;code&gt;print&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;(A)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = 5
b = a
print (id(a), id(b))
 
c = b
b = 3
print (a,b,c)
print (id(a),id(b),id(c))
 
b = a
b = 5
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [5]
b = a
print (id(a), id(b))
 
b.append(1)
print a,b
print (id(a),id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(C)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [5]
b = list(a)
print (a,b)
print (id(a), id(b))
 
b = a[:]
print (a,b)
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(D)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = (5,)
b = tuple(a)
print (id(a), id(b))
 
b = a[:]
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(A)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Assign a value to a new variable
a = 5
 
# Create an alias identifier for this variable
b = a
 
# Observe how they refer to the same variable!
print (id(a), id(b))
 
# Create another alias
c = b
 
# Now assign a new value to b!
b = 3
 
# And observe how a and c are still the same variable
# But b is not
print (a,b,c)
print (id(a),id(b),id(c))
 
# Now for another quirk, suppose we do this:
b = a
b = 5
 
# We used an assignment, but the value didn't actually change
# So the alias remains unbroken
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Create a new &amp;lt;list&amp;gt;
a = [5]
 
# Create an alias identifier for this list
b = a
print (id(a), id(b))
 
# Now change the &amp;lt;list&amp;gt; b in-place
b.append(1)
 
# And observe how this also changes a
# The alias is not broken by in-place operations
print (a,b)
print (id(a),id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(C)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Create a &amp;lt;list&amp;gt;
a = [5]
 
# Create a new &amp;lt;list&amp;gt; with the same value
b = list(a)
 
# We now have two separate variables with identical but separate values
print (a,b)
print (id(a), id(b))
 
# Same with the full slice technique:
b = a[:]
print (a,b)
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(D)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Create &amp;lt;tuple&amp;gt;
a = (5,)
 
# Try to force a copy
b = tuple(a)
 
# It didn't work...
print (id(a), id(b))
 
# Neither does this
b = a[:]
print (id(a), id(b))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14.  Python.&lt;/strong&gt; The following is the name list of all people in our class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Christian-Andrew Bagby-wright
Matthew Chrysler
Niyousha Davachi
Pauline Dredger
Marcos Guillen
Lauren Kuffel
Shashank Kumbhare
Hany Mahdy
Sarah Moorman
Andrew Myers
Joshua Osborne
Rebecca Proni
Amir Shahmoradi
Carolina Vedovato
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
We want to create a dictionary of members of this class with individuals’ full names serving as dictionary keys, and their roles in class as the corresponding values of the keys. The naive way of generating this dictionary would be to use one of the methods for generating dictionary discussed in the lecture notes. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class_dict  = { 
            , 'Christian-Andrew Bagby-wright' : 'student'
            , 'Matthew Chrysler'              : 'student'
            , 'Niyousha Davachi'              : 'student'
            , 'Pauline Dredger'               : 'student'
            , 'Marcos Guillen'                : 'student'
            , 'Lauren Kuffel'                 : 'student'
            , 'Shashank Kumbhare'             : 'student'
            , 'Hany Mahdy'                    : 'student'
            , 'Sarah Moorman'                 : 'student'
            , 'Andrew Myers'                  : 'student'
            , 'Joshua Osborne'                : 'student'
            , 'Rebecca Proni'                 : 'student'
            , 'Amir Shahmoradi'               : 'instructor'
            , 'Carolina Vedovato'             : 'student'
            }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, the problem is that, except me (Amir, the instructor), everyone else has a student role in this class. So it would be a very painful process to type all ‘student’ values by hand manually. Now, the goal is to come up with a shortcut method that avoids the aforementioned problem. Can you find a way of creating this dictionary, without having to type the value ‘student’ 14 times? Note that in order to achieve this, you don’t need anything beyond what you learned in the lecture notes. (&lt;strong&gt;Hint:&lt;/strong&gt; Have a look at the section for simultaneous assignments in the lecture notes.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class_dict = { 'amir shahmoradi'  : 'instructor'
           }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class_dict
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{'amir shahmoradi': 'instructor'}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class_dict[ 'Christian-Andrew Bagby-wright' ] = \
class_dict[ 'Matthew Chrysler'              ] = \
class_dict[ 'Niyousha Davachi'              ] = \
class_dict[ 'Pauline Dredger'               ] = \
class_dict[ 'Marcos Guillen'                ] = \
class_dict[ 'Lauren Kuffel'                 ] = \
class_dict[ 'Shashank Kumbhare'             ] = \
class_dict[ 'Hany Mahdy'                    ] = \
class_dict[ 'Sarah Moorman'                 ] = \
class_dict[ 'Andrew Myers'                  ] = \
class_dict[ 'Joshua Osborne'                ] = \
class_dict[ 'Rebecca Proni'                 ] = \
class_dict[ 'Carolina Vedovato'             ] = 'student'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class_dict
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{'amir shahmoradi': 'instructor',
'Christian-Andrew Bagby-wright': 'student',
'Matthew Chrysler': 'student',
'Niyousha Davachi': 'student',
'Pauline Dredger': 'student',
'Marcos Guillen': 'student',
'Lauren Kuffel': 'student',
'Shashank Kumbhare': 'student',
'Hany Mahdy': 'student',
'Sarah Moorman': 'student',
'Andrew Myers': 'student',
'Joshua Osborne': 'student',
'Rebecca Proni': 'student',
'Carolina Vedovato': 'student'}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;type(class_dict)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later on, we will learn more effective methods of constructing this dictionary using Python’s for-loops.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/homework/2-variables-values-types&quot;&gt;Homework 2: Variables, Values, and Types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/homework/1-version-control-using-git-github"/>
  <id>http:/MAPCP2019U/homework/1-version-control-using-git-github</id>
  <published>2019-06-18T00:00:00-05:00</published>
  <updated>2019-06-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
The following figure illustrates the grade distribution for this homework.  
&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/homework/gradeDist/gradeHistHomework1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points, excluding bonus questions, is 1.&lt;br&gt;
        Maximum possible points, including bonus questions, is 1.5.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: One week from the posting date @ 10:30 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;First, use the following Markdown language references, or any other reference that you find or prefer, to design a Github-interpretable README file for each of folders in your project for this course, and a Github web-page for your project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/MAPCP2019U/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet (pdf)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ghost.org/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown language reference (web)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot; target=&quot;_blank&quot;&gt;Adam Pritchard’s Markdown cheat-sheet (web)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write your code sections of your answer in Markdown syntax.
For example,&lt;br /&gt;
&lt;code&gt;
    ```bash  &lt;br /&gt;
    $ git branch -d test  &lt;br /&gt;
    error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'  &lt;br /&gt;
    ```
&lt;/code&gt;
&lt;br /&gt;
will display the following text highlighted as &lt;em&gt;bash&lt;/em&gt; code, in your &lt;em&gt;readme.md&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Include the following information with the following format and information in your main directory &lt;code&gt;readme.md&lt;/code&gt; file:&lt;/p&gt;

&lt;h2 id=&quot;beginning-of-the-readme-files-content&quot;&gt;&lt;em&gt;Beginning of the README file’s content&lt;/em&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mapcp2019u---introduction-to-computer-programming-summer-2019&quot;&gt;MAPCP2019U - Introduction to Computer Programming (Summer 2019)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Name:&lt;/strong&gt; &amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;br /&gt;
&lt;strong&gt;UTA EID:&lt;/strong&gt; &amp;lt;your UTA EID&amp;gt;&lt;br /&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &amp;lt;your email&amp;gt;&lt;br /&gt;
&lt;strong&gt;Department:&lt;/strong&gt; &lt;a href=&quot;https://www.uta.edu/physics/&quot;&gt;Department of Physics&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;University:&lt;/strong&gt; &lt;a href=&quot;https://www.utexas.edu/&quot;&gt;The University of Texas at Arlington&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Level:&lt;/strong&gt; graduate - &amp;lt;Freshman (1st year) / Sophomore (2nd year) / Junior (3rd year) / Senior (4th year) / Dinosaur (5th year and above) &amp;gt;&lt;br /&gt;
&lt;strong&gt;MAPCP-Class Title:&lt;/strong&gt; Student&lt;br /&gt;
&lt;strong&gt;Course Webpage:&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.orghttp:/MAPCP2019U/&quot;&gt;https://www.cdslab.orghttp:/MAPCP2019U/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Photo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http:/MAPCP2019U/images/AmirShahmoradi.png&quot; alt=&quot;Amir Shahmoradi&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-of-the-projects-content&quot;&gt;Description of the project’s content&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt; This repository contains my homework, quizzes, and virtually every effort that I have made for &lt;a href=&quot;https://www.cdslab.orghttp:/MAPCP2019U/&quot;&gt;MAPCP2019U class&lt;/a&gt;. The structure of the project is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#homework&quot;&gt;homework&lt;/a&gt;:&lt;/strong&gt; (the homework hyperlink should take the reader to the homework folder)&lt;br /&gt;
  This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#quiz&quot;&gt;quiz&lt;/a&gt;:&lt;/strong&gt; (the quiz hyperlink should take the reader to the quizzes folder)&lt;br /&gt;
  This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#exam&quot;&gt;exam&lt;/a&gt;:&lt;/strong&gt; (the exam hyperlink should take the reader to the exams folder)&lt;br /&gt;
  This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For questions and troubleshooting, please contact:&lt;/p&gt;

&lt;p&gt;&amp;lt;your name&amp;gt;&lt;br /&gt;
&amp;lt;your email&amp;gt;&lt;br /&gt;
&amp;lt;any other contact or signature information that you would like to add&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have not failed. I’ve just found 10,000 ways that won’t work.&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_Edison&quot; target=&quot;_blank&quot;&gt;Thomas A. Edison&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;end-of-the-readme-files-content&quot;&gt;&lt;em&gt;End of the README file’s content&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Use the following Markdown code in your &lt;code&gt;readme.md&lt;/code&gt; file to get the exact same behavior as requested above:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;#### MAPCP2019U - Introduction to Computer Programming (Summer 2019)
&amp;lt;br&amp;gt;
**Name:** \&amp;lt;first name&amp;gt; \&amp;lt;last name&amp;gt;  
**UT EID:** \&amp;lt;your UTA EID&amp;gt;  
**Email:** \&amp;lt;your email&amp;gt;  
**Department:** [Department of Physics](https://www.uta.edu/physics/)    
**University:** [The University of Texas at Arlington](https://www.utexas.edu/)  
**Level:** graduate - \&amp;lt;Freshman (1st year) / Sophomore (2nd year) / Junior (3rd year) / Senior (4th year) / Dinosaur (5th year and above) &amp;gt;  
**MAPCP-Class Title:** Student  
**Course Webpage:** &amp;lt;https://www.cdslab.orghttp:/MAPCP2019U/&amp;gt;  
**Photo:**  

![Amir Shahmoradi](../../images/AmirShahmoradi.png)  

#### Description of the project's content
&amp;lt;br&amp;gt; This repository contains my homework, quizzes, and virtually every effort that I have made for [MAPCP2019U class](https://www.cdslab.orghttp:/MAPCP2019U/). The structure of the project is the following:

* **[homework](#homework):** (the homework hyperlink should take the reader to the homework folder)  
    This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.  
    &amp;lt;br&amp;gt;
* **[quiz](#quiz):** (the quiz hyperlink should take the reader to the quizzes folder)  
    This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.  
    &amp;lt;br&amp;gt;
* **[exam](#exam):** (the exam hyperlink should take the reader to the exams folder)  
    This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.  
    &amp;lt;br&amp;gt;

For questions and troubleshooting, please contact:  

\&amp;lt;your name&amp;gt;  
\&amp;lt;your email&amp;gt;  
\&amp;lt;any other contact or signature information that you would like to add&amp;gt;

&amp;gt;I have not failed. I've just found 10,000 ways that won't work.  
&amp;gt;[Thomas A. Edison](https://en.wikipedia.org/wiki/Thomas_Edison){:target=&quot;_blank&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Note that you will have to change the relevant information and hyper-references in the above Mardown code to those that match your own information in your own repository (including your own photo).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Create two additional test branches in your project, each of which is branched directly from &lt;em&gt;master&lt;/em&gt;. &lt;strong&gt;For each of the following cases, write the command and the corresponding output message of Git, in Markdown language in a &lt;code&gt;readme.md&lt;/code&gt; file inside your &lt;code&gt;homework/1/&lt;/code&gt; folder in your master branch&lt;/strong&gt;. If you don’t have this folder in your project, then create the folder and then place your initial &lt;code&gt;readme.md&lt;/code&gt; file in this folder with your signature as the content of the file. Then stage and commit this file together with homework-1 folder to your local repository. Throughout the rest of this homework, you will fill this &lt;code&gt;readme.md&lt;/code&gt; file with your answers.&lt;/p&gt;

&lt;p&gt;(A) Create two branches, &lt;strong&gt;both from your &lt;em&gt;master&lt;/em&gt; branch&lt;/strong&gt;, with names &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* master

$ git branch test1

$ git branch test2

$ git branch
* master
  test1
  test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(B) Now checkout the &lt;em&gt;test1&lt;/em&gt; branch and create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test1
Switched to branch 'test1'

$ git status
On branch test1
nothing to commit, working tree clean

$ ls
readme.md

$ touch test.txt

$ ls
readme.md  test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(C) Inside &lt;code&gt;test.txt&lt;/code&gt; in &lt;em&gt;test1&lt;/em&gt; branch write this message: &lt;em&gt;This is some example text for branch test1&lt;/em&gt;, and save it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;vim test.txt&lt;/code&gt; to open &lt;em&gt;vim&lt;/em&gt; editor. Press &lt;code&gt;shift + I&lt;/code&gt; to switch to &lt;em&gt;vim insert mode&lt;/em&gt;. write &lt;em&gt;This is some example text for branch test1&lt;/em&gt; in &lt;code&gt;test.txt&lt;/code&gt; file. Now, Press &lt;code&gt;ESC&lt;/code&gt; key and write &lt;code&gt;:wq&lt;/code&gt; on the &lt;em&gt;vim&lt;/em&gt; command line to save the file and quit &lt;em&gt;vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(D) Now stage and commit &lt;code&gt;test.txt&lt;/code&gt; file to branch &lt;em&gt;test1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch test1
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)

$ git add --all
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.

$ git commit -m&quot;commiting the test.txt file in test1 branch&quot;
[test1 715ca59] commiting the test.txt file in test1 branch
1 file changed, 1 insertion(+)
create mode 100644 test.txt

$ git status
On branch test1
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(E) Checkout the branch &lt;em&gt;test2&lt;/em&gt;. Do you still see &lt;code&gt;test.txt&lt;/code&gt; that you just created in your &lt;code&gt;homework/1/&lt;/code&gt; directory? You can search for it by the &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;ls&lt;/code&gt;. Explain why you see/don’t see the file in your working directory anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
Switched to branch 'test2'

$ ls
readme.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;test.txt&lt;/code&gt; files is not in the project’s working directory, since I just chaecked out a new branch &lt;em&gt;test2&lt;/em&gt; that does not contain any files that were generated and committed in &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(F) Create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch as well, and add &lt;em&gt;This is some example text for branch test2&lt;/em&gt; to its content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ touch test.txt

$ vim test.txt

$ git status
On branch test2
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The procedure for adding content to the file is very similar to that in part (C) of the problem, explained above.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(G) Now try to checkout &lt;em&gt;test1&lt;/em&gt;. What error/warning message do you get? Fix the source of error and then checkout &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test1
error: The following untracked working tree files would be overwritten by checkout:
        test.txt
Please move or remove them before you switch branches.
Aborting

$ git add --all
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.

$ git commit -m&quot;commtting the test2 branch changes&quot;
[test2 fce6a94] commtting the test2 branch changes
1 file changed, 1 insertion(+)
create mode 100644 test.txt

$ git status
On branch test2
nothing to commit, working tree clean

$ git checkout test1
Switched to branch 'test1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(H) Now merge the content of &lt;em&gt;test1&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. (Hint: Note from which branch you doing this merge!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ ls
readme.md

$ git status
On branch master
nothing to commit, working tree clean

$ git merge test1
Updating a661e87..715ca59
Fast-forward
 test.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(I) Now what do you see as the content of &lt;em&gt;master&lt;/em&gt; branch? (Hint: Use &lt;code&gt;ls&lt;/code&gt; &lt;em&gt;bash&lt;/em&gt; command, to list the files in the working directory.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls
readme.md  test.txt

$ git status
On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(J) Now merge the content of &lt;em&gt;test2&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. What error/warning message do you get? Why does this error arise?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge test2
Auto-merging test.txt
CONFLICT (add/add): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(K) Now checkout &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
test.txt: needs merge
error: you need to resolve your current index first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(L) Run the Git command &lt;code&gt;git status&lt;/code&gt;. Why does such a conflict exist, as mentioned in &lt;code&gt;git status&lt;/code&gt; output?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Basically, by running &lt;code&gt;git merge test2&lt;/code&gt; command, we attempted to merge test.txt file of &lt;em&gt;test2&lt;/em&gt; branch with the existing &lt;code&gt;test.txt&lt;/code&gt; file of &lt;em&gt;master&lt;/em&gt; branch. But the content of the two is different.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(M) At this stage, you have two options: Either 1. stage and commit the combined conlifting &lt;code&gt;test.txt&lt;/code&gt; file to Git repository (but this is not recommended), or, 2. open the file &lt;code&gt;test.txt&lt;/code&gt; using &lt;em&gt;vim&lt;/em&gt; editor on the command line and reslve the conflict by editing the content of the file to only this sentence: &lt;em&gt;. Then save and quit *vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ vim test.txt

$ cat test.txt
This is some example text from both test1 and test2 branches combined.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;cat&lt;/code&gt; shows the content of &lt;code&gt;text.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(N) Now, run &lt;code&gt;git status&lt;/code&gt;, then stage and commit your conflict-resolved file. Then checkout &lt;em&gt;test2&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both added:      test.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

$ git add test.txt

$ git commit -m&quot;adding the test.txt resolution file&quot;
[master 4c74098] adding the test.txt resolution file

$ git status
On branch master
nothing to commit, working tree clean

$ git checkout test2
Switched to branch 'test2'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(O) Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on branch &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test1
error: The branch 'test1' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test1'.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(P) Now, switch back to &lt;em&gt;master&lt;/em&gt; branch. Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on &lt;em&gt;master&lt;/em&gt; branch. What message do you get from Git? List all the existing branches using &lt;code&gt;git branch&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git branch
* master
  test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(Q) Why is there such a difference in Git messages between when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;test2&lt;/em&gt; branch, and when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;master&lt;/em&gt; branch?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The difference arises, because whichever branch you are in, Git assumes that the content of any other branch should be first merged for the current branch before deteting the other branch. Therefore, in the first case, Git warns that there is unmerged data between &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt; branches. But the delete command from &lt;em&gt;master&lt;/em&gt; branch gives no error, since the content of &lt;em&gt;test1&lt;/em&gt; branch has been previously appropriately merged with &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(R) Now checkout &lt;em&gt;test2&lt;/em&gt; branch. While on &lt;em&gt;test2&lt;/em&gt;, try to delete branch &lt;em&gt;test2&lt;/em&gt;. What error/message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
Switched to branch 'test2'

$ git branch -d test2
error: Cannot delete branch 'test2' checked out at '~/test'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(S) Switch back to &lt;em&gt;master&lt;/em&gt; and delete &lt;em&gt;test2&lt;/em&gt; branch. List all your project branches by the appropriate Git command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git branch -d test2
Deleted branch test2 (was fce6a94).

$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(T) Stage and commit all the changes (including the file &lt;code&gt;test.txt&lt;/code&gt;) to your project’s &lt;em&gt;master&lt;/em&gt; branch. Now push it all to the remote repository by Wednesday Feb 15 2017, 9:00 a.m. CDT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add --all

$ git commit
On branch master
nothing to commit, working tree clean

$ git push --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (Bonus, not mandatory) Design a simple Github page for your project, using the main directory’s &lt;code&gt;readme.md&lt;/code&gt; file. Submit the link to the page as your answer. Note that you don’t need to add anything extra to your readme file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Ask me in class to teach you how to do it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; (Bonus, not mandatory) Create a website for your project, such that your project is accessible through its web address based on the content of your project’s website, not based on the content of &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Ask me in class and I will explain how to do it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/homework/1-version-control-using-git-github&quot;&gt;Homework 1: Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 18, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 1: Assessing your programming knowledge and interests]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/announcement/1-assessing-your-programming-knowledge-and-interests"/>
  <id>http:/MAPCP2019U/announcement/1-assessing-your-programming-knowledge-and-interests</id>
  <published>2019-06-04T00:00:00-05:00</published>
  <updated>2019-06-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your prior programming experience and to identify the favorite programming language for this class, as well as the language that your advisor deems essential for your research. Ask Amir to send you a link to the survey if you have not already received it.&lt;/p&gt;

&lt;h2 id=&quot;survey-results-as-of-june-4-2019&quot;&gt;Survey results as of June 4, 2019&lt;/h2&gt;

&lt;p&gt;The following are the summaries of the responses to the survey questions. The total number of survey respondents is 10. It appears that at least half of the class, knows at least one programming language at some elementary level. Also it appears that almost everyone in this class is in love with Python!&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q2.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q3.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q4.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q5.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q6.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/1/Q7.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/announcement/1-assessing-your-programming-knowledge-and-interests&quot;&gt;Announcement 1: Assessing your programming knowledge and interests&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 04, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 0: Student-professor connection day]]></title>
  <link rel="alternate" type="text/html" href="http:/MAPCP2019U/announcement/0-student-professor-connection-day"/>
  <id>http:/MAPCP2019U/announcement/0-student-professor-connection-day</id>
  <published>2019-06-04T00:00:00-05:00</published>
  <updated>2019-06-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MAPCP2019U</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;On the first day of our class, we will try to get to know each other and I will attempt to describe my research work and educational background for you, as well as what we should expect from this course. Then I will present the results of the survey that I sent out to you a week ago to assess your programming knowledge, your favorite programming language, and the programming language that you would need for your research. Based on the survey results and your feedback in class, we will decide on the choice of language and the design of this course.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;about-me-amir-the-instructor&quot;&gt;About me, Amir, the instructor&lt;/h2&gt;

&lt;p&gt;I am a physicist and researcher, and currently a faculty member at &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/physics/&quot;&gt;the Department of Physics&lt;/a&gt; as well as the Data Science Program in &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/science/index.php&quot;&gt;The College of Science&lt;/a&gt; at &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/&quot;&gt;The University of Texas at Arlington&lt;/a&gt;. You can find more information about me, our group, and our research at &lt;a target=&quot;_blank&quot; href=&quot;https://www.cdslab.org&quot;&gt;cdslab.org&lt;/a&gt;. Here is a summary of my life in a few pictures:&lt;/p&gt;

&lt;p&gt;I was introduced to the world of information and computer programming around 1991 by my father and elder brother. By the end of elementary school, I was so impressed with and knew enough about computer software to write a few simple &lt;a target=&quot;_blank&quot; href=&quot; https://en.wikipedia.org/wiki/PC_game&quot;&gt;computer games&lt;/a&gt; in &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/QBasic&quot;&gt;QBasic programming language&lt;/a&gt; on our first family personal computer, &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/IBM_386SLC&quot;&gt;IBM 386&lt;/a&gt;. Here is an example of how computer games looked liked 30 years ago.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4TSF5sIgorA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
		&lt;!-- &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; --&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/memoriesOfGreen.jpg&quot; width=&quot;100%&quot; /&gt;
        
        
            &lt;figcaption&gt;A portrait of me at high-school by my friends&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/EinsteinSandals.jpg&quot; width=&quot;100%&quot; /&gt;
        
        
            &lt;figcaption&gt;What I imagined I'd do as a physicist&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/PhDdefense.gif&quot; width=&quot;100%&quot; /&gt;
        
        
            &lt;figcaption&gt;A scene from my Ph.D. defense&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I never imagined a day I would use computer programming for scientific purposes. Nevertheless, there has been almost no single day that I have not used scientific programming for my work and research, ever since I entered graduate school.&lt;/p&gt;

&lt;h2 id=&quot;my-research-topics&quot;&gt;My research topics&lt;/h2&gt;

&lt;p&gt;The following are a few examples of what I do nowadays as part of my scientific research at UT Austin.&lt;/p&gt;

&lt;h3 id=&quot;theoretical-astrophysics&quot;&gt;Theoretical Astrophysics&lt;/h3&gt;

&lt;p&gt;While my current focus of research is mathematical modelling of tumor growth and Monte Carlo samplers, I am and have been working in multiple branches of science and engineering for several years, from the subatomic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Elementary_particle&quot;&gt;elementary particles&lt;/a&gt;, to the microscopic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Macromolecule&quot;&gt;biological macromolecules&lt;/a&gt;, to &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot;&gt;astrophysical phenomena&lt;/a&gt; occurring on the grandest scales of the &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Observable_universe&quot;&gt;observable Universe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For several years of my research, I have been working on understanding Gamma-Ray Bursts (GRB) and their physics. Below is a movie of the moment a Short-duration GRB is generated from the merger of a binary Neutron star system.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/astro_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;theoretical-biology-bioinformatics&quot;&gt;Theoretical Biology, Bioinformatics&lt;/h3&gt;

&lt;p&gt;I have also worked for a few years in the field of bioinformatics and evolutionary biology. The overarching goal in the field of protein bioinformatics and biophysics is to understand how proteins fold into their unique structure, and what determines the stability of the protein &lt;abbr title=&quot;3-Dimensional&quot;&gt;3D&lt;/abbr&gt; structure.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/bio_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/bio_2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the workhorses of this field, is therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Molecular_dynamics&quot; target=&quot;_blank&quot;&gt;molecular dynamic simulation&lt;/a&gt; to probe the dynamics of proteins and their interactions with other molecules. The following is a 1.5ns molecular dynamics simulation of Human Influenza H1 Hemagglutinin protein (&lt;a href=&quot;https://www.rcsb.org/pdb/explore.do?structureId=1rd8&quot; target=&quot;_blank&quot;&gt;1RD8&lt;/a&gt;, chains AB).&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;petroleum-engineering&quot;&gt;Petroleum Engineering&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/petro_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;computational-oncology&quot;&gt;Computational Oncology&lt;/h3&gt;

&lt;p&gt;What you see in the figures below, is a representation of the growth of Glioblastoma tumor cells in a Rat’s brain over time.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/onco_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/onco_2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/onco_3.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-temporal-evolution-of-the-growth-of-glioma-tumor-in-rat&quot;&gt;The temporal evolution of the growth of Glioma tumor in rat&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_1_t10.0.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/GBGlastLong.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_2_t12.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_3_t14.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_5_t16.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_6_t18.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_7_t20.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

--&gt;

&lt;h3 id=&quot;monte-carlo-simulation-and-integration-methods&quot;&gt;Monte Carlo Simulation and Integration Methods&lt;/h3&gt;

&lt;p&gt;One of the fields on which my research is currently focused, is developing Monte Carlo optimizer/sampler and integrator algorithms for Bayesian inverse problems.&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-sampling-algorithms&quot;&gt;Development of Monte Carlo sampling algorithms&lt;/h4&gt;

&lt;p&gt;Below you see example animations of two &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&quot; target=&quot;_blank&quot;&gt;Markov Chain Monte Carlo&lt;/a&gt; (MCMC) samplers, both of which sample a double Gaussian-peak function, but with different MCMC sampling parameters.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/PDF_RS_H_Forever20ms.gif&quot; width=&quot;100%&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of highly-efficiency, but bad-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/PDF_RS_L_Forever20ms.gif&quot; width=&quot;100%&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of low-efficiency, but good-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-integration-algorithms&quot;&gt;Development of Monte Carlo integration algorithms&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/DRI.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/DLI.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/GR3D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/GR2D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/GR2D.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/EB3D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/MAPCP2019U/announcement/0/EB2D.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;biomedical-data-science&quot;&gt;Biomedical Data Science&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/PT509_ST9501_SE00144_ADC0016.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/MAPCP2019U/announcement/0/PT509_ST9501_SE00144_ADC0016_overlay.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MAPCP2019U/announcement/0-student-professor-connection-day&quot;&gt;Announcement 0: Student-professor connection day&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MAPCP2019U&quot;&gt;PHYS 6302 - Summer 2019 - TTH 10:30-12:30 - Life Sciences Building LS 102&lt;/a&gt; on June 04, 2019.&lt;/p&gt;</content>
</entry>

</feed>
